!function e(t,i,r){function n(a,s){if(!i[a]){if(!t[a]){var l="function"==typeof require&&require;if(!s&&l)return l(a,!0);if(o)return o(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var u=i[a]={exports:{}};t[a][0].call(u.exports,function(e){var i=t[a][1][e];return n(i?i:e)},u,u.exports,e,t,i,r)}return i[a].exports}for(var o="function"==typeof require&&require,a=0;a<r.length;a++)n(r[a]);return n}({1:[function(e,t,r){var n=n||{};n.Math={clamp:function(e,t,i){return Math.min(Math.max(e,t),i)},degToRad:function(){var e=Math.PI/180;return function(t){return t*e}}()},n.Quaternion=function(e,t,i,r){this.x=e||0,this.y=t||0,this.z=i||0,this.w=void 0!==r?r:1},n.Quaternion.prototype={constructor:n.Quaternion,set:function(e,t,i,r){return this.x=e,this.y=t,this.z=i,this.w=r,this},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w,this},conjugate:function(){return this.x*=-1,this.y*=-1,this.z*=-1,this},inverse:function(){return this.conjugate().normalize()},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},normalize:function(){var e=this.length();return 0===e?(this.x=0,this.y=0,this.z=0,this.w=1):(e=1/e,this.x*=e,this.y*=e,this.z*=e,this.w*=e),this},multiply:function(e){return this.multiplyQuaternions(this,e)},multiplyQuaternions:function(e,t){var i=e.x,r=e.y,n=e.z,o=e.w,a=t.x,s=t.y,l=t.z,c=t.w;this.x=i*c+o*a+r*l-n*s,this.y=r*c+o*s+n*a-i*l,this.z=n*c+o*l+i*s-r*a,this.w=o*c-i*a-r*s-n*l}},n.Vector2=function(e,t){this.x=e||0,this.y=t||0},n.Vector2.prototype={constructor:n.Vector2,set:function(e,t){return this.x=e,this.y=t,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this},copy:function(e){return this.x=e.x,this.y=e.y,this},clone:function(){return new n.Vector2(this.x,this.y)}},n.Vector3=function(e,t,i){this.x=e||0,this.y=t||0,this.z=i||0},n.Vector3.prototype={constructor:n.Vector3,set:function(e,t,i){return this.x=e,this.y=t,this.z=i,this},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this},add:function(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this},sub:function(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this},multiplyScalar:function(e){return this.x*=e,this.y*=e,this.z*=e,this},divideScalar:function(e){return 0!==e?(this.x/=e,this.y/=e,this.z/=e):(this.x=0,this.y=0,this.z=0),this},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var t=this.x-e.x,i=this.y-e.y,r=this.z-e.z;return t*t+i*i+r*r},applyMatrix4:function(e){var t=this.x,i=this.y,r=this.z,n=e.elements;return this.x=n[0]*t+n[4]*i+n[8]*r+n[12],this.y=n[1]*t+n[5]*i+n[9]*r+n[13],this.z=n[2]*t+n[6]*i+n[10]*r+n[14],this},applyProjection:function(e){var t=this.x,i=this.y,r=this.z,n=e.elements,o=n[3]*t+n[7]*i+n[11]*r+n[15];return this.x=(n[0]*t+n[4]*i+n[8]*r+n[12])/o,this.y=(n[1]*t+n[5]*i+n[9]*r+n[13])/o,this.z=(n[2]*t+n[6]*i+n[10]*r+n[14])/o,this},applyQuaternion:function(e){var t=this.x,i=this.y,r=this.z,n=e.x,o=e.y,a=e.z,s=(e.w,{});s.x=2*(i*a-r*o),s.y=2*(r*n-t*a),s.z=2*(t*o-i*n);var l={};return l.x=s.y*a-s.z*o,l.y=s.z*n-s.x*a,l.z=s.x*o-s.y*n,this.x=t+e.w*s.x+l.x,this.y=i+e.w*s.y+l.y,this.z=r+e.w*s.z+l.z,this},negate:function(){return this.multiplyScalar(-1)},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},normalize:function(){return this.divideScalar(this.length())},cross:function(e){var t=this.x,i=this.y,r=this.z;return this.x=i*e.z-r*e.y,this.y=r*e.x-t*e.z,this.z=t*e.y-i*e.x,this},crossVectors:function(e,t){return this.x=e.y*t.z-e.z*t.y,this.y=e.z*t.x-e.x*t.z,this.z=e.x*t.y-e.y*t.x,this},getPositionFromMatrix:function(e){return this.x=e.elements[12],this.y=e.elements[13],this.z=e.elements[14],this},setEulerFromRotationMatrix:function(e,t){var i=e.elements,r=i[0],o=i[4],a=i[8],s=(i[1],i[5]),l=i[9],c=(i[2],i[6]),u=i[10];return void 0===t||"XYZ"===t?(this.y=Math.asin(n.Math.clamp(a,-1,1)),Math.abs(a)<.99999?(this.x=Math.atan2(-l,u),this.z=Math.atan2(-o,r)):(this.x=Math.atan2(c,s),this.z=0)):console.error("Error with vector's setEulerFromRotationMatrix: Unknown order: "+t),this},clone:function(){return new n.Vector3(this.x,this.y,this.z)}},n.Matrix3=function(e,t,i,r,n,o,a,s,l){this.elements=new Float32Array(9),this.set(void 0!==e?e:1,t||0,i||0,r||0,void 0!==n?n:1,o||0,a||0,s||0,void 0!==l?l:1)},n.Matrix3.prototype={constructor:n.Matrix3,set:function(e,t,i,r,n,o,a,s,l){var c=this.elements;return c[0]=e,c[3]=t,c[6]=i,c[1]=r,c[4]=n,c[7]=o,c[2]=a,c[5]=s,c[8]=l,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},copy:function(e){var t=e.elements;this.set(t[0],t[3],t[6],t[1],t[4],t[7],t[2],t[5],t[8])},multiplyScalar:function(e){var t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this},getInverse:function(e,t){var i=e.elements,r=this.elements;r[0]=i[10]*i[5]-i[6]*i[9],r[1]=-i[10]*i[1]+i[2]*i[9],r[2]=i[6]*i[1]-i[2]*i[5],r[3]=-i[10]*i[4]+i[6]*i[8],r[4]=i[10]*i[0]-i[2]*i[8],r[5]=-i[6]*i[0]+i[2]*i[4],r[6]=i[9]*i[4]-i[5]*i[8],r[7]=-i[9]*i[0]+i[1]*i[8],r[8]=i[5]*i[0]-i[1]*i[4];var n=i[0]*r[0]+i[1]*r[3]+i[2]*r[6];if(0===n){var o="Matrix3.getInverse(): can't invert matrix, determinant is 0";if(t)throw new Error(o);return console.warn(o),this.identity(),this}return this.multiplyScalar(1/n),this},transpose:function(){var e,t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this},clone:function(){var e=this.elements;return new n.Matrix3(e[0],e[3],e[6],e[1],e[4],e[7],e[2],e[5],e[8])}},n.Matrix4=function(e,t,i,r,n,o,a,s,l,c,u,h,d,f,p,v){var m=this.elements=new Float32Array(16);m[0]=void 0!==e?e:1,m[4]=t||0,m[8]=i||0,m[12]=r||0,m[1]=n||0,m[5]=void 0!==o?o:1,m[9]=a||0,m[13]=s||0,m[2]=l||0,m[6]=c||0,m[10]=void 0!==u?u:1,m[14]=h||0,m[3]=d||0,m[7]=f||0,m[11]=p||0,m[15]=void 0!==v?v:1},n.Matrix4.prototype={constructor:n.Matrix4,set:function(e,t,i,r,n,o,a,s,l,c,u,h,d,f,p,v){var m=this.elements;return m[0]=e,m[4]=t,m[8]=i,m[12]=r,m[1]=n,m[5]=o,m[9]=a,m[13]=s,m[2]=l,m[6]=c,m[10]=u,m[14]=h,m[3]=d,m[7]=f,m[11]=p,m[15]=v,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},copy:function(e){var t=e.elements;return this.set(t[0],t[4],t[8],t[12],t[1],t[5],t[9],t[13],t[2],t[6],t[10],t[14],t[3],t[7],t[11],t[15]),this},setRotationFromEuler:function(e,t){var i=this.elements,r=e.x,n=e.y,o=e.z,a=Math.cos(r),s=Math.sin(r),l=Math.cos(n),c=Math.sin(n),u=Math.cos(o),h=Math.sin(o);if(void 0===t||"XYZ"===t){var d=a*u,f=a*h,p=s*u,v=s*h;i[0]=l*u,i[4]=-l*h,i[8]=c,i[1]=f+p*c,i[5]=d-v*c,i[9]=-s*l,i[2]=v-d*c,i[6]=p+f*c,i[10]=a*l}else console.error("Error with matrix4 setRotationFromEuler. Order: "+t);return this},setRotationFromQuaternion:function(e){var t=this.elements,i=e.x,r=e.y,n=e.z,o=e.w,a=i+i,s=r+r,l=n+n,c=i*a,u=i*s,h=i*l,d=r*s,f=r*l,p=n*l,v=o*a,m=o*s,g=o*l;return t[0]=1-(d+p),t[4]=u-g,t[8]=h+m,t[1]=u+g,t[5]=1-(c+p),t[9]=f-v,t[2]=h-m,t[6]=f+v,t[10]=1-(c+d),this},lookAt:function(){var e=new n.Vector3,t=new n.Vector3,i=new n.Vector3;return function(r,n,o){var a=this.elements;return i.subVectors(r,n).normalize(),0===i.length()&&(i.z=1),e.crossVectors(o,i).normalize(),0===e.length()&&(i.x+=1e-4,e.crossVectors(o,i).normalize()),t.crossVectors(i,e),a[0]=e.x,a[4]=t.x,a[8]=i.x,a[1]=e.y,a[5]=t.y,a[9]=i.y,a[2]=e.z,a[6]=t.z,a[10]=i.z,this}}(),multiplyMatrices:function(e,t){var i=e.elements,r=t.elements,n=this.elements,o=i[0],a=i[4],s=i[8],l=i[12],c=i[1],u=i[5],h=i[9],d=i[13],f=i[2],p=i[6],v=i[10],m=i[14],g=i[3],y=i[7],b=i[11],x=i[15],w=r[0],C=r[4],S=r[8],A=r[12],T=r[1],z=r[5],M=r[9],_=r[13],E=r[2],k=r[6],D=r[10],L=r[14],I=r[3],N=r[7],O=r[11],P=r[15];return n[0]=o*w+a*T+s*E+l*I,n[4]=o*C+a*z+s*k+l*N,n[8]=o*S+a*M+s*D+l*O,n[12]=o*A+a*_+s*L+l*P,n[1]=c*w+u*T+h*E+d*I,n[5]=c*C+u*z+h*k+d*N,n[9]=c*S+u*M+h*D+d*O,n[13]=c*A+u*_+h*L+d*P,n[2]=f*w+p*T+v*E+m*I,n[6]=f*C+p*z+v*k+m*N,n[10]=f*S+p*M+v*D+m*O,n[14]=f*A+p*_+v*L+m*P,n[3]=g*w+y*T+b*E+x*I,n[7]=g*C+y*z+b*k+x*N,n[11]=g*S+y*M+b*D+x*O,n[15]=g*A+y*_+b*L+x*P,this},multiplyScalar:function(e){var t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this},transpose:function(){var e,t=this.elements;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this},getPosition:function(){var e=new n.Vector3;return function(){console.warn("DEPRECATED: Matrix4's .getPosition() has been removed. Use Vector3.getPositionFromMatrix( matrix ) instead.");var t=this.elements;return e.set(t[12],t[13],t[14])}}(),setPosition:function(e){var t=this.elements;return t[12]=e.x,t[13]=e.y,t[14]=e.z,this},getInverse:function(e,t){var i=this.elements,r=e.elements,n=r[0],o=r[4],a=r[8],s=r[12],l=r[1],c=r[5],u=r[9],h=r[13],d=r[2],f=r[6],p=r[10],v=r[14],m=r[3],g=r[7],y=r[11],b=r[15];i[0]=u*v*g-h*p*g+h*f*y-c*v*y-u*f*b+c*p*b,i[4]=s*p*g-a*v*g-s*f*y+o*v*y+a*f*b-o*p*b,i[8]=a*h*g-s*u*g+s*c*y-o*h*y-a*c*b+o*u*b,i[12]=s*u*f-a*h*f-s*c*p+o*h*p+a*c*v-o*u*v,i[1]=h*p*m-u*v*m-h*d*y+l*v*y+u*d*b-l*p*b,i[5]=a*v*m-s*p*m+s*d*y-n*v*y-a*d*b+n*p*b,i[9]=s*u*m-a*h*m-s*l*y+n*h*y+a*l*b-n*u*b,i[13]=a*h*d-s*u*d+s*l*p-n*h*p-a*l*v+n*u*v,i[2]=c*v*m-h*f*m+h*d*g-l*v*g-c*d*b+l*f*b,i[6]=s*f*m-o*v*m-s*d*g+n*v*g+o*d*b-n*f*b,i[10]=o*h*m-s*c*m+s*l*g-n*h*g-o*l*b+n*c*b,i[14]=s*c*d-o*h*d-s*l*f+n*h*f+o*l*v-n*c*v,i[3]=u*f*m-c*p*m-u*d*g+l*p*g+c*d*y-l*f*y,i[7]=o*p*m-a*f*m+a*d*g-n*p*g-o*d*y+n*f*y,i[11]=a*c*m-o*u*m-a*l*g+n*u*g+o*l*y-n*c*y,i[15]=o*u*d-a*c*d+a*l*f-n*u*f-o*l*p+n*c*p;var x=r[0]*i[0]+r[1]*i[4]+r[2]*i[8]+r[3]*i[12];if(0===x){var w="Matrix4.getInverse(): can't invert matrix, determinant is 0";if(t)throw new Error(w);return console.warn(w),this.identity(),this}return this.multiplyScalar(1/x),this},compose:function(){var e=new n.Matrix4,t=new n.Matrix4;return function(i,r,n){var o=this.elements;return e.identity(),e.setRotationFromQuaternion(r),t.makeScale(n.x,n.y,n.z),this.multiplyMatrices(e,t),o[12]=i.x,o[13]=i.y,o[14]=i.z,this}}(),decompose:function(){var e=new n.Vector3,t=new n.Vector3,i=new n.Vector3,r=new n.Matrix4;return function(o,a,s){var l=this.elements;return e.set(l[0],l[1],l[2]),t.set(l[4],l[5],l[6]),i.set(l[8],l[9],l[10]),o=o instanceof n.Vector3?o:new n.Vector3,a=a instanceof n.Quaternion?a:new n.Quaternion,s=s instanceof n.Vector3?s:new n.Vector3,s.x=e.length(),s.y=t.length(),s.z=i.length(),o.x=l[12],o.y=l[13],o.z=l[14],r.copy(this),r.elements[0]/=s.x,r.elements[1]/=s.x,r.elements[2]/=s.x,r.elements[4]/=s.y,r.elements[5]/=s.y,r.elements[6]/=s.y,r.elements[8]/=s.z,r.elements[9]/=s.z,r.elements[10]/=s.z,a.setFromRotationMatrix(r),[o,a,s]}}(),scale:function(e){var t=this.elements,i=e.x,r=e.y,n=e.z;return t[0]*=i,t[4]*=r,t[8]*=n,t[1]*=i,t[5]*=r,t[9]*=n,t[2]*=i,t[6]*=r,t[10]*=n,t[3]*=i,t[7]*=r,t[11]*=n,this},getMaxScaleOnAxis:function(){var e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],i=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],r=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,Math.max(i,r)))},makeFrustum:function(e,t,i,r,n,o){var a=this.elements,s=2*n/(t-e),l=2*n/(r-i),c=(t+e)/(t-e),u=(r+i)/(r-i),h=-(o+n)/(o-n),d=-2*o*n/(o-n);return a[0]=s,a[4]=0,a[8]=c,a[12]=0,a[1]=0,a[5]=l,a[9]=u,a[13]=0,a[2]=0,a[6]=0,a[10]=h,a[14]=d,a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this},makePerspective:function(e,t,i,r){var o=i*Math.tan(n.Math.degToRad(.5*e)),a=-o,s=a*t,l=o*t;return this.makeFrustum(s,l,a,o,i,r)},isEqual:function(e){var t=e.elements,i=this.elements;return i[0]==t[0]&&i[4]==t[4]&&i[8]==t[8]&&i[12]==t[12]&&i[1]==t[1]&&i[5]==t[5]&&i[9]==t[9]&&i[13]==t[13]&&i[2]==t[2]&&i[6]==t[6]&&i[10]==t[10]&&i[14]==t[14]&&i[3]==t[3]&&i[7]==t[7]&&i[11]==t[11]&&i[15]==t[15]?!0:!1},clone:function(){var e=this.elements;return new n.Matrix4(e[0],e[4],e[8],e[12],e[1],e[5],e[9],e[13],e[2],e[6],e[10],e[14],e[3],e[7],e[11],e[15])},isEqual:function(e){var t=e.elements,i=this.elements;return i[0]==t[0]&&i[4]==t[4]&&i[8]==t[8]&&i[12]==t[12]&&i[1]==t[1]&&i[5]==t[5]&&i[9]==t[9]&&i[13]==t[13]&&i[2]==t[2]&&i[6]==t[6]&&i[10]==t[10]&&i[14]==t[14]&&i[3]==t[3]&&i[7]==t[7]&&i[11]==t[11]&&i[15]==t[15]?!0:!1}},n.Ray=function(e,t){this.origin=void 0!==e?e:new n.Vector3,this.direction=void 0!==t?t:new n.Vector3},n.Ray.prototype={constructor:n.Ray,set:function(e,t){return this.origin.copy(e),this.direction.copy(t),this},copy:function(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this},at:function(e,t){var i=t||new n.Vector3;return i.copy(this.direction).multiplyScalar(e).add(this.origin)},recast:function(){var e=new n.Vector3;return function(t){return this.origin.copy(this.at(t,e)),this}}(),closestPointToPoint:function(e,t){var i=t||new n.Vector3;i.subVectors(e,this.origin);var r=i.dot(this.direction);return i.copy(this.direction).multiplyScalar(r).add(this.origin)},distanceToPoint:function(){var e=new n.Vector3;return function(t){var i=e.subVectors(t,this.origin).dot(this.direction);return e.copy(this.direction).multiplyScalar(i).add(this.origin),e.distanceTo(t)}}(),isIntersectionCylinder:function(){},isIntersectionSphere:function(e){return this.distanceToPoint(e.center)<=e.radius},isIntersectionPlane:function(e){var t=e.normal.dot(this.direction);return 0!==t?!0:0===e.distanceToPoint(this.origin)?!0:!1},distanceToPlane:function(e){var t=e.normal.dot(this.direction);{if(0!==t){var i=-(this.origin.dot(e.normal)+e.constant)/t;return i}if(0===e.distanceToPoint(this.origin))return 0}},intersectPlane:function(e,t){var i=this.distanceToPlane(e);if(void 0!==i)return this.at(i,t)},applyMatrix4:function(e){return this.direction.add(this.origin).applyMatrix4(e),this.origin.applyMatrix4(e),this.direction.sub(this.origin),this},equals:function(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)},clone:function(){return(new n.Ray).copy(this)}},n.Sphere=function(e,t){this.center=void 0!==e?e:new n.Vector3,this.radius=void 0!==t?t:0},n.Sphere.prototype={constructor:n.Sphere,set:function(e,t){return this.center.copy(e),this.radius=t,this},copy:function(e){return this.center.copy(e.center),this.radius=e.radius,this},applyMatrix4:function(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this},translate:function(e){return this.center.add(e),this},equals:function(e){return e.center.equals(this.center)&&e.radius===this.radius},clone:function(){return(new n.Sphere).copy(this)}},n.Cylinder=function(e,t,i){this.c1=void 0!==e?e:new n.Vector3,this.c2=void 0!==t?t:new n.Vector3,this.direction=(new n.Vector3).subVectors(this.c2,this.c1).normalize(),this.radius=void 0!==i?i:0},n.Cylinder.prototype={constructor:n.Cylinder,copy:function(e){return this.c1.copy(e.c1),this.c2.copy(e.c2),this.direction.copy(e.direction),this.radius=e.radius,this},lengthSq:function(){var e=new n.Vector3;return function(){return e.subVectors(this.c2,this.c1).lengthSq()}}(),applyMatrix4:function(e){return this.direction.add(this.c1).applyMatrix4(e),this.c1.applyMatrix4(e),this.c2.applyMatrix4(e),this.direction.sub(this.c1).normalize(),this.radius=this.radius*e.getMaxScaleOnAxis(),this}},n.Triangle=function(e,t,i){this.a=void 0!==e?e:new n.Vector3,this.b=void 0!==t?t:new n.Vector3,this.c=void 0!==i?i:new n.Vector3},n.Triangle.prototype={constructor:n.Triangle,copy:function(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this},applyMatrix4:function(e){return this.a.applyMatrix4(e),this.b.applyMatrix4(e),this.c.applyMatrix4(e),this},getNormal:function(){var e=new n.Vector3;return function(){var t=this.a.clone();return t.sub(this.b),e.subVectors(this.c,this.b),t.cross(e),t.normalize(),t}}()},n.EventDispatcher=function(){var e={};this.addEventListener=function(t,i){void 0===e[t]&&(e[t]=[]),-1===e[t].indexOf(i)&&e[t].push(i)},this.removeEventListener=function(t,i){var r=e[t].indexOf(i);-1!==r&&e[t].splice(r,1)},this.dispatchEvent=function(t){var i=e[t.type];if(void 0!==i){t.target=this;for(var r=0,n=i.length;n>r;r++)i[r].call(this,t)}}},n.Color=function(e){return arguments.length>1?(this.r=arguments[0]||0,this.g=arguments[1]||0,this.b=arguments[2]||0,this):this.set(e)},n.Color.prototype={constructor:n.Color,r:0,g:0,b:0,set:function(e){return e instanceof n.Color?e.clone():void("number"==typeof e&&this.setHex(e))},setHex:function(e){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(255&e)/255,this},getHex:function(){var e=Math.round(255*this.r),t=Math.round(255*this.g),i=Math.round(255*this.b);return e<<16|t<<8|i},clone:function(){return new n.Color(this.r,this.g,this.b)},copy:function(e){return this.r=e.r,this.g=e.g,this.b=e.b,this},scaled:function(){var e={};return e.r=Math.round(255*this.r),e.g=Math.round(255*this.g),e.b=Math.round(255*this.b),e.a=1,e}},n.Object3D=function(){this.id=n.Object3DIDCount++,this.name="",this.parent=void 0,this.children=[],this.position=new n.Vector3,this.rotation=new n.Vector3,this.matrix=new n.Matrix4,this.matrixWorld=new n.Matrix4,this.quaternion=new n.Quaternion,this.eulerOrder="XYZ",this.up=new n.Vector3(0,1,0),this.scale=new n.Vector3(1,1,1),this.matrixAutoUpdate=!0,this.matrixWorldNeedsUpdate=!0,this.rotationAutoUpdate=!0,this.useQuaternion=!1,this.visible=!0},n.Object3D.prototype={constructor:n.Object3D,lookAt:function(e){this.matrix.lookAt(e,this.position,this.up),this.rotationAutoUpdate&&(this.useQuaternion===!0?this.quaternion.copy(this.matrix.decompose()[1]):this.rotation.setEulerFromRotationMatrix(this.matrix,this.eulerOrder))},add:function(e){if(e===this)return void console.error("Can't add $3Dmol.Object3D to itself");e.parent=this,this.children.push(e);for(var t=this;void 0!==t.parent;)t=t.parent;void 0!==t&&t instanceof n.Scene&&t.__addObject(e)},remove:function(e){var t=this.children.indexOf(e);if(-1!==t){e.parent=void 0,this.children.splice(t,1);for(var i=this;void 0!==i.parent;)i=i.parent;void 0!==i&&i instanceof n.Scene&&i.__removeObject(e)}},updateMatrix:function(){this.matrix.setPosition(this.position),this.useQuaternion===!1?this.matrix.setRotationFromEuler(this.rotation,this.eulerOrder):this.matrix.setRotationFromQuaternion(this.quaternion),(1!==this.scale.x||1!==this.scale.y||1!==this.scale.z)&&this.matrix.scale(this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(e){this.matrixAutoUpdate===!0&&this.updateMatrix(),(this.matrixWorldNeedsUpdate===!0||e===!0)&&(void 0===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1;for(var t=0;t<this.children.length;t++)this.children[t].updateMatrixWorld(!0)},clone:function(e){void 0===e&&(e=new n.Object3D),e.name=this.name,e.up.copy(this.up),e.position.copy(this.position),e.rotation.copy(this.rotation),e.eulerOrder=this.eulerOrder,e.scale.copy(this.scale),e.rotationAutoUpdate=this.rotationAutoUpdate,e.matrix.copy(this.matrix),e.matrixWorld.copy(this.matrixWorld),e.quaternion.copy(this.quaternion),e.matrixAutoUpdate=this.matrixAutoUpdate,e.matrixWorldNeedsUpdate=this.matrixWorldNeedsUpdate,e.useQuaternion=this.useQuaternion,e.visible=this.visible;for(var t=0;t<this.children.length;t++){var i=this.children[t];e.add(i.clone())}return e}},n.Object3DIDCount=0,n.Geometry=function(){var e=65535,t=function(e){this.id=e||0,this.vertexArray=null,this.colorArray=null,this.normalArray=null,this.faceArray=null,this.lineArray=null,this.vertices=0,this.faceidx=0,this.lineidx=0};t.prototype.getNumVertices=function(){return this.vertices},t.prototype.getVertices=function(){return this.vertexArray},t.prototype.getCentroid=function(){for(var e,t,i,r,o=new n.Vector3,a=0;a<this.vertices;++a)e=3*a,t=this.vertexArray[e],i=this.vertexArray[e+1],r=this.vertexArray[e+2],o.x+=t,o.y+=i,o.z+=r;return o.divideScalar(this.vertices),o},t.prototype.setNormals=function(){var e=this.faceArray,t=this.vertexArray,i=this.normalArray;if(this.vertices&&this.faceidx)for(var r,o,a,s,l,c,u,h=0;h<e.length/3;++h)r=3*e[3*h],o=3*e[3*h+1],a=3*e[3*h+2],s=new n.Vector3(t[r],t[r+1],t[r+2]),l=new n.Vector3(t[o],t[o+1],t[o+2]),c=new n.Vector3(t[a],t[a+1],t[a+2]),s.subVectors(s,l),c.subVectors(c,l),c.cross(s),u=c,u.normalize(),i[r]+=u.x,i[o]+=u.x,i[a]+=u.x,i[r+1]+=u.y,i[o+1]+=u.y,i[a+1]+=u.y,i[r+2]+=u.z,i[o+2]+=u.z,i[a+2]+=u.z},t.prototype.setLineIndices=function(){if(this.faceidx){var e=this.faceArray,t=this.lineArray=new Uint16Array(2*this.faceidx);this.lineidx=2*this.faceidx;for(var i,r=0;r<this.faceidx/3;++r){i=3*r,lineoffset=2*i;var n=e[i],o=e[i+1],a=e[i+2];t[lineoffset]=n,t[lineoffset+1]=o,t[lineoffset+2]=n,t[lineoffset+3]=a,t[lineoffset+4]=o,t[lineoffset+5]=a}}},t.prototype.truncateArrayBuffers=function(e,t){e=e===!0?!0:!1;var i=this.vertexArray,r=this.colorArray,n=this.normalArray,o=this.faceArray,a=this.lineArray;this.vertexArray=i.subarray(0,3*this.vertices),this.colorArray=r.subarray(0,3*this.vertices),e?(this.normalArray=n.subarray(0,3*this.vertices),this.faceArray=o.subarray(0,this.faceidx),this.lineidx>0?this.lineArray=a.subarray(0,this.lineidx):this.lineArray=new Uint16Array):(this.normalArray=new Float32Array,this.faceArray=new Uint16Array,this.lineArray=new Uint16Array),t&&(this.normalArray&&(this.normalArray=new Float32Array(this.normalArray)),this.faceArray&&(this.faceArray=new Uint16Array(this.faceArray)),this.lineArray&&(this.lineArray=new Uint16Array(this.lineArray)),this.vertexArray&&(this.vertexArray=new Float32Array(this.vertexArray)),this.colorArray&&(this.colorArray=new Float32Array(this.colorArray))),this.__inittedArrays=!0};var i=function(i){var r=new t(i.geometryGroups.length);return i.geometryGroups.push(r),i.groups=i.geometryGroups.length,r.vertexArray=new Float32Array(3*e),r.colorArray=new Float32Array(3*e),i.mesh&&(r.normalArray=new Float32Array(3*e),r.faceArray=new Uint16Array(6*e),r.lineArray=new Uint16Array(6*e)),r},r=function(e){n.EventDispatcher.call(this),this.id=n.GeometryIDCount++,this.name="",this.hasTangents=!1,this.dynamic=!0,this.mesh=e===!0?!0:!1,this.verticesNeedUpdate=!1,this.elementsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.buffersNeedUpdate=!1,this.geometryGroups=[],this.groups=0};return r.prototype={constructor:r,updateGeoGroup:function(t){t=t||0;var r=this.groups>0?this.geometryGroups[this.groups-1]:null;return(!r||r.vertices+t>e)&&(r=i(this)),r},addGeoGroup:function(){return i(this)},setUpNormals:function(e){e=e||!1;for(var t=0;t<this.groups;t++){var i=this.geometryGroups[t];i.setNormals(e)}},setUpWireframe:function(){for(var e=0;e<this.groups;e++){var t=this.geometryGroups[e];t.setLineIndices()}},initTypedArrays:function(){for(var e=0;e<this.groups;e++){var t=this.geometryGroups[e];t.__inittedArrays!==!0&&t.truncateArrayBuffers(this.mesh,!1)}},dispose:function(){this.dispatchEvent({type:"dispose"})}},r}(),Object.defineProperty(n.Geometry.prototype,"vertices",{get:function(){for(var e=0,t=0;t<this.groups;t++)e+=this.geometryGroups[t].vertices;return e}}),n.GeometryIDCount=0,n.Raycaster=function(){var e=function(e,t,i,r){this.ray=new n.Ray(e,t),this.ray.direction.lengthSq()>0&&this.ray.direction.normalize(),this.near=r||0,this.far=i||1/0},t=new n.Sphere,i=new n.Cylinder,r=new n.Triangle,o=new n.Vector3,a=new n.Vector3,s=new n.Vector3,l=new n.Vector3,c=(new n.Ray,new n.Vector3,new n.Vector3),u=(new n.Matrix4,function(e,t){return e.distance-t.distance}),h=function(e){return Math.min(Math.max(e,-1),1)},d=function(e,u,d,f){if(c.getPositionFromMatrix(e.matrixWorld),u.clickable!==!0||void 0===u.intersectionShape)return f;var p=u.intersectionShape,v=d.linePrecision;v*=e.matrixWorld.getMaxScaleOnAxis();var m=v*v;if(void 0!==u.boundingSphere&&u.boundingSphere instanceof n.Sphere&&(t.copy(u.boundingSphere),t.applyMatrix4(e.matrixWorld),!d.ray.isIntersectionSphere(t)))return f;var g,y,b,x,w,C,S,A,T,z,M,_,E,k;for(g=0,y=p.triangle.length;y>g;g++)if(p.triangle[g]instanceof n.Triangle){if(r.copy(p.triangle[g]),r.applyMatrix4(e.matrixWorld),b=r.getNormal(),x=d.ray.direction.dot(b),x>=0)continue;if(o.subVectors(r.a,d.ray.origin),S=b.dot(o)/x,0>S)continue;a.copy(d.ray.direction).multiplyScalar(S).add(d.ray.origin),a.sub(r.a),s.copy(r.b).sub(r.a),l.copy(r.c).sub(r.a);var D=s.dot(l),L=s.lengthSq(),I=l.lengthSq();if(_=(L*a.dot(l)-D*a.dot(s))/(L*I-D*D),0>_||_>1)continue;if(M=(a.dot(s)-_*D)/L,0>M||M>1||M+_>1)continue;f.push({clickable:u,distance:S})}for(g=0,y=p.cylinder.length;y>g;g++)if(p.cylinder[g]instanceof n.Cylinder){if(i.copy(p.cylinder[g]),i.applyMatrix4(e.matrixWorld),o.subVectors(i.c1,d.ray.origin),w=o.dot(i.direction),C=o.dot(d.ray.direction),x=h(d.ray.direction.dot(i.direction)),T=1-x*x,0===T)continue;E=(x*C-w)/T,k=(C-x*w)/T,a.copy(i.direction).multiplyScalar(E).add(i.c1),s.copy(d.ray.direction).multiplyScalar(k).add(d.ray.origin),A=l.subVectors(a,s).lengthSq();var N=i.radius*i.radius;if(N>=A){if(z=(x*w-C)*(x*w-C)-T*(o.lengthSq()-w*w-N),_=S=0>=z?Math.sqrt(A):(C-x*w-Math.sqrt(z))/T,M=x*_-w,0>M||M*M>i.lengthSq()||0>_)continue;f.push({clickable:u,distance:S})}}for(g=0,y=p.line.length;y>g;g+=2){a.copy(p.line[g]),a.applyMatrix4(e.matrixWorld),s.copy(p.line[g+1]),s.applyMatrix4(e.matrixWorld),l.subVectors(s,a);var O=l.lengthSq();l.normalize(),o.subVectors(a,d.ray.origin),lineProj=o.dot(l),C=o.dot(d.ray.direction),x=h(d.ray.direction.dot(l)),T=1-x*x,0!==T&&(E=(x*C-lineProj)/T,k=(C-x*lineProj)/T,a.add(l.multiplyScalar(E)),s.copy(d.ray.direction).multiplyScalar(k).add(d.ray.origin),A=l.subVectors(s,a).lengthSq(),m>A&&O>E*E&&f.push({clickable:u,distance:k}))}for(g=0,y=p.sphere.length;y>g;g++)if(p.sphere[g]instanceof n.Sphere&&(t.copy(p.sphere[g]),t.applyMatrix4(e.matrixWorld),d.ray.isIntersectionSphere(t))){a.subVectors(t.center,d.ray.origin);var P=a.dot(d.ray.direction);return z=P*P-(a.lengthSq()-t.radius*t.radius),0>P?f:(S=0>=z?P:P-Math.sqrt(z),f.push({clickable:u,distance:S}),f)}};return e.prototype.precision=1e-4,e.prototype.linePrecision=.2,e.prototype.set=function(e,t){this.ray.set(e,t)},e.prototype.intersectObjects=function(e,t){for(var i=[],r=0,n=t.length;n>r;r++)d(e,t[r],this,i);return i.sort(u),i},e}(),n.Projector=function(){var e=(new n.Matrix4,new n.Matrix4);this.projectVector=function(t,i){return i.matrixWorldInverse.getInverse(i.matrixWorld),e.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse),t.applyProjection(e)},this.unprojectVector=function(t,i){return i.projectionMatrixInverse.getInverse(i.projectionMatrix),e.multiplyMatrices(i.matrixWorld,i.projectionMatrixInverse),t.applyProjection(e)}},n.Camera=function(e,t,i,r){n.Object3D.call(this),this.fov=void 0!==e?e:50,this.aspect=void 0!==t?t:1,this.near=void 0!==i?i:.1,this.far=void 0!==r?r:2e3,this.projectionMatrix=new n.Matrix4,this.projectionMatrixInverse=new n.Matrix4,this.matrixWorldInverse=new n.Matrix4,this.updateProjectionMatrix()},n.Camera.prototype=Object.create(n.Object3D.prototype),n.Camera.prototype.lookAt=function(e){this.matrix.lookAt(this.position,e,this.up),this.rotationAutoUpdate&&(this.useQuaternion===!1?this.rotation.setEulerFromRotationMatrix(this.matrix,this.eulerOrder):this.quaternion.copy(this.matrix.decompose()[1]))},n.Camera.prototype.updateProjectionMatrix=function(){this.projectionMatrix.makePerspective(this.fov,this.aspect,this.near,this.far)},n.SpritePlugin=function(){function e(e,t){var r=i.createProgram(),n=i.createShader(i.FRAGMENT_SHADER),o=i.createShader(i.VERTEX_SHADER),a="precision "+t+" float;\n";return i.shaderSource(n,a+e.fragmentShader),i.shaderSource(o,a+e.vertexShader),i.compileShader(n),i.compileShader(o),i.getShaderParameter(n,i.COMPILE_STATUS)&&i.getShaderParameter(o,i.COMPILE_STATUS)?(i.attachShader(r,n),i.attachShader(r,o),i.linkProgram(r),i.getProgramParameter(r,i.LINK_STATUS)||console.error("Could not initialize shader"),r):(console.error(i.getShaderInfoLog(n)),console.error("could not initialize shader"),null)}function t(e,t){return e.z!==t.z?t.z-e.z:t.id-e.id}var i,r,o,a={};this.init=function(t){i=t.context,r=t,o=t.getPrecision(),a.vertices=new Float32Array(16),a.faces=new Uint16Array(6);var s=0;a.vertices[s++]=-1,a.vertices[s++]=-1,a.vertices[s++]=0,a.vertices[s++]=0,a.vertices[s++]=1,a.vertices[s++]=-1,a.vertices[s++]=1,a.vertices[s++]=0,a.vertices[s++]=1,a.vertices[s++]=1,a.vertices[s++]=1,a.vertices[s++]=1,a.vertices[s++]=-1,a.vertices[s++]=1,a.vertices[s++]=0,a.vertices[s++]=1,s=0,a.faces[s++]=0,a.faces[s++]=1,a.faces[s++]=2,a.faces[s++]=0,a.faces[s++]=2,a.faces[s++]=3,a.vertexBuffer=i.createBuffer(),a.elementBuffer=i.createBuffer(),i.bindBuffer(i.ARRAY_BUFFER,a.vertexBuffer),i.bufferData(i.ARRAY_BUFFER,a.vertices,i.STATIC_DRAW),i.bindBuffer(i.ELEMENT_ARRAY_BUFFER,a.elementBuffer),i.bufferData(i.ELEMENT_ARRAY_BUFFER,a.faces,i.STATIC_DRAW),a.program=e(n.ShaderLib.sprite,o),a.attributes={},a.uniforms={},a.attributes.position=i.getAttribLocation(a.program,"position"),a.attributes.uv=i.getAttribLocation(a.program,"uv"),a.uniforms.uvOffset=i.getUniformLocation(a.program,"uvOffset"),a.uniforms.uvScale=i.getUniformLocation(a.program,"uvScale"),a.uniforms.rotation=i.getUniformLocation(a.program,"rotation"),a.uniforms.scale=i.getUniformLocation(a.program,"scale"),a.uniforms.alignment=i.getUniformLocation(a.program,"alignment"),a.uniforms.color=i.getUniformLocation(a.program,"color"),a.uniforms.map=i.getUniformLocation(a.program,"map"),a.uniforms.opacity=i.getUniformLocation(a.program,"opacity"),a.uniforms.useScreenCoordinates=i.getUniformLocation(a.program,"useScreenCoordinates"),a.uniforms.screenPosition=i.getUniformLocation(a.program,"screenPosition"),a.uniforms.modelViewMatrix=i.getUniformLocation(a.program,"modelViewMatrix"),a.uniforms.projectionMatrix=i.getUniformLocation(a.program,"projectionMatrix"),a.uniforms.fogType=i.getUniformLocation(a.program,"fogType"),a.uniforms.fogDensity=i.getUniformLocation(a.program,"fogDensity"),a.uniforms.fogNear=i.getUniformLocation(a.program,"fogNear"),a.uniforms.fogFar=i.getUniformLocation(a.program,"fogFar"),a.uniforms.fogColor=i.getUniformLocation(a.program,"fogColor"),a.uniforms.alphaTest=i.getUniformLocation(a.program,"alphaTest")},this.render=function(e,n,o,s){var l=e.__webglSprites,c=l.length;if(c){var u=a.attributes,h=a.uniforms,d=.5*o,f=.5*s;i.useProgram(a.program),i.enableVertexAttribArray(u.position),i.enableVertexAttribArray(u.uv),i.disable(i.CULL_FACE),i.enable(i.BLEND),i.bindBuffer(i.ARRAY_BUFFER,a.vertexBuffer),i.vertexAttribPointer(u.position,2,i.FLOAT,!1,16,0),i.vertexAttribPointer(u.uv,2,i.FLOAT,!1,16,8),i.bindBuffer(i.ELEMENT_ARRAY_BUFFER,a.elementBuffer),i.uniformMatrix4fv(h.projectionMatrix,!1,n.projectionMatrix.elements),i.activeTexture(i.TEXTURE0),i.uniform1i(h.map,0);var p=0,v=0,m=e.fog;m?(i.uniform3f(h.fogColor,m.color.r,m.color.g,m.color.b),i.uniform1f(h.fogNear,m.near),i.uniform1f(h.fogFar,m.far),i.uniform1i(h.fogType,1),p=1,v=1):(i.uniform1i(h.fogType,0),p=0,v=0);var g,y,b,x,w,C=[];for(g=0;c>g;g++)y=l[g],b=y.material,y.visible&&0!==b.opacity&&(b.useScreenCoordinates?y.z=-y.position.z:(y._modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,y.matrixWorld),y.z=-y._modelViewMatrix.elements[14]));for(l.sort(t),g=0;c>g;g++)if(y=l[g],b=y.material,y.visible&&0!==b.opacity&&b.map&&b.map.image&&b.map.image.width){i.uniform1f(h.alphaTest,b.alphaTest);var S=b.map.image.width,A=b.map.image.height;C[0]=S*r.devicePixelRatio/o,C[1]=A*r.devicePixelRatio/s,b.useScreenCoordinates===!0?(i.uniform1i(h.useScreenCoordinates,1),i.uniform3f(h.screenPosition,(y.position.x*r.devicePixelRatio-d)/d,(f-y.position.y*r.devicePixelRatio)/f,Math.max(0,Math.min(1,y.position.z)))):(i.uniform1i(h.useScreenCoordinates,0),i.uniformMatrix4fv(h.modelViewMatrix,!1,y._modelViewMatrix.elements)),w=e.fog&&b.fog?v:0,p!==w&&(i.uniform1i(h.fogType,w),p=w),x=1/(b.scaleByViewport?s:1),C[0]*=x*y.scale.x,C[1]*=x*y.scale.y,i.uniform2f(h.uvScale,b.uvScale.x,b.uvScale.y),i.uniform2f(h.uvOffset,b.uvOffset.x,b.uvOffset.y),i.uniform2f(h.alignment,b.alignment.x,b.alignment.y),
i.uniform1f(h.opacity,b.opacity),i.uniform3f(h.color,b.color.r,b.color.g,b.color.b),i.uniform1f(h.rotation,y.rotation),i.uniform2fv(h.scale,C),r.setDepthTest(b.depthTest),r.setDepthWrite(b.depthWrite),r.setTexture(b.map,0),i.drawElements(i.TRIANGLES,6,i.UNSIGNED_SHORT,0)}i.enable(i.CULL_FACE)}}},n.Light=function(e,t){n.Object3D.call(this),this.color=new n.Color(e),this.position=new n.Vector3(0,1,0),this.target=new n.Object3D,this.intensity=void 0!==t?t:1,this.castShadow=!1,this.onlyShadow=!1},n.Light.prototype=Object.create(n.Object3D.prototype),n.Material=function(){n.EventDispatcher.call(this),this.id=n.MaterialIdCount++,this.name="",this.side=n.FrontSide,this.opacity=1,this.transparent=!1,this.depthTest=!0,this.depthWrite=!0,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.alphaTest=0,this.visible=!0,this.needsUpdate=!0},n.Material.prototype.setValues=function(e){if(void 0!==e)for(var t in e){var i=e[t];if(void 0!==i){if(t in this){var r=this[t];r instanceof n.Color&&i instanceof n.Color?r.copy(i):r instanceof n.Color?r.set(i):r instanceof n.Vector3&&i instanceof n.Vector3?r.copy(i):this[t]=i}}else console.warn("$3Dmol.Material: '"+t+"' parameter is undefined.")}},n.Material.prototype.clone=function(e){return void 0===e&&(e=new n.Material),e.name=this.name,e.side=this.side,e.opacity=this.opacity,e.transparent=this.transparent,e.depthTest=this.depthTest,e.depthWrite=this.depthWrite,e.polygonOffset=this.polygonOffset,e.polygonOffsetFactor=this.polygonOffsetFactor,e.polygonOffsetUnits=this.polygonOffsetUnits,e.alphaTest=this.alphaTest,e.overdraw=this.overdraw,e.visible=this.visible,e},n.Material.prototype.dispose=function(){this.dispatchEvent({type:"dispose"})},n.MaterialIdCount=0,n.LineBasicMaterial=function(e){n.Material.call(this),this.color=new n.Color(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.vertexColors=!1,this.fog=!0,this.shaderID="basic",this.setValues(e)},n.LineBasicMaterial.prototype=Object.create(n.Material.prototype),n.LineBasicMaterial.prototype.clone=function(){var e=new n.LineBasicMaterial;return n.Material.prototype.clone.call(this,e),e.color.copy(),e},n.MeshLambertMaterial=function(e){n.Material.call(this),this.color=new n.Color(16777215),this.ambient=new n.Color(1048575),this.emissive=new n.Color(0),this.wrapAround=!1,this.wrapRGB=new n.Vector3(1,1,1),this.map=null,this.lightMap=null,this.specularMap=null,this.envMap=null,this.reflectivity=1,this.refractionRatio=.98,this.fog=!0,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.shading=n.SmoothShading,this.shaderID="lambert",this.vertexColors=n.NoColors,this.skinning=!1,this.setValues(e)},n.MeshLambertMaterial.prototype=Object.create(n.Material.prototype),n.MeshLambertMaterial.prototype.clone=function(e){return"undefined"==typeof e&&(e=new n.MeshLambertMaterial),n.Material.prototype.clone.call(this,e),e.color.copy(this.color),e.ambient.copy(this.ambient),e.emissive.copy(this.emissive),e.wrapAround=this.wrapAround,e.wrapRGB.copy(this.wrapRGB),e.map=this.map,e.lightMap=this.lightMap,e.specularMap=this.specularMap,e.envMap=this.envMap,e.combine=this.combine,e.reflectivity=this.reflectivity,e.refractionRatio=this.refractionRatio,e.fog=this.fog,e.shading=this.shading,e.shaderID=this.shaderID,e.vertexColors=this.vertexColors,e.skinning=this.skinning,e.morphTargets=this.morphTargets,e.morphNormals=this.morphNormals,e},n.MeshDoubleLambertMaterial=function(e){n.MeshLambertMaterial.call(this,e),this.shaderID="lambertdouble",this.side=n.DoubleSide},n.MeshDoubleLambertMaterial.prototype=Object.create(n.MeshLambertMaterial.prototype),n.MeshDoubleLambertMaterial.prototype.clone=function(){var e=new n.MeshDoubleLambertMaterial;return n.MeshLambertMaterial.prototype.clone.call(this,e),e},n.ImposterMaterial=function(e){n.Material.call(this),this.color=new n.Color(16777215),this.ambient=new n.Color(1048575),this.emissive=new n.Color(0),this.wrapAround=!1,this.wrapRGB=new n.Vector3(1,1,1),this.map=null,this.lightMap=null,this.specularMap=null,this.envMap=null,this.reflectivity=1,this.refractionRatio=.98,this.fog=!0,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.shading=n.SmoothShading,this.shaderID="sphereimposter",this.vertexColors=n.NoColors,this.skinning=!1,this.setValues(e)},n.ImposterMaterial.prototype=Object.create(n.Material.prototype),n.ImposterMaterial.prototype.clone=function(){var e=new n.ImposterMaterial;return n.Material.prototype.clone.call(this,e),e.color.copy(this.color),e.ambient.copy(this.ambient),e.emissive.copy(this.emissive),e.wrapAround=this.wrapAround,e.wrapRGB.copy(this.wrapRGB),e.map=this.map,e.lightMap=this.lightMap,e.specularMap=this.specularMap,e.envMap=this.envMap,e.combine=this.combine,e.reflectivity=this.reflectivity,e.refractionRatio=this.refractionRatio,e.fog=this.fog,e.shading=this.shading,e.shaderID=this.shaderID,e.vertexColors=this.vertexColors,e.skinning=this.skinning,e.morphTargets=this.morphTargets,e.morphNormals=this.morphNormals,e},n.SpriteMaterial=function(e){n.Material.call(this),this.color=new n.Color(16777215),this.map=new n.Texture,this.useScreenCoordinates=!0,this.depthTest=!this.useScreenCoordinates,this.sizeAttenuation=!this.useScreenCoordinates,this.scaleByViewPort=!this.sizeAttenuation,this.alignment=n.SpriteAlignment.center.clone(),this.fog=!1,this.uvOffset=new n.Vector2(0,0),this.uvScale=new n.Vector2(1,1),this.setValues(e),e=e||{},void 0===e.depthTest&&(this.depthTest=!this.useScreenCoordinates),void 0===e.sizeAttenuation&&(this.sizeAttenuation=!this.useScreenCoordinates),void 0===e.scaleByViewPort&&(this.scaleByViewPort=!this.sizeAttenuation)},n.SpriteMaterial.prototype=Object.create(n.Material.prototype),n.SpriteMaterial.prototype.clone=function(){var e=new n.SpriteMaterial;return n.Material.prototype.clone.call(this,e),e.color.copy(this.color),e.map=this.map,e.useScreenCoordinates=useScreenCoordinates,e.sizeAttenuation=this.sizeAttenuation,e.scaleByViewport=this.scaleByViewPort,e.alignment.copy(this.alignment),e.uvOffset.copy(this.uvOffset),e},n.SpriteAlignment={},n.SpriteAlignment.topLeft=new n.Vector2(1,-1),n.SpriteAlignment.topCenter=new n.Vector2(0,-1),n.SpriteAlignment.topRight=new n.Vector2(-1,-1),n.SpriteAlignment.centerLeft=new n.Vector2(1,0),n.SpriteAlignment.center=new n.Vector2(0,0),n.SpriteAlignment.centerRight=new n.Vector2(-1,0),n.SpriteAlignment.bottomLeft=new n.Vector2(1,1),n.SpriteAlignment.bottomCenter=new n.Vector2(0,1),n.SpriteAlignment.bottomRight=new n.Vector2(-1,1),n.Texture=function(e){n.EventDispatcher.call(this),this.id=n.TextureIdCount++,this.name="",this.image=e,this.mipmaps=[],this.mapping=new n.UVMapping,this.wrapS=n.ClampToEdgeWrapping,this.wrapT=n.ClampToEdgeWrapping,this.magFilter=n.LinearFilter,this.minFilter=n.LinearMipMapLinearFilter,this.anisotropy=1,this.format=n.RGBAFormat,this.type=n.UnsignedByteType,this.offset=new n.Vector2(0,0),this.repeat=new n.Vector2(1,1),this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.needsUpdate=!1,this.onUpdate=null},n.Texture.prototype={constructor:n.Texture,clone:function(e){return void 0===e&&(e=new n.Texture),e.image=this.image,e.mipmaps=this.mipmaps.slice(0),e.mapping=this.mapping,e.wrapS=this.wrapS,e.wrapT=this.wrapT,e.magFilter=this.magFilter,e.minFilter=this.minFilter,e.anisotropy=this.anisotropy,e.format=this.format,e.type=this.type,e.offset.copy(this.offset),e.repeat.copy(this.repeat),e.generateMipmaps=this.generateMipmaps,e.premultiplyAlpha=this.premultiplyAlpha,e.flipY=this.flipY,e.unpackAlignment=this.unpackAlignment,e},dispose:function(){this.dispatchEvent({type:"dispose"})}},n.TextureIdCount=0,n.FrontSide=0,n.BackSide=1,n.DoubleSide=2,n.NoShading=0,n.FlatShading=1,n.SmoothShading=2,n.NoColors=0,n.FaceColors=1,n.VertexColors=2,n.MultiplyOperation=0,n.MixOperation=1,n.AddOperation=2,n.UVMapping=function(){},n.ClampToEdgeWrapping=1001,n.LinearFilter=1006,n.LinearMipMapLinearFilter=1008,n.UnsignedByteType=1009,n.RGBAFormat=1021,n.Line=function(e,t,i){n.Object3D.call(this),this.geometry=e,this.material=void 0!==t?t:new n.LineBasicMaterial({color:16777215*Math.random()}),this.type=void 0!==i?i:n.LineStrip},n.LineStrip=0,n.LinePieces=1,n.Line.prototype=Object.create(n.Object3D.prototype),n.Line.prototype.clone=function(e){return void 0===e&&(e=new n.Line(this.geometry,this.material,this.type)),n.Object3D.prototype.clone.call(this,e),e},n.Mesh=function(e,t){n.Object3D.call(this),this.geometry=e,this.material=void 0!==t?t:new n.MeshBasicMaterial({color:16777215*Math.random(),wireframe:!0})},n.Mesh.prototype=Object.create(n.Object3D.prototype),n.Mesh.prototype.clone=function(e){return void 0===e&&(e=new n.Mesh(this.geometry,this.material)),n.Object3D.prototype.clone.call(this,e),e},n.Sprite=function(e){n.Object3D.call(this),this.material=void 0!==e?e:new n.SpriteMaterial,this.rotation3d=this.rotation,this.rotation=0},n.Sprite.prototype=Object.create(n.Object3D.prototype),n.Sprite.prototype.updateMatrix=function(){this.matrix.setPosition(this.position),this.rotation3d.set(0,0,this.rotation),this.matrix.setRotationFromEuler(this.rotation3d),(1!==this.scale.x||1!==this.scale.y)&&this.matrix.scale(this.scale),this.matrixWorldNeedsUpdate=!0},n.Sprite.prototype.clone=function(e){return void 0===e&&(e=new n.Sprite(this.material)),n.Object3D.prototype.clone.call(this,e),e},n.Renderer=function(e){function t(e){se[e]||(j.enableVertexAttribArray(e),se[e]=!0)}function i(){for(var e in se)se[e]&&(j.disableVertexAttribArray(e),se[e]=!1)}function r(e,t,i){J!==e&&(e?j.enable(j.POLYGON_OFFSET_FILL):j.disable(j.POLYGON_OFFSET_FILL))}function o(e){e!==ee&&(j.lineWidth(e),ee=e)}function a(e,t){var i;return"fragment"===e?i=j.createShader(j.FRAGMENT_SHADER):"vertex"===e&&(i=j.createShader(j.VERTEX_SHADER)),j.shaderSource(i,t),j.compileShader(i),j.getShaderParameter(i,j.COMPILE_STATUS)?i:(console.error(j.getShaderInfoLog(i)),console.error("could not initialize shader"),null)}function s(e,t,i,r){var n,o,s,l,c=[];c.push(e),c.push(t);for(n in r)c.push(n),c.push(r[n]);for(l=c.join(),n=0,o=q.length;o>n;n++){var u=q[n];if(u.code===l)return u.usedTimes++,u.program}s=j.createProgram();var h=D,d="precision "+h+" float;",f=[d].join("\n"),p=[r.wireframe?"#define WIREFRAME 1":"",d].join("\n"),v=a("fragment",p+e),m=a("vertex",f+t);j.attachShader(s,m),j.attachShader(s,v),j.linkProgram(s),j.getProgramParameter(s,j.LINK_STATUS)||console.error("Could not initialize shader"),s.uniforms={},s.attributes={};var g,y,b;g=["viewMatrix","modelViewMatrix","projectionMatrix","normalMatrix","modelMatrix","cameraPosition"];for(y in i)g.push(y);for(b=0;b<g.length;b++){var x=g[b];s.uniforms[x]=j.getUniformLocation(s,x)}for(g=["position","normal","color","lineDistance"],b=0;b<g.length;b++){var w=g[b];s.attributes[w]=j.getAttribLocation(s,w)}return s.id=$++,q.push({program:s,code:l,usedTimes:1}),B.info.memory.programs=q.length,s}function l(e,t,i,r,n){r.needsUpdate&&(r.program&&ge(r),B.initMaterial(r,t,i,n),r.needsUpdate=!1);var o=!1,a=r.program,s=a.uniforms,l=r.uniforms;return a!=U&&(j.useProgram(a),U=a,o=!0),r.id!=V&&(V=r.id,o=!0),e!=H&&(H=e,o=!0),j.uniformMatrix4fv(s.projectionMatrix,!1,e.projectionMatrix.elements),j.uniformMatrix4fv(s.modelViewMatrix,!1,n._modelViewMatrix.elements),j.uniformMatrix3fv(s.normalMatrix,!1,n._normalMatrix.elements),o&&(l.fogColor.value=i.color,l.fogNear.value=i.near,l.fogFar.value=i.far,0===r.shaderID.lastIndexOf("lambert",0)?(j.uniformMatrix4fv(s.viewMatrix,!1,e.matrixWorldInverse.elements),he&&(M(a,t),he=!1),l.ambientLightColor.value=de.ambient,l.directionalLightColor.value=de.directional.colors,l.directionalLightDirection.value=de.directional.positions,l.ambient.value=r.ambient,l.emissive.value=r.emissive):"sphereimposter"===r.shaderID&&(j.uniformMatrix4fv(s.viewMatrix,!1,e.matrixWorldInverse.elements),j.uniformMatrix3fv(s.normalMatrix,!1,n._normalMatrix.elements)),l.opacity.value=r.opacity,l.diffuse.value=r.color,c(s,l)),a}function c(e,t){var i,r,n,o;for(i in t)e[i]&&(r=t[i].type,n=t[i].value,o=e[i],"f"===r?j.uniform1f(o,n):"fv"===r?j.uniform3fv(o,n):"c"===r&&j.uniform3f(o,n.r,n.g,n.b))}function u(e,t,i,n,o,a,s,l){var c,u,h,d,f,p,v;t?(f=e.length-1,p=-1,v=-1):(f=0,p=e.length,v=1);for(var m=f;m!==p;m+=v)if(c=e[m],c.render){if(u=c.object,h=c.buffer,d=c[i],!d)continue;s&&B.setBlending(!0),B.setDepthTest(d.depthTest),B.setDepthWrite(d.depthWrite),r(d.polygonOffset,d.polygonOffsetFactor,d.polygonOffsetUnits),B.setMaterialFaces(d),B.renderBuffer(n,o,a,d,h,u)}}function h(e,t,i){if(G=-1,U=null,H=null,X=-1,K=-1,Z=-1,Y=-1,V=-1,Q=-1,e.length)for(var r=0,n=e.length;n>r;r++)he=!0,e[r].render(t,i,oe,ae),G=-1,U=null,H=null,X=-1,K=-1,Z=-1,Y=-1,V=-1,Q=-1}function d(e,t){var i,r,o,a,s;if(!e.__webglInit&&(e.__webglInit=!0,e._modelViewMatrix=new n.Matrix4,e._normalMatrix=new n.Matrix3,void 0!==e.geometry&&void 0===e.geometry.__webglInit&&(e.geometry.__webglInit=!0,e.geometry.addEventListener("dispose",fe)),e instanceof n.Mesh||e instanceof n.Line))for(o=e.geometry,a=e.material,i=0,r=o.geometryGroups.length;r>i;i++)s=o.geometryGroups[i],s.id=W++,s.__webglVertexBuffer||(e instanceof n.Mesh?(b(s),o.elementsNeedUpdate=!0,o.normalsNeedUpdate=!0):e instanceof n.Line&&x(s),o.verticesNeedUpdate=!0,o.colorsNeedUpdate=!0);if(!e.__webglActive){if(e instanceof n.Mesh||e instanceof n.Line)for(o=e.geometry,i=0,r=o.geometryGroups.length;r>i;i++)s=o.geometryGroups[i],w(t.__webglObjects,s,e);else e instanceof n.Sprite&&t.__webglSprites.push(e);e.__webglActive=!0}}function f(e){var t,i=e.geometry;e.material;if(e instanceof n.Mesh||e instanceof n.Line){for(var r=0,o=i.geometryGroups.length;o>r;r++)t=i.geometryGroups[r],(i.verticesNeedUpdate||i.elementsNeedUpdate||i.colorsNeedUpdate||i.normalsNeedUpdate)&&y(t,j.STATIC_DRAW);i.verticesNeedUpdate=!1,i.elementsNeedUpdate=!1,i.normalsNeedUpdate=!1,i.colorsNeedUpdate=!1,i.buffersNeedUpdate=!1}}function p(e,t){e instanceof n.Mesh||e instanceof n.Line?v(t.__webglObjects,e):e instanceof n.Sprite&&m(t.__webglSprites,e),e.__webglActive=!1}function v(e,t){for(var i=e.length-1;i>=0;--i)e[i].object===t&&e.splice(i,1)}function m(e,t){for(var i=e.length-1;i>=0;--i)e[i]===t&&e.splice(i,1)}function g(e){var t=e.object,i=t.material;if(i.transparent){e.opaque=null,e.transparent=i;var r=i.clone();r.opacity=0,e.blank=r}else e.opaque=i,e.transparent=null}function y(e,t,i){var r=e.vertexArray,n=e.colorArray;if(j.bindBuffer(j.ARRAY_BUFFER,e.__webglVertexBuffer),j.bufferData(j.ARRAY_BUFFER,r,t),j.bindBuffer(j.ARRAY_BUFFER,e.__webglColorBuffer),j.bufferData(j.ARRAY_BUFFER,n,t),void 0!==e.normalArray&&void 0!==e.__webglNormalBuffer){var o=e.normalArray;j.bindBuffer(j.ARRAY_BUFFER,e.__webglNormalBuffer),j.bufferData(j.ARRAY_BUFFER,o,t)}if(void 0!==e.faceArray&&void 0!==e.__webglFaceBuffer){var a=e.faceArray;j.bindBuffer(j.ELEMENT_ARRAY_BUFFER,e.__webglFaceBuffer),j.bufferData(j.ELEMENT_ARRAY_BUFFER,a,t)}if(void 0!==e.lineArray&&void 0!==e.__webglLineBuffer){var s=e.lineArray;j.bindBuffer(j.ELEMENT_ARRAY_BUFFER,e.__webglLineBuffer),j.bufferData(j.ELEMENT_ARRAY_BUFFER,s,t)}}function b(e){e.__webglVertexBuffer=j.createBuffer(),e.__webglNormalBuffer=j.createBuffer(),e.__webglColorBuffer=j.createBuffer(),e.__webglFaceBuffer=j.createBuffer(),e.__webglLineBuffer=j.createBuffer(),B.info.memory.geometries++}function x(e){e.__webglVertexBuffer=j.createBuffer(),e.__webglColorBuffer=j.createBuffer(),B.info.memory.geometries++}function w(e,t,i){e.push({buffer:t,object:i,opaque:null,transparent:null})}function C(e,t){e._modelViewMatrix.multiplyMatrices(t.matrixWorldInverse,e.matrixWorld),e._normalMatrix.getInverse(e._modelViewMatrix),e._normalMatrix.transpose()}function S(e){return 0===(e&e-1)}function A(e){return j.LINEAR}function T(e,t,i){i?(j.texParameteri(e,j.TEXTURE_WRAP_S,z(t.wrapS)),j.texParameteri(e,j.TEXTURE_WRAP_T,z(t.wrapT)),j.texParameteri(e,j.TEXTURE_MAG_FILTER,z(t.magFilter)),j.texParameteri(e,j.TEXTURE_MIN_FILTER,z(t.minFilter))):(j.texParameteri(e,j.TEXTURE_WRAP_S,j.CLAMP_TO_EDGE),j.texParameteri(e,j.TEXTURE_WRAP_T,j.CLAMP_TO_EDGE),j.texParameteri(e,j.TEXTURE_MAG_FILTER,A(t.magFilter)),j.texParameteri(e,j.TEXTURE_MIN_FILTER,A(t.minFilter)))}function z(e){return e===n.UnsignedByteType?j.UNSIGNED_BYTE:e===n.RGBAFormat?j.RGBA:0}function M(e,t){var i,r,o,a,s,l,c=0,u=0,h=0,d=de,f=d.directional.colors,p=d.directional.positions,v=0,m=0,g=0;for(i=0,r=t.length;r>i;i++)if(o=t[i],a=o.color,s=o.intensity,l=o.distance,o instanceof n.Light){if(v++,ue.getPositionFromMatrix(o.matrixWorld),ce.getPositionFromMatrix(o.target.matrixWorld),ue.sub(ce),ue.normalize(),0===ue.x&&0===ue.y&&0===ue.z)continue;p[g]=ue.x,p[g+1]=ue.y,p[g+2]=ue.z,f[g]=a.r*s,f[g+1]=a.g*s,f[g+2]=a.b*s,g+=3,m++}d.ambient[0]=c,d.ambient[1]=u,d.ambient[2]=h,d.directional.length=m}function _(){try{if(!(j=k.getContext("experimental-webgl",{alpha:L,premultipliedAlpha:I,antialias:N,stencil:O,preserveDrawingBuffer:P}))&&!(j=k.getContext("webgl",{alpha:L,premultipliedAlpha:I,antialias:N,stencil:O,preserveDrawingBuffer:P})))throw"Error creating WebGL context."}catch(e){console.error(e)}j.getExtension("EXT_frag_depth")}function E(){j.clearColor(0,0,0,1),j.clearDepth(1),j.clearStencil(0),j.enable(j.DEPTH_TEST),j.depthFunc(j.LEQUAL),j.frontFace(j.CCW),j.cullFace(j.BACK),j.enable(j.CULL_FACE),j.enable(j.BLEND),j.blendEquation(j.FUNC_ADD),j.blendFunc(j.SRC_ALPHA,j.ONE_MINUS_SRC_ALPHA),j.clearColor(R.r,R.g,R.b,F);j.getExtension("EXT_frag_depth")}e=e||{};var k=void 0!==e.canvas?e.canvas:document.createElement("canvas"),D=void 0!==e.precision?e.precision:"highp",L=void 0!==e.alpha?e.alpha:!0,I=void 0!==e.premultipliedAlpha?e.premultipliedAlpha:!0,N=void 0!==e.antialias?e.antialias:!1,O=void 0!==e.stencil?e.stencil:!0,P=void 0!==e.preserveDrawingBuffer?e.preserveDrawingBuffer:!1,R=void 0!==e.clearColor?new n.Color(e.clearColor):new n.Color(0),F=void 0!==e.clearAlpha?e.clearAlpha:0;this.domElement=k,this.context=null,this.devicePixelRatio=void 0!==e.devicePixelRatio?e.devicePixelRatio:void 0!==self.devicePixelRatio?self.devicePixelRatio:1,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.autoUpdateObjects=!0,this.autoUpdateScene=!0,this.renderPluginsPost=[],this.info={memory:{programs:0,geometries:0,textures:0},render:{calls:0,vertices:0,faces:0,points:0}};var j,B=this,q=[],$=0,U=null,V=-1,G=null,H=null,W=0,Y=-1,Q=-1,X=-1,Z=-1,K=-1,J=null,ee=null,te=0,ie=0,re=0,ne=0,oe=0,ae=0,se={},le=new n.Matrix4,ce=new n.Vector3,ue=new n.Vector3,he=!0,de={ambient:[0,0,0],directional:{length:0,colors:[],positions:[]},point:{length:0,colors:[],positions:[],distances:[]},spot:{length:0,colors:[],positions:[],distances:[],directions:[],anglesCos:[],exponents:[]},hemi:{length:0,skyColors:[],groundColors:[],positions:[]}};_(),E(),this.context=j,this.getContext=function(){return j},this.getPrecision=function(){return D},this.setClearColorHex=function(e,t){R.setHex(e),F=t,j.clearColor(R.r,R.g,R.b,F)},this.setSize=function(e,t){k.width=e*this.devicePixelRatio,k.height=t*this.devicePixelRatio,k.style.width=e+"px",k.style.height=t+"px",this.setViewport(0,0,k.width,k.height)},this.setViewport=function(e,t,i,r){te=void 0!==e?e:0,ie=void 0!==t?t:0,re=void 0!==i?i:k.width,ne=void 0!==r?r:k.height,j.viewport(te,ie,re,ne)},this.clear=function(e,t,i){var r=0;(void 0===e||e)&&(r|=j.COLOR_BUFFER_BIT),(void 0===t||t)&&(r|=j.DEPTH_BUFFER_BIT),(void 0===i||i)&&(r|=j.STENCIL_BUFFER_BIT),j.clear(r)},this.clearTarget=function(e,t,i){this.clear(e,t,i)},this.setMaterialFaces=function(e){var t=e.side===n.DoubleSide,i=e.side===n.BackSide;Y!==t&&(t?j.disable(j.CULL_FACE):j.enable(j.CULL_FACE),Y=t),Q!==i&&(i?j.frontFace(j.CW):j.frontFace(j.CCW),Q=i)},this.setDepthTest=function(e){Z!==e&&(e?j.enable(j.DEPTH_TEST):j.disable(j.DEPTH_TEST),Z=e)},this.setDepthWrite=function(e){K!==e&&(j.depthMask(e),K=e)},this.setBlending=function(e){e?(j.enable(j.BLEND),j.blendEquationSeparate(j.FUNC_ADD,j.FUNC_ADD),j.blendFuncSeparate(j.SRC_ALPHA,j.ONE_MINUS_SRC_ALPHA,j.ONE,j.ONE_MINUS_SRC_ALPHA)):j.disable(j.BLEND),X=e},this.addPostPlugin=function(e){e.init(this),this.renderPluginsPost.push(e)};var fe=function(e){var t=e.target;t.removeEventListener("dispose",fe),me(t),B.info.memory.geometries--},pe=function(e){var t=e.target;t.removeEventListener("dispose",pe),ye(t),B.info.memory.textures--},ve=function(e){var t=e.target;t.removeEventListener("dispose",ve),ge(t)},me=function(e){if(e.__webglInit=void 0,void 0!==e.__webglVertexBuffer&&j.deleteBuffer(e.__webglVertexBuffer),void 0!==e.__webglColorBuffer&&j.deleteBuffer(e.__webglColorBuffer),void 0!==e.geometryGroups)for(var t=0,i=e.groups;i>t;t++){var r=e.geometryGroups[t];void 0!==r.__webglVertexBuffer&&j.deleteBuffer(r.__webglVertexBuffer),void 0!==r.__webglColorBuffer&&j.deleteBuffer(r.__webglColorBuffer),void 0!==r.__webglNormalBuffer&&j.deleteBuffer(r.__webglNormalBuffer),void 0!==r.__webglFaceBuffer&&j.deleteBuffer(r.__webglFaceBuffer),void 0!==r.__webglLineBuffer&&j.deleteBuffer(r.__webglLineBuffer)}},ge=function(e){var t=e.program;if(void 0!==t){e.program=void 0;var i,r,n,o=!1;for(i=0,r=q.length;r>i;i++)if(n=q[i],n.program===t){n.usedTimes--,0===n.usedTimes&&(o=!0);break}if(o===!0){var a=[];for(i=0,r=q.length;r>i;i++)n=q[i],n.program!==t&&a.push(n);q=a,j.deleteProgram(t),B.info.memory.programs--}}},ye=function(e){if(e.image&&e.image.__webglTextureCube)j.deleteTexture(e.image.__webglTextureCube);else{if(!e.__webglInit)return;e.__webglInit=!1,j.deleteTexture(e.__webglTexture)}};this.initMaterial=function(e,t,i,r){e.addEventListener("dispose",ve);var o,a;if(a=e.shaderID){var l=n.ShaderLib[a];e.vertexShader=l.vertexShader,e.fragmentShader=l.fragmentShader,e.uniforms=n.ShaderUtils.clone(l.uniforms)}o={wireframe:e.wireframe},e.program=s(e.fragmentShader,e.vertexShader,e.uniforms,o)},this.renderBuffer=function(e,r,a,s,c,u){if(s.visible){var h,d;h=l(e,r,a,s,u),d=h.attributes;var f=!1,p=s.wireframe?1:0,v=16777215*c.id+2*h.id+p;v!==G&&(G=v,f=!0),f&&(i(),d.position>=0&&(j.bindBuffer(j.ARRAY_BUFFER,c.__webglVertexBuffer),t(d.position),j.vertexAttribPointer(d.position,3,j.FLOAT,!1,0,0)),d.color>=0&&(j.bindBuffer(j.ARRAY_BUFFER,c.__webglColorBuffer),t(d.color),j.vertexAttribPointer(d.color,3,j.FLOAT,!1,0,0)),d.normal>=0&&(j.bindBuffer(j.ARRAY_BUFFER,c.__webglNormalBuffer),t(d.normal),j.vertexAttribPointer(d.normal,3,j.FLOAT,!1,0,0)));var m,g;u instanceof n.Mesh?(s.wireframe?(g=c.lineidx,o(s.wireframeLinewidth),f&&j.bindBuffer(j.ELEMENT_ARRAY_BUFFER,c.__webglLineBuffer),j.drawElements(j.LINES,g,j.UNSIGNED_SHORT,0)):(m=c.faceidx,f&&j.bindBuffer(j.ELEMENT_ARRAY_BUFFER,c.__webglFaceBuffer),j.drawElements(j.TRIANGLES,m,j.UNSIGNED_SHORT,0)),B.info.render.calls++,B.info.render.vertices+=m,B.info.render.faces+=m/3):u instanceof n.Line&&(g=c.vertices,o(s.linewidth),j.drawArrays(j.LINES,0,g),B.info.render.calls++)}},this.render=function(e,t,i){if(t instanceof n.Camera==!1)return void console.error("$3Dmol.Renderer.render: camera is not an instance of $3Dmol.Camera.");var r,o,a,s,l,c=e.__lights,d=e.fog;for(V=-1,he=!0,this.autoUpdateScene&&e.updateMatrixWorld(),void 0===t.parent&&t.updateMatrixWorld(),t.matrixWorldInverse.getInverse(t.matrixWorld),le.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this.autoUpdateObjects&&this.initWebGLObjects(e),B.info.render.calls=0,B.info.render.vertices=0,B.info.render.faces=0,B.info.render.points=0,oe=re,ae=ne,(this.autoClear||i)&&this.clear(this.autoClearColor,this.autoClearDepth,this.autoClearStencil),l=e.__webglObjects,r=0,o=l.length;o>r;r++)a=l[r],s=a.object,a.render=!1,s.visible&&(C(s,t),g(a),a.render=!0);var f=null;this.setBlending(!1),u(e.__webglObjects,!0,"opaque",t,c,d,!1,f),u(e.__webglObjects,!0,"blank",t,c,d,!0,f),u(e.__webglObjects,!1,"transparent",t,c,d,!0,f),h(this.renderPluginsPost,e,t),this.setDepthTest(!0),this.setDepthWrite(!0)},this.initWebGLObjects=function(e){if(e.__webglObjects||(e.__webglObjects=[],e.__webglObjectsImmediate=[],e.__webglSprites=[],e.__webglFlares=[]),e.__objectsAdded.length){for(;e.__objectsAdded.length;)d(e.__objectsAdded[0],e),e.__objectsAdded.splice(0,1);G=-1}for(;e.__objectsRemoved.length;)p(e.__objectsRemoved[0],e),e.__objectsRemoved.splice(0,1);for(var t=0,i=e.__webglObjects.length;i>t;t++)f(e.__webglObjects[t].object)},this.setTexture=function(e,t){if(e.needsUpdate){e.__webglInit||(e.__webglInit=!0,e.addEventListener("dispose",pe),e.__webglTexture=j.createTexture(),B.info.memory.textures++),j.activeTexture(j.TEXTURE0+t),j.bindTexture(j.TEXTURE_2D,e.__webglTexture),j.pixelStorei(j.UNPACK_FLIP_Y_WEBGL,e.flipY),j.pixelStorei(j.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e.premultiplyAlpha),j.pixelStorei(j.UNPACK_ALIGNMENT,e.unpackAlignment);var i=e.image,r=S(i.width)&&S(i.height),n=z(e.format),o=z(e.type);T(j.TEXTURE_2D,e,r);var a,s=e.mipmaps;if(s.length>0&&r){for(var l=0,c=s.length;c>l;l++)a=s[l],j.texImage2D(j.TEXTURE_2D,l,n,n,o,a);e.generateMipmaps=!1}else j.texImage2D(j.TEXTURE_2D,0,n,n,o,e.image);e.generateMipmaps&&r&&j.generateMipmap(j.TEXTURE_2D),e.needsUpdate=!1,e.onUpdate&&e.onUpdate()}else j.activeTexture(j.TEXTURE0+t),j.bindTexture(j.TEXTURE_2D,e.__webglTexture)},this.addPostPlugin(new n.SpritePlugin)},n.Scene=function(){n.Object3D.call(this),this.fog=null,this.overrideMaterial=null,this.matrixAutoUpdate=!1,this.__objects=[],this.__lights=[],this.__objectsAdded=[],this.__objectsRemoved=[]},n.Scene.prototype=Object.create(n.Object3D.prototype),n.Scene.prototype.__addObject=function(e){if(e instanceof n.Light)-1===this.__lights.indexOf(e)&&this.__lights.push(e),e.target&&void 0===e.target.parent&&this.add(e.target);else if(-1===this.__objects.indexOf(e)){this.__objects.push(e),this.__objectsAdded.push(e);var t=this.__objectsRemoved.indexOf(e);-1!==t&&this.__objectsRemoved.splice(i,1)}for(var i=0;i<e.children.length;i++)this.__addObject(e.children[i])},n.Scene.prototype.__removeObject=function(e){var t;if(e instanceof n.Light)t=this.__lights.indexOf(e),-1!==t&&this.__lights.splice(t,1);else if(t=this.__objects.indexOf(e),-1!==t){this.__objects.splice(t,1),this.__objectsRemoved.push(e);var i=this.__objectsAdded.indexOf(e);-1!==i&&this.__objectsAdded.splice(t,1)}for(var r=0;r<e.children.length;r++)this.__removeObject(e.children[r])},n.Fog=function(e,t,i){this.name="",this.color=new n.Color(e),this.near=void 0!==t?t:1,this.far=void 0!==i?i:1e3},n.Fog.prototype.clone=function(){return new n.Fog(this.color.getHex(),this.near,this.far)},n.ShaderUtils={clone:function(e){var t,i={};for(t in e){i[t]={},i[t].type=e[t].type;var r=e[t].value;r instanceof n.Color?i[t].value=r.clone():"number"==typeof r?i[t].value=r:r instanceof Array?i[t].value=[]:console.error("Error copying shader uniforms from ShaderLib: unknown type for uniform")}return i}},n.ShaderLib={basic:{fragmentShader:["uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform vec3 diffuse;","uniform float opacity;","uniform vec3 fogColor;","uniform float fogNear;","uniform float fogFar;","varying vec3 vColor;","void main() {","    gl_FragColor = vec4( diffuse, opacity );","    gl_FragColor = gl_FragColor * vec4( vColor, opacity );","    float depth = gl_FragCoord.z / gl_FragCoord.w;","    float fogFactor = smoothstep( fogNear, fogFar, depth );","    gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );","}"].join("\n"),vertexShader:["uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","attribute vec3 position;","attribute vec3 color;","varying vec3 vColor;","void main() {","    vColor = color;","    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );","    gl_Position = projectionMatrix * mvPosition;","}"].join("\n"),uniforms:{opacity:{type:"f",value:1},diffuse:{type:"c",value:new n.Color(1,1,1)},fogColor:{type:"c",value:new n.Color(1,1,1)},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2e3}}},sphereimposter:{fragmentShader:["uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform vec3 diffuse;","uniform float opacity;","uniform vec3 fogColor;","uniform float fogNear;","uniform float fogFar;","varying vec3 vColor;","varying vec2 mapping;","void main() {","    float lensqr = dot(mapping,mapping);","    if(lensqr > 2.0)","       discard;","    float w = sqrt(2.0 - lensqr);","    float z = sqrt(sqrt(2.0)-lensqr);","    gl_FragDepthEXT = -.1*z;","    gl_FragColor = vec4( w*vColor, 1 );","}"].join("\n"),vertexShader:["uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","attribute vec3 position;","attribute vec3 normal;","attribute vec3 color;","varying vec2 mapping;","varying vec3 vColor;","void main() {","    vColor = color;","    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );","    vec4 projPosition = projectionMatrix * mvPosition;","    vec4 adjust = projectionMatrix*vec4(normal, 1.0);  adjust.y *= -1.0; adjust.z = 0.0; adjust.w = 0.0;","    mapping = normal.xy;","    gl_Position = projPosition+adjust;","}"].join("\n"),uniforms:{opacity:{type:"f",value:1},diffuse:{type:"c",value:new n.Color(1,1,1)},fogColor:{type:"c",value:new n.Color(1,1,1)},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2e3}}},lambert:{fragmentShader:["uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform float opacity;","uniform vec3 fogColor;","uniform float fogNear;","uniform float fogFar;","varying vec3 vLightFront;","varying vec3 vColor;","void main() {","    gl_FragColor = vec4( vec3 ( 1.0 ), opacity );","    #ifndef WIREFRAME","    gl_FragColor.xyz *= vLightFront;","    #endif","    gl_FragColor = gl_FragColor * vec4( vColor, opacity );","    float depth = gl_FragCoord.z / gl_FragCoord.w;","    float fogFactor = smoothstep( fogNear, fogFar, depth );","    gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );","}"].join("\n"),vertexShader:["uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform vec3 ambient;","uniform vec3 diffuse;","uniform vec3 emissive;","uniform vec3 ambientLightColor;","uniform vec3 directionalLightColor[ 1 ];","uniform vec3 directionalLightDirection[ 1 ];","attribute vec3 position;","attribute vec3 normal;","attribute vec3 color;","varying vec3 vColor;","varying vec3 vLightFront;","void main() {","    vColor = color;","    vec3 objectNormal = normal;","    vec3 transformedNormal = normalMatrix * objectNormal;","    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );","    vLightFront = vec3( 0.0 );","    transformedNormal = normalize( transformedNormal );","    vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ 0 ], 0.0 );","    vec3 dirVector = normalize( lDirection.xyz );","    float dotProduct = dot( transformedNormal, dirVector );","    vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );","    vLightFront += directionalLightColor[ 0 ] * directionalLightWeighting;","    vLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;","    gl_Position = projectionMatrix * mvPosition;","}"].join("\n"),uniforms:{opacity:{type:"f",value:1},diffuse:{type:"c",value:new n.Color(1,1,1)},fogColor:{type:"c",value:new n.Color(1,1,1)},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2e3},ambient:{type:"c",value:new n.Color(1,1,1)},emissive:{type:"c",value:new n.Color(1,1,1)},ambientLightColor:{type:"fv",value:[]},directionalLightColor:{type:"fv",value:[]},directionalLightDirection:{type:"fv",value:[]}}},lambertdouble:{fragmentShader:["uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform float opacity;","uniform vec3 fogColor;","uniform float fogNear;","uniform float fogFar;","varying vec3 vLightFront;","varying vec3 vLightBack;","varying vec3 vColor;","void main() {","    gl_FragColor = vec4( vec3 ( 1.0 ), opacity );","    #ifndef WIREFRAME","    if ( gl_FrontFacing )","       gl_FragColor.xyz *= vLightFront;","    else","       gl_FragColor.xyz *= vLightBack;","    #endif","    gl_FragColor = gl_FragColor * vec4( vColor, opacity );","    float depth = gl_FragCoord.z / gl_FragCoord.w;","    float fogFactor = smoothstep( fogNear, fogFar, depth );","    gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );","}"].join("\n"),
vertexShader:["uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform vec3 ambient;","uniform vec3 diffuse;","uniform vec3 emissive;","uniform vec3 ambientLightColor;","uniform vec3 directionalLightColor[ 1 ];","uniform vec3 directionalLightDirection[ 1 ];","attribute vec3 position;","attribute vec3 normal;","attribute vec3 color;","varying vec3 vColor;","varying vec3 vLightFront;","varying vec3 vLightBack;","void main() {","    vColor = color;","    vec3 objectNormal = normal;","    vec3 transformedNormal = normalMatrix * objectNormal;","    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );","    vLightFront = vec3( 0.0 );","    vLightBack = vec3( 0.0 );","    transformedNormal = normalize( transformedNormal );","    vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ 0 ], 0.0 );","    vec3 dirVector = normalize( lDirection.xyz );","    float dotProduct = dot( transformedNormal, dirVector );","    vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );","    vec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );","    vLightFront += directionalLightColor[ 0 ] * directionalLightWeighting;","    vLightBack += directionalLightColor[ 0 ] * directionalLightWeightingBack;","    vLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;","    vLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;","    gl_Position = projectionMatrix * mvPosition;","}"].join("\n"),uniforms:{opacity:{type:"f",value:1},diffuse:{type:"c",value:new n.Color(1,1,1)},fogColor:{type:"c",value:new n.Color(1,1,1)},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2e3},ambient:{type:"c",value:new n.Color(1,1,1)},emissive:{type:"c",value:new n.Color(1,1,1)},ambientLightColor:{type:"fv",value:[]},directionalLightColor:{type:"fv",value:[]},directionalLightDirection:{type:"fv",value:[]}}},sprite:{fragmentShader:["uniform vec3 color;","uniform sampler2D map;","uniform float opacity;","uniform int fogType;","uniform vec3 fogColor;","uniform float fogDensity;","uniform float fogNear;","uniform float fogFar;","uniform float alphaTest;","varying vec2 vUV;","void main() {","    vec4 texture = texture2D(map, vUV);","    if (texture.a < alphaTest) discard;","    gl_FragColor = vec4(color * texture.xyz, texture.a * opacity);","    if (fogType > 0) {","        float depth = gl_FragCoord.z / gl_FragCoord.w;","        float fogFactor = 0.0;","        if (fogType == 1) {","            fogFactor = smoothstep(fogNear, fogFar, depth);","        }","        else {","            const float LOG2 = 1.442695;","            float fogFactor = exp2(- fogDensity * fogDensity * depth * depth * LOG2);","            fogFactor = 1.0 - clamp(fogFactor, 0.0, 1.0);","        }","        gl_FragColor = mix(gl_FragColor, vec4(fogColor, gl_FragColor.w), fogFactor);","    }","}"].join("\n"),vertexShader:["uniform int useScreenCoordinates;","uniform vec3 screenPosition;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform float rotation;","uniform vec2 scale;","uniform vec2 alignment;","uniform vec2 uvOffset;","uniform vec2 uvScale;","attribute vec2 position;","attribute vec2 uv;","varying vec2 vUV;","void main() {","    vUV = uvOffset + uv * uvScale;","    vec2 alignedPosition = position + alignment;","    vec2 rotatedPosition;","    rotatedPosition.x = ( cos(rotation) * alignedPosition.x - sin(rotation) * alignedPosition.y ) * scale.x;","    rotatedPosition.y = ( sin(rotation) * alignedPosition.x + cos(rotation) * alignedPosition.y ) * scale.y;","    vec4 finalPosition;","    if(useScreenCoordinates != 0) {","        finalPosition = vec4(screenPosition.xy + rotatedPosition, screenPosition.z, 1.0);","    }","    else {","        finalPosition = projectionMatrix * modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0); finalPosition /= finalPosition.w;","        finalPosition.xy += rotatedPosition; ","    }","    gl_Position = finalPosition;","}"].join("\n"),uniforms:{}}};var n=n||{};n.partialCharges={"ALA:N":-.15,"ALA:CA":.1,"ALA:CB":0,"ALA:C":.6,"ALA:O":-.55,"ARG:N":-.15,"ARG:CA":.1,"ARG:CB":0,"ARG:CG":0,"ARG:CD":.1,"ARG:NE":-.1,"ARG:CZ":.5,"ARG:NH1":.25,"ARG:NH2":.25,"ARG:C":.6,"ARG:O":-.55,"ASN:N":-.15,"ASN:CA":.1,"ASN:CB":0,"ASN:CG":.55,"ASN:OD1":-.55,"ASN:ND2":0,"ASN:C":.6,"ASN:O":-.55,"ASP:N":-.15,"ASP:CA":.1,"ASP:CB":0,"ASP:CG":.14,"ASP:OD1":-.57,"ASP:OD2":-.57,"ASP:C":.6,"ASP:O":-.55,"CYS:N":-.15,"CYS:CA":.1,"CYS:CB":.19,"CYS:SG":-.19,"CYS:C":.6,"CYS:O":-.55,"GLN:N":-.15,"GLN:CA":.1,"GLN:CB":0,"GLN:CG":0,"GLN:CD":.55,"GLN:OE1":-.55,"GLN:NE2":0,"GLN:C":.6,"GLN:O":-.55,"GLU:N":-.15,"GLU:CA":.1,"GLU:CB":0,"GLU:CG":0,"GLU:CD":.14,"GLU:OE1":-.57,"GLU:OE2":-.57,"GLU:C":.6,"GLU:O":-.55,"GLY:N":-.15,"GLY:CA":.1,"GLY:C":.6,"GLY:O":-.55,"HIS:N":-.15,"HIS:CA":.1,"HIS:CB":0,"HIS:CG":.1,"HIS:ND1":-.1,"HIS:CD2":.1,"HIS:NE2":-.4,"HIS:CE1":.3,"HIS:C":.6,"HIS:O":-.55,"ILE:N":-.15,"ILE:CA":.1,"ILE:CB":0,"ILE:CG2":0,"ILE:CG1":0,"ILE:CD":0,"ILE:C":.6,"ILE:O":-.55,"LEU:N":-.15,"LEU:CA":.1,"LEU:CB":0,"LEU:CG":0,"LEU:CD1":0,"LEU:CD2":0,"LEU:C":.6,"LEU:O":-.55,"LYS:N":-.15,"LYS:CA":.1,"LYS:CB":0,"LYS:CG":0,"LYS:CD":0,"LYS:CE":.25,"LYS:NZ":.75,"LYS:C":.6,"LYS:O":-.55,"MET:N":-.15,"MET:CA":.1,"MET:CB":0,"MET:CG":.06,"MET:SD":-.12,"MET:CE":.06,"MET:C":.6,"MET:O":-.55,"PHE:N":-.15,"PHE:CA":.1,"PHE:CB":0,"PHE:CG":0,"PHE:CD1":0,"PHE:CD2":0,"PHE:CE1":0,"PHE:CE2":0,"PHE:CZ":0,"PHE:C":.6,"PHE:O":-.55,"PRO:N":-.25,"PRO:CD":.1,"PRO:CA":.1,"PRO:CB":0,"PRO:CG":0,"PRO:C":.6,"PRO:O":-.55,"SER:N":-.15,"SER:CA":.1,"SER:CB":.25,"SER:OG":-.25,"SER:C":.6,"SER:O":-.55,"THR:N":-.15,"THR:CA":.1,"THR:CB":.25,"THR:OG1":-.25,"THR:CG2":0,"THR:C":.6,"THR:O":-.55,"TRP:N":-.15,"TRP:CA":.1,"TRP:CB":0,"TRP:CG":-.03,"TRP:CD2":.1,"TRP:CE2":-.04,"TRP:CE3":-.03,"TRP:CD1":.06,"TRP:NE1":-.06,"TRP:CZ2":0,"TRP:CZ3":0,"TRP:CH2":0,"TRP:C":.6,"TRP:O":-.55,"TYR:N":-.15,"TYR:CA":.1,"TYR:CB":0,"TYR:CG":0,"TYR:CD1":0,"TYR:CE1":0,"TYR:CD2":0,"TYR:CE2":0,"TYR:CZ":.25,"TYR:OH":-.25,"TYR:C":.6,"TYR:O":-.55,"VAL:N":-.15,"VAL:CA":.1,"VAL:CB":0,"VAL:CG1":0,"VAL:CG2":0,"VAL:C":.6,"VAL:O":-.55},n.applyPartialCharges=function(e,t){if((!t||"undefined"==typeof e.partialCharge)&&e.resn&&e.atom){var i=e.resn+":"+e.atom;e.properties.partialCharge=n.partialCharges[i]}},n=n||{},n.MarchingCube=function(){var e=2,t={};t.march=function(t,s,l,c){var u,h,d=!!c.fulltable,f=c.hasOwnProperty("origin")&&c.origin.hasOwnProperty("x")?c.origin:{x:0,y:0,z:0},p=!!c.voxel,v=c.nX||0,m=c.nY||0,g=c.nZ||0,y=c.scale||1,b=new n.Vector3(1,1,1).multiplyScalar(y),x=new Int32Array(v*m*g);for(u=0,h=x.length;h>u;++u)x[u]=-1;var w=function(e,t,i,r,o,a){var l=new n.Vector3;l.copy(f);var c=!!(r&1<<o),u=!!(r&1<<a),h=o;!c&&u&&(h=a),1&h&&i++,2&h&&t++,4&h&&e++,l.x+=b.x*e,l.y+=b.y*t,l.z+=b.z*i;var d=(m*e+t)*g+i;return p?(s.push(l),s.length-1):(x[d]<0&&(x[d]=s.length,s.push(l)),x[d])},C=new Int32Array(12),S=d?o:i,A=d?a:r;for(u=0;v-1>u;++u)for(var T=0;m-1>T;++T)for(var z=0;g-1>z;++z){for(var M=0,_=0;8>_;++_){var E=(m*(u+((4&_)>>2))+T+((2&_)>>1))*g+z+(1&_),k=!!(t[E]&e);M|=k<<_}if(0!==M&&255!==M){var D=S[M];if(0!==D){var L=A[M];1&D&&(C[0]=w(u,T,z,M,0,1)),2&D&&(C[1]=w(u,T,z,M,1,3)),4&D&&(C[2]=w(u,T,z,M,3,2)),8&D&&(C[3]=w(u,T,z,M,2,0)),16&D&&(C[4]=w(u,T,z,M,4,5)),32&D&&(C[5]=w(u,T,z,M,5,7)),64&D&&(C[6]=w(u,T,z,M,7,6)),128&D&&(C[7]=w(u,T,z,M,6,4)),256&D&&(C[8]=w(u,T,z,M,0,4)),512&D&&(C[9]=w(u,T,z,M,1,5)),1024&D&&(C[10]=w(u,T,z,M,3,7)),2048&D&&(C[11]=w(u,T,z,M,2,6));for(var I=0;I<L.length;I+=3){var N=C[L[I]],O=C[L[I+1]],P=C[L[I+2]];p&&I>=3&&(s.push(s[N]),N=s.length-1,s.push(s[O]),O=s.length-1,s.push(s[P]),P=s.length-1),l.push(N),l.push(O),l.push(P)}}}}},t.laplacianSmooth=function(e,t,i){var r,n,o,a,s,l=new Array(t.length);for(r=0,n=t.length;n>r;r++)l[r]={x:0,y:0,z:0};var c,u=new Array(20);for(r=0;20>r;r++)u[r]=new Array(t.length);for(r=0,n=t.length;n>r;r++)u[0][r]=0;for(r=0,n=i.length/3;n>r;r++){var h=3*r,d=3*r+1,f=3*r+2;for(c=!0,o=0,a=u[0][i[h]];a>o;o++)if(i[d]==u[o+1][i[h]]){c=!1;break}for(c&&(u[0][i[h]]++,u[u[0][i[h]]][i[h]]=i[d]),c=!0,o=0,a=u[0][i[h]];a>o;o++)if(i[f]==u[o+1][i[h]]){c=!1;break}for(c&&(u[0][i[h]]++,u[u[0][i[h]]][i[h]]=i[f]),c=!0,o=0,a=u[0][i[d]];a>o;o++)if(i[h]==u[o+1][i[d]]){c=!1;break}for(c&&(u[0][i[d]]++,u[u[0][i[d]]][i[d]]=i[h]),c=!0,o=0,a=u[0][i[d]];a>o;o++)if(i[f]==u[o+1][i[d]]){c=!1;break}for(c&&(u[0][i[d]]++,u[u[0][i[d]]][i[d]]=i[f]),c=!0,o=0;o<u[0][i[f]];o++)if(i[h]==u[o+1][i[f]]){c=!1;break}for(c&&(u[0][i[f]]++,u[u[0][i[f]]][i[f]]=i[h]),c=!0,o=0,a=u[0][i[f]];a>o;o++)if(i[d]==u[o+1][i[f]]){c=!1;break}c&&(u[0][i[f]]++,u[u[0][i[f]]][i[f]]=i[d])}var p=1,v=.5;for(s=0;e>s;s++){for(r=0,n=t.length;n>r;r++)if(u[0][r]<3)l[r].x=t[r].x,l[r].y=t[r].y,l[r].z=t[r].z;else if(3==u[0][r]||4==u[0][r]){for(l[r].x=0,l[r].y=0,l[r].z=0,o=0,a=u[0][r];a>o;o++)l[r].x+=t[u[o+1][r]].x,l[r].y+=t[u[o+1][r]].y,l[r].z+=t[u[o+1][r]].z;l[r].x+=v*t[r].x,l[r].y+=v*t[r].y,l[r].z+=v*t[r].z,l[r].x/=v+u[0][r],l[r].y/=v+u[0][r],l[r].z/=v+u[0][r]}else{for(l[r].x=0,l[r].y=0,l[r].z=0,o=0,a=u[0][r];a>o;o++)l[r].x+=t[u[o+1][r]].x,l[r].y+=t[u[o+1][r]].y,l[r].z+=t[u[o+1][r]].z;l[r].x+=p*t[r].x,l[r].y+=p*t[r].y,l[r].z+=p*t[r].z,l[r].x/=p+u[0][r],l[r].y/=p+u[0][r],l[r].z/=p+u[0][r]}for(r=0,n=t.length;n>r;r++)t[r].x=l[r].x,t[r].y=l[r].y,t[r].z=l[r].z}},t.edgeTable=[0,0,0,0,0,0,0,2816,0,0,0,1792,0,3328,3584,3840,0,0,0,138,0,21,0,134,0,0,0,652,0,2067,3865,3600,0,0,0,42,0,0,0,294,0,0,21,28,0,3875,1049,3360,0,168,162,170,0,645,2475,2210,0,687,293,172,4010,3747,3497,3232,0,0,0,0,0,69,0,900,0,0,0,1792,138,131,1608,1920,0,81,0,2074,84,85,84,86,0,81,0,3676,330,1105,1881,1616,0,0,0,42,0,69,0,502,0,0,21,3580,138,2035,1273,1520,2816,104,2337,106,840,581,367,102,2816,3695,3429,3180,1898,1635,1385,1120,0,0,0,0,0,0,0,3910,0,0,69,588,42,2083,41,2880,0,0,0,1722,0,2293,4095,3830,0,255,757,764,2538,2291,3065,2800,0,0,81,338,0,3925,1119,3414,84,855,85,340,2130,2899,89,2384,1792,712,194,1162,4036,3781,3535,3270,708,719,197,204,3018,2755,2505,2240,0,0,0,0,168,420,168,1958,162,162,676,2988,170,163,680,928,3328,3096,3328,3642,52,53,1855,1590,2340,2111,2869,2620,298,51,825,560,3584,3584,3090,3482,1668,1941,1183,1430,146,2975,2069,2460,154,915,153,400,3840,3592,3329,3082,1796,1541,1295,1030,2818,2575,2309,2060,778,515,265,0];var i=new Uint32Array(t.edgeTable),r=t.triTable=[[],[],[],[],[],[],[],[11,9,8],[],[],[],[8,10,9],[],[10,8,11],[9,11,10],[8,10,9,8,11,10],[],[],[],[1,7,3],[],[4,2,0],[],[2,1,7],[],[],[],[2,7,3,2,9,7],[],[1,4,11,1,0,4],[3,8,0,11,9,4,11,10,9],[4,11,9,11,10,9],[],[],[],[5,3,1],[],[],[],[2,5,8,2,1,5],[],[],[2,4,0],[3,2,4],[],[0,9,1,8,10,5,8,11,10],[3,4,0,3,10,4],[5,8,10,8,11,10],[],[3,5,7],[7,1,5],[1,7,3,1,5,7],[],[9,2,0,9,7,2],[0,3,8,1,7,11,1,5,7],[11,1,7,1,5,7],[],[9,1,0,5,3,2,5,7,3],[8,2,5,8,0,2],[2,5,3,5,7,3],[3,9,1,3,8,9,7,11,10,7,10,5],[9,1,0,10,7,11,10,5,7],[3,8,0,7,10,5,7,11,10],[11,5,7,11,10,5],[],[],[],[],[],[0,6,2],[],[7,2,9,7,9,8],[],[],[],[8,10,9],[7,1,3],[7,1,0],[6,9,3,6,10,9],[7,10,8,10,9,8],[],[6,0,4],[],[11,1,4,11,3,1],[2,4,6],[2,0,4,2,4,6],[2,4,6],[1,4,2,4,6,2],[],[6,0,4],[],[2,11,3,6,9,4,6,10,9],[8,6,1,8,1,3],[10,0,6,0,4,6],[8,0,3,9,6,10,9,4,6],[10,4,6,10,9,4],[],[],[],[5,3,1],[],[0,6,2],[],[7,4,8,5,2,1,5,6,2],[],[],[2,4,0],[7,4,8,2,11,3,10,5,6],[7,1,3],[5,6,10,0,9,1,8,7,4],[5,6,10,7,0,3,7,4,0],[10,5,6,4,8,7],[9,11,8],[3,5,6],[0,5,11,0,11,8],[6,3,5,3,1,5],[3,9,6,3,8,9],[9,6,0,6,2,0],[0,3,8,2,5,6,2,1,5],[1,6,2,1,5,6],[9,11,8],[1,0,9,6,10,5,11,3,2],[6,10,5,2,8,0,2,11,8],[3,2,11,10,5,6],[10,5,6,9,3,8,9,1,3],[0,9,1,5,6,10],[8,0,3,10,5,6],[10,5,6],[],[],[],[],[],[],[],[1,10,2,9,11,6,9,8,11],[],[],[6,0,2],[3,6,9,3,2,6],[3,5,1],[0,5,1,0,11,5],[0,3,5],[6,9,11,9,8,11],[],[],[],[4,5,9,7,1,10,7,3,1],[],[11,6,7,2,4,5,2,0,4],[11,6,7,8,0,3,1,10,2,9,4,5],[6,7,11,1,10,2,9,4,5],[],[4,1,0,4,5,1,6,7,3,6,3,2],[9,4,5,0,6,7,0,2,6],[4,5,9,6,3,2,6,7,3],[6,7,11,5,3,8,5,1,3],[6,7,11,4,1,0,4,5,1],[4,5,9,3,8,0,11,6,7],[9,4,5,7,11,6],[],[],[0,6,4],[8,6,4,8,1,6],[],[0,10,2,0,9,10,4,8,11,4,11,6],[10,2,1,6,0,3,6,4,0],[10,2,1,11,4,8,11,6,4],[4,2,6],[1,0,9,2,4,8,2,6,4],[2,4,0,2,6,4],[8,2,4,2,6,4],[11,4,1,11,6,4],[0,9,1,4,11,6,4,8,11],[3,6,0,6,4,0],[8,6,4,8,11,6],[10,8,9],[6,3,9,6,7,3],[6,7,1],[10,7,1,7,3,1],[7,11,6,8,10,2,8,9,10],[11,6,7,10,0,9,10,2,0],[2,1,10,7,11,6,8,0,3],[1,10,2,6,7,11],[7,2,6,7,9,2],[1,0,9,3,6,7,3,2,6],[7,0,6,0,2,6],[2,7,3,2,6,7],[7,11,6,3,9,1,3,8,9],[9,1,0,11,6,7],[0,3,8,11,6,7],[11,6,7],[],[],[],[],[5,3,7],[8,5,2,8,7,5],[5,3,7],[1,10,2,5,8,7,5,9,8],[1,7,5],[1,7,5],[9,2,7,9,7,5],[11,3,2,8,5,9,8,7,5],[1,3,7,1,7,5],[0,7,1,7,5,1],[9,3,5,3,7,5],[9,7,5,9,8,7],[8,10,11],[3,4,10,3,10,11],[8,10,11],[5,9,4,1,11,3,1,10,11],[2,4,5],[5,2,4,2,0,4],[0,3,8,5,9,4,10,2,1],[2,1,10,9,4,5],[2,8,5,2,11,8],[3,2,11,1,4,5,1,0,4],[9,4,5,8,2,11,8,0,2],[11,3,2,9,4,5],[8,5,3,5,1,3],[5,0,4,5,1,0],[3,8,0,4,5,9],[9,4,5],[11,9,10],[11,9,10],[1,11,4,1,10,11],[8,7,4,11,1,10,11,3,1],[2,7,9,2,9,10],[4,8,7,0,10,2,0,9,10],[2,1,10,0,7,4,0,3,7],[10,2,1,8,7,4],[1,7,4],[3,2,11,4,8,7,9,1,0],[11,4,2,4,0,2],[2,11,3,7,4,8],[4,1,7,1,3,7],[1,0,9,8,7,4],[3,4,0,3,7,4],[8,7,4],[8,9,10,8,10,11],[3,9,11,9,10,11],[0,10,8,10,11,8],[10,3,1,10,11,3],[2,8,10,8,9,10],[9,2,0,9,10,2],[8,0,3,1,10,2],[10,2,1],[1,11,9,11,8,9],[11,3,2,0,9,1],[11,0,2,11,8,0],[11,3,2],[8,1,3,8,9,1],[9,1,0],[8,0,3],[]],o=[0,265,515,778,2060,2309,2575,2822,1030,1295,1541,1804,3082,3331,3593,3840,400,153,915,666,2460,2197,2975,2710,1430,1183,1941,1692,3482,3219,3993,3728,560,825,51,314,2620,2869,2111,2358,1590,1855,1077,1340,3642,3891,3129,3376,928,681,419,170,2988,2725,2479,2214,1958,1711,1445,1196,4010,3747,3497,3232,2240,2505,2755,3018,204,453,719,966,3270,3535,3781,4044,1226,1475,1737,1984,2384,2137,2899,2650,348,85,863,598,3414,3167,3925,3676,1370,1107,1881,1616,2800,3065,2291,2554,764,1013,255,502,3830,4095,3317,3580,1786,2035,1273,1520,2912,2665,2403,2154,876,613,367,102,3942,3695,3429,3180,1898,1635,1385,1120,1120,1385,1635,1898,3180,3429,3695,3942,102,367,613,876,2154,2403,2665,2912,1520,1273,2035,1786,3580,3317,4095,3830,502,255,1013,764,2554,2291,3065,2800,1616,1881,1107,1370,3676,3925,3167,3414,598,863,85,348,2650,2899,2137,2384,1984,1737,1475,1226,4044,3781,3535,3270,966,719,453,204,3018,2755,2505,2240,3232,3497,3747,4010,1196,1445,1711,1958,2214,2479,2725,2988,170,419,681,928,3376,3129,3891,3642,1340,1077,1855,1590,2358,2111,2869,2620,314,51,825,560,3728,3993,3219,3482,1692,1941,1183,1430,2710,2975,2197,2460,666,915,153,400,3840,3593,3331,3082,1804,1541,1295,1030,2822,2575,2309,2060,778,515,265,0],a=[[],[8,3,0],[9,0,1],[8,3,1,8,1,9],[11,2,3],[11,2,0,11,0,8],[11,2,3,0,1,9],[2,1,11,1,9,11,11,9,8],[10,1,2],[8,3,0,1,2,10],[9,0,2,9,2,10],[3,2,8,2,10,8,8,10,9],[10,1,3,10,3,11],[1,0,10,0,8,10,10,8,11],[0,3,9,3,11,9,9,11,10],[8,10,9,8,11,10],[8,4,7],[3,0,4,3,4,7],[1,9,0,8,4,7],[9,4,1,4,7,1,1,7,3],[2,3,11,7,8,4],[7,11,4,11,2,4,4,2,0],[3,11,2,4,7,8,9,0,1],[2,7,11,2,1,7,1,4,7,1,9,4],[10,1,2,8,4,7],[2,10,1,0,4,7,0,7,3],[4,7,8,0,2,10,0,10,9],[2,7,3,2,9,7,7,9,4,2,10,9],[8,4,7,11,10,1,11,1,3],[11,4,7,1,4,11,1,11,10,1,0,4],[3,8,0,7,11,4,11,9,4,11,10,9],[7,11,4,4,11,9,11,10,9],[9,5,4],[3,0,8,4,9,5],[5,4,0,5,0,1],[4,8,5,8,3,5,5,3,1],[11,2,3,9,5,4],[9,5,4,8,11,2,8,2,0],[3,11,2,1,5,4,1,4,0],[8,5,4,2,5,8,2,8,11,2,1,5],[2,10,1,9,5,4],[0,8,3,5,4,9,10,1,2],[10,5,2,5,4,2,2,4,0],[3,4,8,3,2,4,2,5,4,2,10,5],[5,4,9,1,3,11,1,11,10],[0,9,1,4,8,5,8,10,5,8,11,10],[3,4,0,3,10,4,4,10,5,3,11,10],[4,8,5,5,8,10,8,11,10],[9,5,7,9,7,8],[0,9,3,9,5,3,3,5,7],[8,0,7,0,1,7,7,1,5],[1,7,3,1,5,7],[11,2,3,8,9,5,8,5,7],[9,2,0,9,7,2,2,7,11,9,5,7],[0,3,8,2,1,11,1,7,11,1,5,7],[2,1,11,11,1,7,1,5,7],[1,2,10,5,7,8,5,8,9],[9,1,0,10,5,2,5,3,2,5,7,3],[5,2,10,8,2,5,8,5,7,8,0,2],[10,5,2,2,5,3,5,7,3],[3,9,1,3,8,9,7,11,10,7,10,5],[9,1,0,10,7,11,10,5,7],[3,8,0,7,10,5,7,11,10],[11,5,7,11,10,5],[11,7,6],[0,8,3,11,7,6],[9,0,1,11,7,6],[7,6,11,3,1,9,3,9,8],[2,3,7,2,7,6],[8,7,0,7,6,0,0,6,2],[1,9,0,3,7,6,3,6,2],[7,6,2,7,2,9,2,1,9,7,9,8],[1,2,10,6,11,7],[2,10,1,7,6,11,8,3,0],[11,7,6,10,9,0,10,0,2],[7,6,11,3,2,8,8,2,10,8,10,9],[6,10,7,10,1,7,7,1,3],[6,10,1,6,1,7,7,1,0,7,0,8],[9,0,3,6,9,3,6,10,9,6,3,7],[6,10,7,7,10,8,10,9,8],[8,4,6,8,6,11],[11,3,6,3,0,6,6,0,4],[0,1,9,4,6,11,4,11,8],[1,9,4,11,1,4,11,3,1,11,4,6],[3,8,2,8,4,2,2,4,6],[2,0,4,2,4,6],[1,9,0,3,8,2,2,8,4,2,4,6],[9,4,1,1,4,2,4,6,2],[10,1,2,11,8,4,11,4,6],[10,1,2,11,3,6,6,3,0,6,0,4],[0,2,10,0,10,9,4,11,8,4,6,11],[2,11,3,6,9,4,6,10,9],[8,4,6,8,6,1,6,10,1,8,1,3],[1,0,10,10,0,6,0,4,6],[8,0,3,9,6,10,9,4,6],[10,4,6,10,9,4],[9,5,4,7,6,11],[4,9,5,3,0,8,11,7,6],[6,11,7,4,0,1,4,1,5],[6,11,7,4,8,5,5,8,3,5,3,1],[4,9,5,6,2,3,6,3,7],[9,5,4,8,7,0,0,7,6,0,6,2],[4,0,1,4,1,5,6,3,7,6,2,3],[7,4,8,5,2,1,5,6,2],[6,11,7,1,2,10,9,5,4],[11,7,6,8,3,0,1,2,10,9,5,4],[11,7,6,10,5,2,2,5,4,2,4,0],[7,4,8,2,11,3,10,5,6],[4,9,5,6,10,7,7,10,1,7,1,3],[5,6,10,0,9,1,8,7,4],[5,6,10,7,0,3,7,4,0],[10,5,6,4,8,7],[5,6,9,6,11,9,9,11,8],[0,9,5,0,5,3,3,5,6,3,6,11],[0,1,5,0,5,11,5,6,11,0,11,8],[11,3,6,6,3,5,3,1,5],[9,5,6,3,9,6,3,8,9,3,6,2],[5,6,9,9,6,0,6,2,0],[0,3,8,2,5,6,2,1,5],[1,6,2,1,5,6],[1,2,10,5,6,9,9,6,11,9,11,8],[1,0,9,6,10,5,11,3,2],[6,10,5,2,8,0,2,11,8],[3,2,11,10,5,6],[10,5,6,9,3,8,9,1,3],[0,9,1,5,6,10],[8,0,3,10,5,6],[10,5,6],[10,6,5],[8,3,0,10,6,5],[0,1,9,5,10,6],[10,6,5,9,8,3,9,3,1],[3,11,2,10,6,5],[6,5,10,2,0,8,2,8,11],[1,9,0,6,5,10,11,2,3],[1,10,2,5,9,6,9,11,6,9,8,11],[1,2,6,1,6,5],[0,8,3,2,6,5,2,5,1],[5,9,6,9,0,6,6,0,2],[9,6,5,3,6,9,3,9,8,3,2,6],[11,6,3,6,5,3,3,5,1],[0,5,1,0,11,5,5,11,6,0,8,11],[0,5,9,0,3,5,3,6,5,3,11,6],[5,9,6,6,9,11,9,8,11],[10,6,5,4,7,8],[5,10,6,7,3,0,7,0,4],[5,10,6,0,1,9,8,4,7],[4,5,9,6,7,10,7,1,10,7,3,1],[7,8,4,2,3,11,10,6,5],[11,6,7,10,2,5,2,4,5,2,0,4],[11,6,7,8,0,3,1,10,2,9,4,5],[6,7,11,1,10,2,9,4,5],[7,8,4,5,1,2,5,2,6],[4,1,0,4,5,1,6,7,3,6,3,2],[9,4,5,8,0,7,0,6,7,0,2,6],[4,5,9,6,3,2,6,7,3],[6,7,11,4,5,8,5,3,8,5,1,3],[6,7,11,4,1,0,4,5,1],[4,5,9,3,8,0,11,6,7],[9,4,5,7,11,6],[10,6,4,10,4,9],[8,3,0,9,10,6,9,6,4],[1,10,0,10,6,0,0,6,4],[8,6,4,8,1,6,6,1,10,8,3,1],[2,3,11,6,4,9,6,9,10],[0,10,2,0,9,10,4,8,11,4,11,6],[10,2,1,11,6,3,6,0,3,6,4,0],[10,2,1,11,4,8,11,6,4],[9,1,4,1,2,4,4,2,6],[1,0,9,3,2,8,2,4,8,2,6,4],[2,4,0,2,6,4],[3,2,8,8,2,4,2,6,4],[1,4,9,11,4,1,11,1,3,11,6,4],[0,9,1,4,11,6,4,8,11],[11,6,3,3,6,0,6,4,0],[8,6,4,8,11,6],[6,7,10,7,8,10,10,8,9],[9,3,0,6,3,9,6,9,10,6,7,3],[6,1,10,6,7,1,7,0,1,7,8,0],[6,7,10,10,7,1,7,3,1],[7,11,6,3,8,2,8,10,2,8,9,10],[11,6,7,10,0,9,10,2,0],[2,1,10,7,11,6,8,0,3],[1,10,2,6,7,11],[7,2,6,7,9,2,2,9,1,7,8,9],[1,0,9,3,6,7,3,2,6],[8,0,7,7,0,6,0,2,6],[2,7,3,2,6,7],[7,11,6,3,9,1,3,8,9],[9,1,0,11,6,7],[0,3,8,11,6,7],[11,6,7],[11,7,5,11,5,10],[3,0,8,7,5,10,7,10,11],[9,0,1,10,11,7,10,7,5],[3,1,9,3,9,8,7,10,11,7,5,10],[10,2,5,2,3,5,5,3,7],[5,10,2,8,5,2,8,7,5,8,2,0],[9,0,1,10,2,5,5,2,3,5,3,7],[1,10,2,5,8,7,5,9,8],[2,11,1,11,7,1,1,7,5],[0,8,3,2,11,1,1,11,7,1,7,5],[9,0,2,9,2,7,2,11,7,9,7,5],[11,3,2,8,5,9,8,7,5],[1,3,7,1,7,5],[8,7,0,0,7,1,7,5,1],[0,3,9,9,3,5,3,7,5],[9,7,5,9,8,7],[4,5,8,5,10,8,8,10,11],[3,0,4,3,4,10,4,5,10,3,10,11],[0,1,9,4,5,8,8,5,10,8,10,11],[5,9,4,1,11,3,1,10,11],[3,8,4,3,4,2,2,4,5,2,5,10],[10,2,5,5,2,4,2,0,4],[0,3,8,5,9,4,10,2,1],[2,1,10,9,4,5],[8,4,5,2,8,5,2,11,8,2,5,1],[3,2,11,1,4,5,1,0,4],[9,4,5,8,2,11,8,0,2],[11,3,2,9,4,5],[4,5,8,8,5,3,5,1,3],[5,0,4,5,1,0],[3,8,0,4,5,9],[9,4,5],[7,4,11,4,9,11,11,9,10],[3,0,8,7,4,11,11,4,9,11,9,10],[11,7,4,1,11,4,1,10,11,1,4,0],[8,7,4,11,1,10,11,3,1],[2,3,7,2,7,9,7,4,9,2,9,10],[4,8,7,0,10,2,0,9,10],[2,1,10,0,7,4,0,3,7],[10,2,1,8,7,4],[2,11,7,2,7,1,1,7,4,1,4,9],[3,2,11,4,8,7,9,1,0],[7,4,11,11,4,2,4,0,2],[2,11,3,7,4,8],[9,1,4,4,1,7,1,3,7],[1,0,9,8,7,4],[3,4,0,3,7,4],[8,7,4],[8,9,10,8,10,11],[0,9,3,3,9,11,9,10,11],[1,10,0,0,10,8,10,11,8],[10,3,1,10,11,3],[3,8,2,2,8,10,8,9,10],[9,2,0,9,10,2],[8,0,3,1,10,2],[10,2,1],[2,11,1,1,11,9,11,8,9],[11,3,2,0,9,1],[11,0,2,11,8,0],[11,3,2],[8,1,3,8,9,1],[9,1,0],[8,0,3],[]];return t}(),"undefined"==typeof console&&(console={log:function(){}}),n.ProteinSurface=function(){var e,t,r,o=1,a=2,s=4,l=0,c=0,u=0,h=1.4,d=2,f=d,p=0,v=0,m=0,g=0,y=null,b=null,x=null,w=0,C=0,S=0,A=0,T=0,z=0,M={H:1.2,Li:1.82,Na:2.27,K:2.75,C:1.7,N:1.55,O:1.52,F:1.47,P:1.8,S:1.8,CL:1.75,BR:1.85,SE:1.9,ZN:1.39,CU:1.4,NI:1.63,X:2},_=function(e){return e.elem&&"undefined"!=typeof M[e.elem]?e.elem:"X"},E={},D={},L=[new Int32Array([1,0,0]),new Int32Array([-1,0,0]),new Int32Array([0,1,0]),new Int32Array([0,-1,0]),new Int32Array([0,0,1]),new Int32Array([0,0,-1]),new Int32Array([1,1,0]),new Int32Array([1,-1,0]),new Int32Array([-1,1,0]),new Int32Array([-1,-1,0]),new Int32Array([1,0,1]),new Int32Array([1,0,-1]),new Int32Array([-1,0,1]),new Int32Array([-1,0,-1]),new Int32Array([0,1,1]),new Int32Array([0,1,-1]),new Int32Array([0,-1,1]),new Int32Array([0,-1,-1]),new Int32Array([1,1,1]),new Int32Array([1,1,-1]),new Int32Array([1,-1,1]),new Int32Array([-1,1,1]),new Int32Array([1,-1,-1]),new Int32Array([-1,-1,1]),new Int32Array([-1,1,-1]),new Int32Array([-1,-1,-1])];this.getFacesAndVertices=function(i){var r,n,o={};for(r=0,n=i.length;n>r;r++)o[i[r]]=!0;var a=t;for(r=0,n=a.length;n>r;r++)a[r].x=a[r].x/f-l,a[r].y=a[r].y/f-c,a[r].z=a[r].z/f-u;var s=[];for(r=0,n=e.length;n>r;r+=3){var h=e[r],d=e[r+1],p=e[r+2],v=a[h].atomid,m=a[d].atomid,g=a[p].atomid,w=v;if(w>m&&(w=m),w>g&&(w=g),o[w]){a[e[r]],a[e[r+1]],a[e[r+2]];h!==d&&d!==p&&h!==p&&(s.push(h),s.push(d),s.push(p))}}return y=null,b=null,x=null,{vertices:a,faces:s}},this.initparm=function(e,t,i){i>1e6&&(f=d/2);var n=1/f*5.5;r=e,w=e[0][0],A=e[1][0],C=e[0][1],T=e[1][1],S=e[0][2],z=e[1][2],t?(w-=h+n,C-=h+n,S-=h+n,A+=h+n,T+=h+n,z+=h+n):(w-=n,C-=n,S-=n,A+=n,T+=n,z+=n),w=Math.floor(w*f)/f,C=Math.floor(C*f)/f,S=Math.floor(S*f)/f,A=Math.ceil(A*f)/f,T=Math.ceil(T*f)/f,z=Math.ceil(z*f)/f,l=-w,c=-C,u=-S,m=Math.ceil(f*(A-w))+1,v=Math.ceil(f*(T-C))+1,p=Math.ceil(f*(z-S))+1,this.boundingatom(t),g=h*f,y=new Uint8Array(m*v*p),b=new Float64Array(m*v*p),x=new Int32Array(m*v*p),console.log("Box size: ",m,v,p,y.length)},this.boundingatom=function(e){var t,i,r,n=[];flagradius=e;for(var o in M)if(M.hasOwnProperty(o)){var a=M[o];for(e?n[o]=(a+h)*f+.5:n[o]=a*f+.5,r=n[o]*n[o],D[o]=Math.floor(n[o])+1,E[o]=new Int32Array(D[o]*D[o]),indx=0,j=0;j<D[o];j++)for(k=0;k<D[o];k++)t=j*j+k*k,t>r?E[o][indx]=-1:(i=Math.sqrt(r-t),E[o][indx]=Math.floor(i)),indx++}},this.fillvoxels=function(e,t){var i,r;for(i=0,r=y.length;r>i;i++)y[i]=0,b[i]=-1,x[i]=-1;for(i in t){var n=e[t[i]];void 0!==n&&this.fillAtom(n,e)}for(i=0,r=y.length;r>i;i++)y[i]&o&&(y[i]|=a)},this.fillAtom=function(e,t){var i,r,n,a,s,h,d,g,b,w,C,S,A,T,z,M,k,L,I;i=Math.floor(.5+f*(e.x+l)),r=Math.floor(.5+f*(e.y+c)),n=Math.floor(.5+f*(e.z+u));var N=_(e),O=0,P=v*p;for(w=0,I=D[N];I>w;w++)for(C=0;I>C;C++){if(-1!=E[N][O])for(M=-1;2>M;M++)for(k=-1;2>k;k++)for(L=-1;2>L;L++)if(0!==M&&0!==k&&0!==L)for(d=M*w,b=L*C,S=0;S<=E[N][O];S++)if(g=S*k,A=i+d,T=r+g,z=n+b,!(0>A||0>T||0>z||A>=m||T>=v||z>=p)){var R=A*P+T*p+z;if(y[R]&o){var F=t[x[R]];a=Math.floor(.5+f*(F.x+l)),s=Math.floor(.5+f*(F.y+c)),h=Math.floor(.5+f*(F.z+u)),a*a+s*s+h*h>d*d+g*g+b*b&&(x[R]=e.serial)}else y[R]|=o,x[R]=e.serial}O++}},this.fillvoxelswaals=function(e,t){var i,r;for(i=0,r=y.length;r>i;i++)y[i]&=~a;for(i in t){var n=e[t[i]];void 0!==n&&this.fillAtomWaals(n,e)}},this.fillAtomWaals=function(e,t){var i,r,n,o,s,h,d,g,b,w,C,S,A,T,z,M,k,L,I,N=0;i=Math.floor(.5+f*(e.x+l)),r=Math.floor(.5+f*(e.y+c)),n=Math.floor(.5+f*(e.z+u));var O=_(e),P=v*p;for(A=0,I=D[O];I>A;A++)for(T=0;I>T;T++){if(-1!=E[O][N])for(M=-1;2>M;M++)for(k=-1;2>k;k++)for(L=-1;2>L;L++)if(0!==M&&0!==k&&0!==L)for(d=M*A,b=L*T,z=0;z<=E[O][N];z++)if(g=z*k,w=i+d,C=r+g,S=n+b,!(0>w||0>C||0>S||w>=m||C>=v||S>=p)){var R=w*P+C*p+S;if(y[R]&a){var F=t[x[R]];o=Math.floor(.5+f*(F.x+l)),s=Math.floor(.5+f*(F.y+c)),h=Math.floor(.5+f*(F.z+u)),o*o+s*s+h*h>d*d+g*g+b*b&&(x[R]=e.serial)}else y[R]|=a,x[R]=e.serial}N++}},this.buildboundary=function(){var e=v*p;for(i=0;i<m;i++)for(j=0;j<p;j++)for(k=0;k<v;k++){var t=i*e+k*p+j;if(y[t]&o)for(var r=0;26>r;){var n=i+L[r][0],a=j+L[r][2],l=k+L[r][1];if(n>-1&&m>n&&l>-1&&v>l&&a>-1&&p>a&&!(y[n*e+l*p+a]&o)){y[t]|=s;break}r++}}};var I=function(e,t,i){var r=new Int32Array(e*t*i*3);this.set=function(e,n,o,a){var s=3*((e*t+n)*i+o);r[s]=a.ix,r[s+1]=a.iy,r[s+2]=a.iz},this.get=function(e,n,o){var a=3*((e*t+n)*i+o);return{ix:r[a],iy:r[a+1],iz:r[a+2]}}};this.fastdistancemap=function(){var e,t,i,r,n,l=new I(m,v,p),c=v*p,u=g*g,h=[],d=[];for(e=0;m>e;e++)for(t=0;v>t;t++)for(i=0;p>i;i++)if(n=e*c+t*p+i,y[n]&=~a,y[n]&o&&y[n]&s){var x={ix:e,iy:t,iz:i};l.set(e,t,i,x),h.push(x),b[n]=0,y[n]|=a,y[n]&=~s}do for(d=this.fastoneshell(h,l),h=[],e=0,r=d.length;r>e;e++)n=c*d[e].ix+p*d[e].iy+d[e].iz,y[n]&=~s,b[n]<=1.0404*u&&h.push({ix:d[e].ix,iy:d[e].iy,iz:d[e].iz});while(0!==h.length);h=[],d=[],l=null;var w=f-.5;0>w&&(w=0);var C=u-.5/(.1+w);for(e=0;m>e;e++)for(t=0;v>t;t++)for(i=0;p>i;i++)n=e*c+t*p+i,y[n]&=~s,y[n]&o&&(!(y[n]&a)||y[n]&a&&b[n]>=C)&&(y[n]|=s)},this.fastoneshell=function(e,t){var i,r,n,l,c,u,h,d,f,g,x,w,C=[];if(0===e.length)return C;tnv={ix:-1,iy:-1,iz:-1};var S=v*p;for(h=0,f=e.length;f>h;h++)for(i=e[h].ix,r=e[h].iy,n=e[h].iz,x=t.get(i,r,n),d=0;6>d;d++)tnv.ix=i+L[d][0],tnv.iy=r+L[d][1],tnv.iz=n+L[d][2],tnv.ix<m&&tnv.ix>-1&&tnv.iy<v&&tnv.iy>-1&&tnv.iz<p&&tnv.iz>-1&&(w=tnv.ix*S+p*tnv.iy+tnv.iz,y[w]&o&&!(y[w]&a)?(t.set(tnv.ix,tnv.iy,n+L[d][2],x),l=tnv.ix-x.ix,c=tnv.iy-x.iy,u=tnv.iz-x.iz,g=l*l+c*c+u*u,b[w]=g,y[w]|=a,y[w]|=s,C.push({ix:tnv.ix,iy:tnv.iy,iz:tnv.iz})):y[w]&o&&y[w]&a&&(l=tnv.ix-x.ix,c=tnv.iy-x.iy,u=tnv.iz-x.iz,g=l*l+c*c+u*u,g<b[w]&&(t.set(tnv.ix,tnv.iy,tnv.iz,x),b[w]=g,y[w]&s||(y[w]|=s,C.push({ix:tnv.ix,iy:tnv.iy,iz:tnv.iz})))));for(h=0,f=e.length;f>h;h++)for(i=e[h].ix,r=e[h].iy,n=e[h].iz,x=t.get(i,r,n),d=6;18>d;d++)tnv.ix=i+L[d][0],tnv.iy=r+L[d][1],tnv.iz=n+L[d][2],tnv.ix<m&&tnv.ix>-1&&tnv.iy<v&&tnv.iy>-1&&tnv.iz<p&&tnv.iz>-1&&(w=tnv.ix*S+p*tnv.iy+tnv.iz,y[w]&o&&!(y[w]&a)?(t.set(tnv.ix,tnv.iy,n+L[d][2],x),l=tnv.ix-x.ix,c=tnv.iy-x.iy,u=tnv.iz-x.iz,g=l*l+c*c+u*u,b[w]=g,y[w]|=a,y[w]|=s,C.push({ix:tnv.ix,iy:tnv.iy,iz:tnv.iz})):y[w]&o&&y[w]&a&&(l=tnv.ix-x.ix,c=tnv.iy-x.iy,u=tnv.iz-x.iz,g=l*l+c*c+u*u,g<b[w]&&(t.set(tnv.ix,tnv.iy,tnv.iz,x),b[w]=g,y[w]&s||(y[w]|=s,C.push({ix:tnv.ix,iy:tnv.iy,iz:tnv.iz})))));for(h=0,f=e.length;f>h;h++)for(i=e[h].ix,r=e[h].iy,n=e[h].iz,x=t.get(i,r,n),d=18;26>d;d++)tnv.ix=i+L[d][0],tnv.iy=r+L[d][1],tnv.iz=n+L[d][2],tnv.ix<m&&tnv.ix>-1&&tnv.iy<v&&tnv.iy>-1&&tnv.iz<p&&tnv.iz>-1&&(w=tnv.ix*S+p*tnv.iy+tnv.iz,y[w]&o&&!(y[w]&a)?(t.set(tnv.ix,tnv.iy,n+L[d][2],x),l=tnv.ix-x.ix,c=tnv.iy-x.iy,u=tnv.iz-x.iz,g=l*l+c*c+u*u,b[w]=g,y[w]|=a,y[w]|=s,C.push({ix:tnv.ix,iy:tnv.iy,iz:tnv.iz})):y[w]&o&&y[w]&a&&(l=tnv.ix-x.ix,c=tnv.iy-x.iy,u=tnv.iz-x.iz,g=l*l+c*c+u*u,g<b[w]&&(t.set(tnv.ix,tnv.iy,tnv.iz,x),b[w]=g,y[w]&s||(y[w]|=s,C.push({ix:tnv.ix,iy:tnv.iy,iz:tnv.iz})))));return C},this.marchingcubeinit=function(e){for(var t=0,i=y.length;i>t;t++)1==e?y[t]&=~s:4==e?(y[t]&=~a,y[t]&s&&(y[t]|=a),y[t]&=~s):2==e?y[t]&s&&y[t]&a?y[t]&=~s:y[t]&s&&!(y[t]&a)&&(y[t]|=a):3==e&&(y[t]&=~s)};this.marchingcube=function(i){this.marchingcubeinit(i),t=[],e=[],n.MarchingCube.march(y,t,e,{smooth:1,nX:m,nY:v,nZ:p});for(var r=v*p,o=0,a=t.length;a>o;o++)t[o].atomid=x[t[o].x*r+p*t[o].y+t[o].z];n.MarchingCube.laplacianSmooth(1,t,e)}},n=function(e){var t=e.$3Dmol||{};return t}(window),$.get("http://3dmol.csb.pitt.edu/track/report.cgi"),n.createViewer=function(e,t){if("string"===$.type(e)&&(e=$("#"+e)),e){t=t||{},t.defaultcolors||(t.defaultcolors=n.elementColors.defaultColors);try{return new n.GLViewer(e,t.callback,t.defaultcolors,t.nomouse)}catch(i){throw"error creating viewer: "+i}return null}},n.viewers={},n.download=function(e,t,i,r){var n="",o=t.addModel();if("pdb:"===e.substr(0,4)){if(n="pdb",e=e.substr(4).toUpperCase(),!e.match(/^[1-9][A-Za-z0-9]{3}$/))return void alert("Wrong PDB ID");uri="http://www.pdb.org/pdb/files/"+e+".pdb"}else if("cid:"==e.substr(0,4)){if(n="sdf",e=e.substr(4),!e.match(/^[1-9]+$/))return void alert("Wrong Compound ID");uri="http://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/"+e+"/SDF?record_type=3d"}return $.get(uri,function(e){o.addMolData(e,n,i),t.zoomTo(),t.render(),r&&r(o)}),o},n.SurfaceType={VDW:1,MS:2,SAS:3,SES:4},n.mergeGeos=function(e,t){var i=t.geometry;void 0!==i&&e.geometryGroups.push(i.geometryGroups[0])},n.multiLineString=function(e){return e.toString().replace(/^[^\/]+\/\*!?/,"").replace(/\*\/[^\/]+$/,"")},n.syncSurface=!1,(window.navigator.userAgent.indexOf("MSIE ")>=0||window.navigator.userAgent.indexOf("Trident/")>=0)&&(n.syncSurface=!0),n.specStringToObject=function(e){if("object"==typeof e)return e;if("undefined"==typeof e||null==e)return e;for(var t={},i=e.split(";"),r=0;r<i.length;r++){var n=i[r].split(":"),o=n[0],a={},s=n[1];if(s)if(s=s.replace(/~/g,"="),-1!==s.indexOf("="))for(var l=s.split(","),c=0;c<l.length;c++){var u=l[c].split("=",2);a[u[0]]=u[1]}else a=-1!==s.indexOf(",")?s.split(","):s;t[o]=a}return t},n.getExtent=function(e){var t,i,r,n,o,a,s,l,c,u;if(t=i=r=9999,n=o=a=-9999,s=l=c=u=0,0===e.length)return[[0,0,0],[0,0,0],[0,0,0]];for(var h=0;h<e.length;h++){var d=e[h];if(void 0!==d){if(u++,s+=d.x,l+=d.y,c+=d.z,d.symmetries)for(var f=0;f<d.symmetries.length;f++)s+=d.symmetries[f].x,l+=d.symmetries[f].y,c+=d.symmetries[f].x,u++,t=t<d.x?t:d.x,i=i<d.y?i:d.y,r=r<d.z?r:d.z,n=n>d.x?n:d.x,o=o>d.y?o:d.y,a=a>d.z?a:d.z;t=t<d.x?t:d.x,i=i<d.y?i:d.y,r=r<d.z?r:d.z,n=n>d.x?n:d.x,o=o>d.y?o:d.y,a=a>d.z?a:d.z}}return[[t,i,r],[n,o,a],[s/u,l/u,c/u]]},n.workerString='self.onmessage=function(oEvent){var obj=oEvent.data,type=obj.type;if(0>type)self.atomData=obj.atoms,self.volume=obj.volume,self.ps=new ProteinSurface;else{var ps=self.ps;ps.initparm(obj.expandedExtent,1==type?!1:!0,self.volume),ps.fillvoxels(self.atomData,obj.extendedAtoms),ps.buildboundary(),(4===type||2===type)&&(ps.fastdistancemap(),ps.boundingatom(!1),ps.fillvoxelswaals(self.atomData,obj.extendedAtoms)),ps.marchingcube(type);var VandF=ps.getFacesAndVertices(obj.atomsToShow);self.postMessage(VandF)}};var Vector3=function(x,y,z){this.x=x||0,this.y=y||0,this.z=z||0};Vector3.prototype={constructor:Vector3,copy:function(v){return this.x=v.x,this.y=v.y,this.z=v.z,this},multiplyScalar:function(s){return this.x*=s,this.y*=s,this.z*=s,this}};var ISDONE=2,ProteinSurface=function (){var faces,verts,origextent,INOUT=1,ISDONE=2,ISBOUND=4,ptranx=0,ptrany=0,ptranz=0,probeRadius=1.4,defaultScaleFactor=2,scaleFactor=defaultScaleFactor,pHeight=0,pWidth=0,pLength=0,cutRadius=0,vpBits=null,vpDistance=null,vpAtomID=null,pminx=0,pminy=0,pminz=0,pmaxx=0,pmaxy=0,pmaxz=0,vdwRadii={H:1.2,Li:1.82,Na:2.27,K:2.75,C:1.7,N:1.55,O:1.52,F:1.47,P:1.8,S:1.8,CL:1.75,BR:1.85,SE:1.9,ZN:1.39,CU:1.4,NI:1.63,X:2},getVDWIndex=function(atom){return atom.elem&&"undefined"!=typeof vdwRadii[atom.elem]?atom.elem:"X"},depty={},widxz={},nb=[new Int32Array([1,0,0]),new Int32Array([-1,0,0]),new Int32Array([0,1,0]),new Int32Array([0,-1,0]),new Int32Array([0,0,1]),new Int32Array([0,0,-1]),new Int32Array([1,1,0]),new Int32Array([1,-1,0]),new Int32Array([-1,1,0]),new Int32Array([-1,-1,0]),new Int32Array([1,0,1]),new Int32Array([1,0,-1]),new Int32Array([-1,0,1]),new Int32Array([-1,0,-1]),new Int32Array([0,1,1]),new Int32Array([0,1,-1]),new Int32Array([0,-1,1]),new Int32Array([0,-1,-1]),new Int32Array([1,1,1]),new Int32Array([1,1,-1]),new Int32Array([1,-1,1]),new Int32Array([-1,1,1]),new Int32Array([1,-1,-1]),new Int32Array([-1,-1,1]),new Int32Array([-1,1,-1]),new Int32Array([-1,-1,-1])];this.getFacesAndVertices=function(atomlist){var i,il,atomsToShow={};for(i=0,il=atomlist.length;il>i;i++)atomsToShow[atomlist[i]]=!0;var vertices=verts;for(i=0,il=vertices.length;il>i;i++)vertices[i].x=vertices[i].x/scaleFactor-ptranx,vertices[i].y=vertices[i].y/scaleFactor-ptrany,vertices[i].z=vertices[i].z/scaleFactor-ptranz;var finalfaces=[];for(i=0,il=faces.length;il>i;i+=3){var fa=faces[i],fb=faces[i+1],fc=faces[i+2],a=vertices[fa].atomid,b=vertices[fb].atomid,c=vertices[fc].atomid,which=a;if(which>b&&(which=b),which>c&&(which=c),atomsToShow[which]){{vertices[faces[i]],vertices[faces[i+1]],vertices[faces[i+2]]}fa!==fb&&fb!==fc&&fa!==fc&&(finalfaces.push(fa),finalfaces.push(fb),finalfaces.push(fc))}}return vpBits=null,vpDistance=null,vpAtomID=null,{vertices:vertices,faces:finalfaces}},this.initparm=function(extent,btype,volume){volume>1e6&&(scaleFactor=defaultScaleFactor/2);var margin=1/scaleFactor*5.5;origextent=extent,pminx=extent[0][0],pmaxx=extent[1][0],pminy=extent[0][1],pmaxy=extent[1][1],pminz=extent[0][2],pmaxz=extent[1][2],btype?(pminx-=probeRadius+margin,pminy-=probeRadius+margin,pminz-=probeRadius+margin,pmaxx+=probeRadius+margin,pmaxy+=probeRadius+margin,pmaxz+=probeRadius+margin):(pminx-=margin,pminy-=margin,pminz-=margin,pmaxx+=margin,pmaxy+=margin,pmaxz+=margin),pminx=Math.floor(pminx*scaleFactor)/scaleFactor,pminy=Math.floor(pminy*scaleFactor)/scaleFactor,pminz=Math.floor(pminz*scaleFactor)/scaleFactor,pmaxx=Math.ceil(pmaxx*scaleFactor)/scaleFactor,pmaxy=Math.ceil(pmaxy*scaleFactor)/scaleFactor,pmaxz=Math.ceil(pmaxz*scaleFactor)/scaleFactor,ptranx=-pminx,ptrany=-pminy,ptranz=-pminz,pLength=Math.ceil(scaleFactor*(pmaxx-pminx))+1,pWidth=Math.ceil(scaleFactor*(pmaxy-pminy))+1,pHeight=Math.ceil(scaleFactor*(pmaxz-pminz))+1,this.boundingatom(btype),cutRadius=probeRadius*scaleFactor,vpBits=new Uint8Array(pLength*pWidth*pHeight),vpDistance=new Float64Array(pLength*pWidth*pHeight),vpAtomID=new Int32Array(pLength*pWidth*pHeight)},this.boundingatom=function(btype){var txz,tdept,sradius,tradius=[];flagradius=btype;for(var i in vdwRadii)if(vdwRadii.hasOwnProperty(i)){var r=vdwRadii[i];for(tradius[i]=btype?(r+probeRadius)*scaleFactor+.5:r*scaleFactor+.5,sradius=tradius[i]*tradius[i],widxz[i]=Math.floor(tradius[i])+1,depty[i]=new Int32Array(widxz[i]*widxz[i]),indx=0,j=0;j<widxz[i];j++)for(k=0;k<widxz[i];k++)txz=j*j+k*k,txz>sradius?depty[i][indx]=-1:(tdept=Math.sqrt(sradius-txz),depty[i][indx]=Math.floor(tdept)),indx++}},this.fillvoxels=function(atoms,atomlist){var i,il;for(i=0,il=vpBits.length;il>i;i++)vpBits[i]=0,vpDistance[i]=-1,vpAtomID[i]=-1;for(i in atomlist){var atom=atoms[atomlist[i]];void 0!==atom&&this.fillAtom(atom,atoms)}for(i=0,il=vpBits.length;il>i;i++)vpBits[i]&INOUT&&(vpBits[i]|=ISDONE)},this.fillAtom=function(atom,atoms){var cx,cy,cz,ox,oy,oz,mi,mj,mk,i,j,k,si,sj,sk,ii,jj,kk,n;cx=Math.floor(.5+scaleFactor*(atom.x+ptranx)),cy=Math.floor(.5+scaleFactor*(atom.y+ptrany)),cz=Math.floor(.5+scaleFactor*(atom.z+ptranz));var at=getVDWIndex(atom),nind=0,pWH=pWidth*pHeight;for(i=0,n=widxz[at];n>i;i++)for(j=0;n>j;j++){if(-1!=depty[at][nind])for(ii=-1;2>ii;ii++)for(jj=-1;2>jj;jj++)for(kk=-1;2>kk;kk++)if(0!==ii&&0!==jj&&0!==kk)for(mi=ii*i,mk=kk*j,k=0;k<=depty[at][nind];k++)if(mj=k*jj,si=cx+mi,sj=cy+mj,sk=cz+mk,!(0>si||0>sj||0>sk||si>=pLength||sj>=pWidth||sk>=pHeight)){var index=si*pWH+sj*pHeight+sk;if(vpBits[index]&INOUT){var atom2=atoms[vpAtomID[index]];ox=Math.floor(.5+scaleFactor*(atom2.x+ptranx)),oy=Math.floor(.5+scaleFactor*(atom2.y+ptrany)),oz=Math.floor(.5+scaleFactor*(atom2.z+ptranz)),ox*ox+oy*oy+oz*oz>mi*mi+mj*mj+mk*mk&&(vpAtomID[index]=atom.serial)}else vpBits[index]|=INOUT,vpAtomID[index]=atom.serial}nind++}},this.fillvoxelswaals=function(atoms,atomlist){var i,il;for(i=0,il=vpBits.length;il>i;i++)vpBits[i]&=~ISDONE;for(i in atomlist){var atom=atoms[atomlist[i]];void 0!==atom&&this.fillAtomWaals(atom,atoms)}},this.fillAtomWaals=function(atom,atoms){var cx,cy,cz,ox,oy,oz,mi,mj,mk,si,sj,sk,i,j,k,ii,jj,kk,n,nind=0;cx=Math.floor(.5+scaleFactor*(atom.x+ptranx)),cy=Math.floor(.5+scaleFactor*(atom.y+ptrany)),cz=Math.floor(.5+scaleFactor*(atom.z+ptranz));var at=getVDWIndex(atom),pWH=pWidth*pHeight;for(i=0,n=widxz[at];n>i;i++)for(j=0;n>j;j++){if(-1!=depty[at][nind])for(ii=-1;2>ii;ii++)for(jj=-1;2>jj;jj++)for(kk=-1;2>kk;kk++)if(0!==ii&&0!==jj&&0!==kk)for(mi=ii*i,mk=kk*j,k=0;k<=depty[at][nind];k++)if(mj=k*jj,si=cx+mi,sj=cy+mj,sk=cz+mk,!(0>si||0>sj||0>sk||si>=pLength||sj>=pWidth||sk>=pHeight)){var index=si*pWH+sj*pHeight+sk;if(vpBits[index]&ISDONE){var atom2=atoms[vpAtomID[index]];ox=Math.floor(.5+scaleFactor*(atom2.x+ptranx)),oy=Math.floor(.5+scaleFactor*(atom2.y+ptrany)),oz=Math.floor(.5+scaleFactor*(atom2.z+ptranz)),ox*ox+oy*oy+oz*oz>mi*mi+mj*mj+mk*mk&&(vpAtomID[index]=atom.serial)}else vpBits[index]|=ISDONE,vpAtomID[index]=atom.serial}nind++}},this.buildboundary=function(){var pWH=pWidth*pHeight;for(i=0;pLength>i;i++)for(j=0;pHeight>j;j++)for(k=0;pWidth>k;k++){var index=i*pWH+k*pHeight+j;if(vpBits[index]&INOUT)for(var ii=0;26>ii;){var ti=i+nb[ii][0],tj=j+nb[ii][2],tk=k+nb[ii][1];if(ti>-1&&pLength>ti&&tk>-1&&pWidth>tk&&tj>-1&&pHeight>tj&&!(vpBits[ti*pWH+tk*pHeight+tj]&INOUT)){vpBits[index]|=ISBOUND;break}ii++}}};var PointGrid=function(length,width,height){var data=new Int32Array(length*width*height*3);this.set=function(x,y,z,pt){var index=3*((x*width+y)*height+z);data[index]=pt.ix,data[index+1]=pt.iy,data[index+2]=pt.iz},this.get=function(x,y,z){var index=3*((x*width+y)*height+z);return{ix:data[index],iy:data[index+1],iz:data[index+2]}}};this.fastdistancemap=function(){var i,j,k,n,index,boundPoint=new PointGrid(pLength,pWidth,pHeight),pWH=pWidth*pHeight,cutRSq=cutRadius*cutRadius,inarray=[],outarray=[];for(i=0;pLength>i;i++)for(j=0;pWidth>j;j++)for(k=0;pHeight>k;k++)if(index=i*pWH+j*pHeight+k,vpBits[index]&=~ISDONE,vpBits[index]&INOUT&&vpBits[index]&ISBOUND){var triple={ix:i,iy:j,iz:k};boundPoint.set(i,j,k,triple),inarray.push(triple),vpDistance[index]=0,vpBits[index]|=ISDONE,vpBits[index]&=~ISBOUND}do for(outarray=this.fastoneshell(inarray,boundPoint),inarray=[],i=0,n=outarray.length;n>i;i++)index=pWH*outarray[i].ix+pHeight*outarray[i].iy+outarray[i].iz,vpBits[index]&=~ISBOUND,vpDistance[index]<=1.0404*cutRSq&&inarray.push({ix:outarray[i].ix,iy:outarray[i].iy,iz:outarray[i].iz});while(0!==inarray.length);inarray=[],outarray=[],boundPoint=null;var cutsf=scaleFactor-.5;0>cutsf&&(cutsf=0);var cutoff=cutRSq-.5/(.1+cutsf);for(i=0;pLength>i;i++)for(j=0;pWidth>j;j++)for(k=0;pHeight>k;k++)index=i*pWH+j*pHeight+k,vpBits[index]&=~ISBOUND,vpBits[index]&INOUT&&(!(vpBits[index]&ISDONE)||vpBits[index]&ISDONE&&vpDistance[index]>=cutoff)&&(vpBits[index]|=ISBOUND)},this.fastoneshell=function(inarray,boundPoint){var tx,ty,tz,dx,dy,dz,i,j,n,square,bp,index,outarray=[];if(0===inarray.length)return outarray;tnv={ix:-1,iy:-1,iz:-1};var pWH=pWidth*pHeight;for(i=0,n=inarray.length;n>i;i++)for(tx=inarray[i].ix,ty=inarray[i].iy,tz=inarray[i].iz,bp=boundPoint.get(tx,ty,tz),j=0;6>j;j++)tnv.ix=tx+nb[j][0],tnv.iy=ty+nb[j][1],tnv.iz=tz+nb[j][2],tnv.ix<pLength&&tnv.ix>-1&&tnv.iy<pWidth&&tnv.iy>-1&&tnv.iz<pHeight&&tnv.iz>-1&&(index=tnv.ix*pWH+pHeight*tnv.iy+tnv.iz,vpBits[index]&INOUT&&!(vpBits[index]&ISDONE)?(boundPoint.set(tnv.ix,tnv.iy,tz+nb[j][2],bp),dx=tnv.ix-bp.ix,dy=tnv.iy-bp.iy,dz=tnv.iz-bp.iz,square=dx*dx+dy*dy+dz*dz,vpDistance[index]=square,vpBits[index]|=ISDONE,vpBits[index]|=ISBOUND,outarray.push({ix:tnv.ix,iy:tnv.iy,iz:tnv.iz})):vpBits[index]&INOUT&&vpBits[index]&ISDONE&&(dx=tnv.ix-bp.ix,dy=tnv.iy-bp.iy,dz=tnv.iz-bp.iz,square=dx*dx+dy*dy+dz*dz,square<vpDistance[index]&&(boundPoint.set(tnv.ix,tnv.iy,tnv.iz,bp),vpDistance[index]=square,vpBits[index]&ISBOUND||(vpBits[index]|=ISBOUND,outarray.push({ix:tnv.ix,iy:tnv.iy,iz:tnv.iz})))));for(i=0,n=inarray.length;n>i;i++)for(tx=inarray[i].ix,ty=inarray[i].iy,tz=inarray[i].iz,bp=boundPoint.get(tx,ty,tz),j=6;18>j;j++)tnv.ix=tx+nb[j][0],tnv.iy=ty+nb[j][1],tnv.iz=tz+nb[j][2],tnv.ix<pLength&&tnv.ix>-1&&tnv.iy<pWidth&&tnv.iy>-1&&tnv.iz<pHeight&&tnv.iz>-1&&(index=tnv.ix*pWH+pHeight*tnv.iy+tnv.iz,vpBits[index]&INOUT&&!(vpBits[index]&ISDONE)?(boundPoint.set(tnv.ix,tnv.iy,tz+nb[j][2],bp),dx=tnv.ix-bp.ix,dy=tnv.iy-bp.iy,dz=tnv.iz-bp.iz,square=dx*dx+dy*dy+dz*dz,vpDistance[index]=square,vpBits[index]|=ISDONE,vpBits[index]|=ISBOUND,outarray.push({ix:tnv.ix,iy:tnv.iy,iz:tnv.iz})):vpBits[index]&INOUT&&vpBits[index]&ISDONE&&(dx=tnv.ix-bp.ix,dy=tnv.iy-bp.iy,dz=tnv.iz-bp.iz,square=dx*dx+dy*dy+dz*dz,square<vpDistance[index]&&(boundPoint.set(tnv.ix,tnv.iy,tnv.iz,bp),vpDistance[index]=square,vpBits[index]&ISBOUND||(vpBits[index]|=ISBOUND,outarray.push({ix:tnv.ix,iy:tnv.iy,iz:tnv.iz})))));for(i=0,n=inarray.length;n>i;i++)for(tx=inarray[i].ix,ty=inarray[i].iy,tz=inarray[i].iz,bp=boundPoint.get(tx,ty,tz),j=18;26>j;j++)tnv.ix=tx+nb[j][0],tnv.iy=ty+nb[j][1],tnv.iz=tz+nb[j][2],tnv.ix<pLength&&tnv.ix>-1&&tnv.iy<pWidth&&tnv.iy>-1&&tnv.iz<pHeight&&tnv.iz>-1&&(index=tnv.ix*pWH+pHeight*tnv.iy+tnv.iz,vpBits[index]&INOUT&&!(vpBits[index]&ISDONE)?(boundPoint.set(tnv.ix,tnv.iy,tz+nb[j][2],bp),dx=tnv.ix-bp.ix,dy=tnv.iy-bp.iy,dz=tnv.iz-bp.iz,square=dx*dx+dy*dy+dz*dz,vpDistance[index]=square,vpBits[index]|=ISDONE,vpBits[index]|=ISBOUND,outarray.push({ix:tnv.ix,iy:tnv.iy,iz:tnv.iz})):vpBits[index]&INOUT&&vpBits[index]&ISDONE&&(dx=tnv.ix-bp.ix,dy=tnv.iy-bp.iy,dz=tnv.iz-bp.iz,square=dx*dx+dy*dy+dz*dz,square<vpDistance[index]&&(boundPoint.set(tnv.ix,tnv.iy,tnv.iz,bp),vpDistance[index]=square,vpBits[index]&ISBOUND||(vpBits[index]|=ISBOUND,outarray.push({ix:tnv.ix,iy:tnv.iy,iz:tnv.iz})))));return outarray},this.marchingcubeinit=function(stype){for(var i=0,lim=vpBits.length;lim>i;i++)1==stype?vpBits[i]&=~ISBOUND:4==stype?(vpBits[i]&=~ISDONE,vpBits[i]&ISBOUND&&(vpBits[i]|=ISDONE),vpBits[i]&=~ISBOUND):2==stype?vpBits[i]&ISBOUND&&vpBits[i]&ISDONE?vpBits[i]&=~ISBOUND:vpBits[i]&ISBOUND&&!(vpBits[i]&ISDONE)&&(vpBits[i]|=ISDONE):3==stype&&(vpBits[i]&=~ISBOUND)};this.marchingcube=function(stype){this.marchingcubeinit(stype),verts=[],faces=[],march(vpBits,verts,faces,{smooth:1,nX:pLength,nY:pWidth,nZ:pHeight});for(var pWH=pWidth*pHeight,i=0,vlen=verts.length;vlen>i;i++)verts[i].atomid=vpAtomID[verts[i].x*pWH+pHeight*verts[i].y+verts[i].z];laplacianSmooth(1,verts,faces)}},march=function (data,verts,faces,spec){var i,il,fulltable=!!spec.fulltable,origin=spec.hasOwnProperty("origin")&&spec.origin.hasOwnProperty("x")?spec.origin:{x:0,y:0,z:0},voxel=!!spec.voxel,nX=spec.nX||0,nY=spec.nY||0,nZ=spec.nZ||0,scale=spec.scale||1,unitCube=new Vector3(1,1,1).multiplyScalar(scale),vertnums=new Int32Array(nX*nY*nZ);for(i=0,il=vertnums.length;il>i;++i)vertnums[i]=-1;var getVertex=function(i,j,k,code,p1,p2){var pt=new Vector3;pt.copy(origin);var val1=!!(code&1<<p1),val2=!!(code&1<<p2),p=p1;!val1&&val2&&(p=p2),1&p&&k++,2&p&&j++,4&p&&i++,pt.x+=unitCube.x*i,pt.y+=unitCube.y*j,pt.z+=unitCube.z*k;var index=(nY*i+j)*nZ+k;return voxel?(verts.push(pt),verts.length-1):(vertnums[index]<0&&(vertnums[index]=verts.length,verts.push(pt)),vertnums[index])},intersects=new Int32Array(12),etable=fulltable?edgeTable2:edgeTable,tritable=fulltable?triTable2:triTable;for(i=0;nX-1>i;++i)for(var j=0;nY-1>j;++j)for(var k=0;nZ-1>k;++k){for(var code=0,p=0;8>p;++p){var index=(nY*(i+((4&p)>>2))+j+((2&p)>>1))*nZ+k+(1&p),val=!!(data[index]&ISDONE);code|=val<<p}if(0!==code&&255!==code){var ecode=etable[code];if(0!==ecode){var ttable=tritable[code];1&ecode&&(intersects[0]=getVertex(i,j,k,code,0,1)),2&ecode&&(intersects[1]=getVertex(i,j,k,code,1,3)),4&ecode&&(intersects[2]=getVertex(i,j,k,code,3,2)),8&ecode&&(intersects[3]=getVertex(i,j,k,code,2,0)),16&ecode&&(intersects[4]=getVertex(i,j,k,code,4,5)),32&ecode&&(intersects[5]=getVertex(i,j,k,code,5,7)),64&ecode&&(intersects[6]=getVertex(i,j,k,code,7,6)),128&ecode&&(intersects[7]=getVertex(i,j,k,code,6,4)),256&ecode&&(intersects[8]=getVertex(i,j,k,code,0,4)),512&ecode&&(intersects[9]=getVertex(i,j,k,code,1,5)),1024&ecode&&(intersects[10]=getVertex(i,j,k,code,3,7)),2048&ecode&&(intersects[11]=getVertex(i,j,k,code,2,6));for(var t=0;t<ttable.length;t+=3){var a=intersects[ttable[t]],b=intersects[ttable[t+1]],c=intersects[ttable[t+2]];voxel&&t>=3&&(verts.push(verts[a]),a=verts.length-1,verts.push(verts[b]),b=verts.length-1,verts.push(verts[c]),c=verts.length-1),faces.push(a),faces.push(b),faces.push(c)}}}}},laplacianSmooth=function (numiter,verts,faces){var i,il,j,jl,k,tps=new Array(verts.length);for(i=0,il=verts.length;il>i;i++)tps[i]={x:0,y:0,z:0};var flagvert,vertdeg=new Array(20);for(i=0;20>i;i++)vertdeg[i]=new Array(verts.length);for(i=0,il=verts.length;il>i;i++)vertdeg[0][i]=0;for(i=0,il=faces.length/3;il>i;i++){var aoffset=3*i,boffset=3*i+1,coffset=3*i+2;for(flagvert=!0,j=0,jl=vertdeg[0][faces[aoffset]];jl>j;j++)if(faces[boffset]==vertdeg[j+1][faces[aoffset]]){flagvert=!1;break}for(flagvert&&(vertdeg[0][faces[aoffset]]++,vertdeg[vertdeg[0][faces[aoffset]]][faces[aoffset]]=faces[boffset]),flagvert=!0,j=0,jl=vertdeg[0][faces[aoffset]];jl>j;j++)if(faces[coffset]==vertdeg[j+1][faces[aoffset]]){flagvert=!1;break}for(flagvert&&(vertdeg[0][faces[aoffset]]++,vertdeg[vertdeg[0][faces[aoffset]]][faces[aoffset]]=faces[coffset]),flagvert=!0,j=0,jl=vertdeg[0][faces[boffset]];jl>j;j++)if(faces[aoffset]==vertdeg[j+1][faces[boffset]]){flagvert=!1;break}for(flagvert&&(vertdeg[0][faces[boffset]]++,vertdeg[vertdeg[0][faces[boffset]]][faces[boffset]]=faces[aoffset]),flagvert=!0,j=0,jl=vertdeg[0][faces[boffset]];jl>j;j++)if(faces[coffset]==vertdeg[j+1][faces[boffset]]){flagvert=!1;break}for(flagvert&&(vertdeg[0][faces[boffset]]++,vertdeg[vertdeg[0][faces[boffset]]][faces[boffset]]=faces[coffset]),flagvert=!0,j=0;j<vertdeg[0][faces[coffset]];j++)if(faces[aoffset]==vertdeg[j+1][faces[coffset]]){flagvert=!1;break}for(flagvert&&(vertdeg[0][faces[coffset]]++,vertdeg[vertdeg[0][faces[coffset]]][faces[coffset]]=faces[aoffset]),flagvert=!0,j=0,jl=vertdeg[0][faces[coffset]];jl>j;j++)if(faces[boffset]==vertdeg[j+1][faces[coffset]]){flagvert=!1;break}flagvert&&(vertdeg[0][faces[coffset]]++,vertdeg[vertdeg[0][faces[coffset]]][faces[coffset]]=faces[boffset])}var wt=1,wt2=.5;for(k=0;numiter>k;k++){for(i=0,il=verts.length;il>i;i++)if(vertdeg[0][i]<3)tps[i].x=verts[i].x,tps[i].y=verts[i].y,tps[i].z=verts[i].z;else if(3==vertdeg[0][i]||4==vertdeg[0][i]){for(tps[i].x=0,tps[i].y=0,tps[i].z=0,j=0,jl=vertdeg[0][i];jl>j;j++)tps[i].x+=verts[vertdeg[j+1][i]].x,tps[i].y+=verts[vertdeg[j+1][i]].y,tps[i].z+=verts[vertdeg[j+1][i]].z;tps[i].x+=wt2*verts[i].x,tps[i].y+=wt2*verts[i].y,tps[i].z+=wt2*verts[i].z,tps[i].x/=wt2+vertdeg[0][i],tps[i].y/=wt2+vertdeg[0][i],tps[i].z/=wt2+vertdeg[0][i]}else{for(tps[i].x=0,tps[i].y=0,tps[i].z=0,j=0,jl=vertdeg[0][i];jl>j;j++)tps[i].x+=verts[vertdeg[j+1][i]].x,tps[i].y+=verts[vertdeg[j+1][i]].y,tps[i].z+=verts[vertdeg[j+1][i]].z;tps[i].x+=wt*verts[i].x,tps[i].y+=wt*verts[i].y,tps[i].z+=wt*verts[i].z,tps[i].x/=wt+vertdeg[0][i],tps[i].y/=wt+vertdeg[0][i],tps[i].z/=wt+vertdeg[0][i]}for(i=0,il=verts.length;il>i;i++)verts[i].x=tps[i].x,verts[i].y=tps[i].y,verts[i].z=tps[i].z}},edgeTable=new Uint32Array([0,0,0,0,0,0,0,2816,0,0,0,1792,0,3328,3584,3840,0,0,0,138,0,21,0,134,0,0,0,652,0,2067,3865,3600,0,0,0,42,0,0,0,294,0,0,21,28,0,3875,1049,3360,0,168,162,170,0,645,2475,2210,0,687,293,172,4010,3747,3497,3232,0,0,0,0,0,69,0,900,0,0,0,1792,138,131,1608,1920,0,81,0,2074,84,85,84,86,0,81,0,3676,330,1105,1881,1616,0,0,0,42,0,69,0,502,0,0,21,3580,138,2035,1273,1520,2816,104,2337,106,840,581,367,102,2816,3695,3429,3180,1898,1635,1385,1120,0,0,0,0,0,0,0,3910,0,0,69,588,42,2083,41,2880,0,0,0,1722,0,2293,4095,3830,0,255,757,764,2538,2291,3065,2800,0,0,81,338,0,3925,1119,3414,84,855,85,340,2130,2899,89,2384,1792,712,194,1162,4036,3781,3535,3270,708,719,197,204,3018,2755,2505,2240,0,0,0,0,168,420,168,1958,162,162,676,2988,170,163,680,928,3328,3096,3328,3642,52,53,1855,1590,2340,2111,2869,2620,298,51,825,560,3584,3584,3090,3482,1668,1941,1183,1430,146,2975,2069,2460,154,915,153,400,3840,3592,3329,3082,1796,1541,1295,1030,2818,2575,2309,2060,778,515,265,0]),triTable=[[],[],[],[],[],[],[],[11,9,8],[],[],[],[8,10,9],[],[10,8,11],[9,11,10],[8,10,9,8,11,10],[],[],[],[1,7,3],[],[4,2,0],[],[2,1,7],[],[],[],[2,7,3,2,9,7],[],[1,4,11,1,0,4],[3,8,0,11,9,4,11,10,9],[4,11,9,11,10,9],[],[],[],[5,3,1],[],[],[],[2,5,8,2,1,5],[],[],[2,4,0],[3,2,4],[],[0,9,1,8,10,5,8,11,10],[3,4,0,3,10,4],[5,8,10,8,11,10],[],[3,5,7],[7,1,5],[1,7,3,1,5,7],[],[9,2,0,9,7,2],[0,3,8,1,7,11,1,5,7],[11,1,7,1,5,7],[],[9,1,0,5,3,2,5,7,3],[8,2,5,8,0,2],[2,5,3,5,7,3],[3,9,1,3,8,9,7,11,10,7,10,5],[9,1,0,10,7,11,10,5,7],[3,8,0,7,10,5,7,11,10],[11,5,7,11,10,5],[],[],[],[],[],[0,6,2],[],[7,2,9,7,9,8],[],[],[],[8,10,9],[7,1,3],[7,1,0],[6,9,3,6,10,9],[7,10,8,10,9,8],[],[6,0,4],[],[11,1,4,11,3,1],[2,4,6],[2,0,4,2,4,6],[2,4,6],[1,4,2,4,6,2],[],[6,0,4],[],[2,11,3,6,9,4,6,10,9],[8,6,1,8,1,3],[10,0,6,0,4,6],[8,0,3,9,6,10,9,4,6],[10,4,6,10,9,4],[],[],[],[5,3,1],[],[0,6,2],[],[7,4,8,5,2,1,5,6,2],[],[],[2,4,0],[7,4,8,2,11,3,10,5,6],[7,1,3],[5,6,10,0,9,1,8,7,4],[5,6,10,7,0,3,7,4,0],[10,5,6,4,8,7],[9,11,8],[3,5,6],[0,5,11,0,11,8],[6,3,5,3,1,5],[3,9,6,3,8,9],[9,6,0,6,2,0],[0,3,8,2,5,6,2,1,5],[1,6,2,1,5,6],[9,11,8],[1,0,9,6,10,5,11,3,2],[6,10,5,2,8,0,2,11,8],[3,2,11,10,5,6],[10,5,6,9,3,8,9,1,3],[0,9,1,5,6,10],[8,0,3,10,5,6],[10,5,6],[],[],[],[],[],[],[],[1,10,2,9,11,6,9,8,11],[],[],[6,0,2],[3,6,9,3,2,6],[3,5,1],[0,5,1,0,11,5],[0,3,5],[6,9,11,9,8,11],[],[],[],[4,5,9,7,1,10,7,3,1],[],[11,6,7,2,4,5,2,0,4],[11,6,7,8,0,3,1,10,2,9,4,5],[6,7,11,1,10,2,9,4,5],[],[4,1,0,4,5,1,6,7,3,6,3,2],[9,4,5,0,6,7,0,2,6],[4,5,9,6,3,2,6,7,3],[6,7,11,5,3,8,5,1,3],[6,7,11,4,1,0,4,5,1],[4,5,9,3,8,0,11,6,7],[9,4,5,7,11,6],[],[],[0,6,4],[8,6,4,8,1,6],[],[0,10,2,0,9,10,4,8,11,4,11,6],[10,2,1,6,0,3,6,4,0],[10,2,1,11,4,8,11,6,4],[4,2,6],[1,0,9,2,4,8,2,6,4],[2,4,0,2,6,4],[8,2,4,2,6,4],[11,4,1,11,6,4],[0,9,1,4,11,6,4,8,11],[3,6,0,6,4,0],[8,6,4,8,11,6],[10,8,9],[6,3,9,6,7,3],[6,7,1],[10,7,1,7,3,1],[7,11,6,8,10,2,8,9,10],[11,6,7,10,0,9,10,2,0],[2,1,10,7,11,6,8,0,3],[1,10,2,6,7,11],[7,2,6,7,9,2],[1,0,9,3,6,7,3,2,6],[7,0,6,0,2,6],[2,7,3,2,6,7],[7,11,6,3,9,1,3,8,9],[9,1,0,11,6,7],[0,3,8,11,6,7],[11,6,7],[],[],[],[],[5,3,7],[8,5,2,8,7,5],[5,3,7],[1,10,2,5,8,7,5,9,8],[1,7,5],[1,7,5],[9,2,7,9,7,5],[11,3,2,8,5,9,8,7,5],[1,3,7,1,7,5],[0,7,1,7,5,1],[9,3,5,3,7,5],[9,7,5,9,8,7],[8,10,11],[3,4,10,3,10,11],[8,10,11],[5,9,4,1,11,3,1,10,11],[2,4,5],[5,2,4,2,0,4],[0,3,8,5,9,4,10,2,1],[2,1,10,9,4,5],[2,8,5,2,11,8],[3,2,11,1,4,5,1,0,4],[9,4,5,8,2,11,8,0,2],[11,3,2,9,4,5],[8,5,3,5,1,3],[5,0,4,5,1,0],[3,8,0,4,5,9],[9,4,5],[11,9,10],[11,9,10],[1,11,4,1,10,11],[8,7,4,11,1,10,11,3,1],[2,7,9,2,9,10],[4,8,7,0,10,2,0,9,10],[2,1,10,0,7,4,0,3,7],[10,2,1,8,7,4],[1,7,4],[3,2,11,4,8,7,9,1,0],[11,4,2,4,0,2],[2,11,3,7,4,8],[4,1,7,1,3,7],[1,0,9,8,7,4],[3,4,0,3,7,4],[8,7,4],[8,9,10,8,10,11],[3,9,11,9,10,11],[0,10,8,10,11,8],[10,3,1,10,11,3],[2,8,10,8,9,10],[9,2,0,9,10,2],[8,0,3,1,10,2],[10,2,1],[1,11,9,11,8,9],[11,3,2,0,9,1],[11,0,2,11,8,0],[11,3,2],[8,1,3,8,9,1],[9,1,0],[8,0,3],[]]',
n.SurfaceWorker=window.URL.createObjectURL(new Blob([n.workerString],{type:"text/javascript"})),n.workerString=n.workerString,n.SurfaceWorker=n.SurfaceWorker,$(document).ready(function(){if(void 0!==$(".viewer_3Dmoljs")[0]&&(n.autoinit=!0),n.autoinit){n.viewers={};var e=0;$(".viewer_3Dmoljs").each(function(){var t=$(this),i=null,r="function"==typeof window[t.data("callback")]?window[t.data("callback")]:null,o=null;t.data("pdb")?(i="http://www.pdb.org/pdb/files/"+t.data("pdb")+".pdb",o="pdb"):t.data("cid")?(o="sdf",i="http://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/"+t.data("cid")+"/SDF?record_type=3d"):t.data("href")&&(i=t.data("href"));var a=Number(t.data("backgroundcolor"))||0,s={line:{}};t.data("style")&&(s=n.specStringToObject(t.data("style")));var l={};t.data("select")&&(l=n.specStringToObject(t.data("select")));var c=[],u=[],h=[],d=t.data(),f=/style(.+)/,p=/surface(.*)/,v=/labelres(.*)/,m=[];for(var g in d)d.hasOwnProperty(g)&&m.push(g);m.sort();for(var y=0;y<m.length;y++){var g=m[y],b=f.exec(g);if(b){var x="select"+b[1],w=n.specStringToObject(d[x]),C=n.specStringToObject(d[g]);c.push([w,C])}if(b=p.exec(g)){var x="select"+b[1],w=n.specStringToObject(d[x]),C=n.specStringToObject(d[g]);u.push([w,C])}if(b=v.exec(g)){var x="select"+b[1],w=n.specStringToObject(d[x]),C=n.specStringToObject(d[g]);h.push([w,C])}}try{var S=n.viewers[this.id||e++]=n.createViewer(t,{defaultcolors:n.rasmolElementColors,callback:function(e){e.setBackgroundColor(a)}})}catch(A){window.location="http://get.webgl.org"}if(i)o=t.data("type")||t.data("datatype")||o,o||(o=i.substr(i.lastIndexOf(".")+1)),$.get(i,function(e){S.addModel(e,o),S.setStyle(l,s);for(var t=0;t<c.length;t++){var i=c[t][0]||{},a=c[t][1]||{line:{}};S.setStyle(i,a)}for(var t=0;t<u.length;t++){var i=u[t][0]||{},a=u[t][1]||{};S.addSurface(n.SurfaceType.VDW,a,i,i)}for(var t=0;t<h.length;t++){var i=h[t][0]||{},a=h[t][1]||{};S.addResLabels(i,a)}r&&r(S),S.zoomTo(),S.render()},"text");else{if(t.data("element")){var T=$("#"+t.data("element")).val()||"",o=t.data("type")||t.data("datatype");o||(console.log("Warning: No type specified for embedded viewer with moldata from "+t.data("element")+"\n assuming type 'pdb'"),o="pdb"),S.addModel(T,o),S.setStyle(l,s);for(var y=0;y<c.length;y++){var z=c[y][0]||{},M=c[y][1]||{line:{}};S.setStyle(z,M)}}r&&r(S),S.zoomTo(),S.render()}})}}),n.CC={cache:{},color:function(e){if("undefined"!=typeof this.cache[e])return this.cache[e];e=this.getHex(e);var t=new n.Color(e);return this.cache[e]=t,t},colorTab:{white:16777215,silver:12632256,gray:8421504,grey:8421504,black:0,red:16711680,maroon:8388608,yellow:16776960,orange:16737792,olive:8421376,lime:65280,green:32768,aqua:65535,cyan:65535,teal:32896,blue:255,navy:128,fuchsia:16711935,magenta:16711935,purple:8388736},getHex:function(e){return parseInt(e)?parseInt(e):"string"==typeof e?this.colorTab[e.trim().toLowerCase()]||0:void 0}},n.CC=n.CC,n.CC.color=n.CC.color,n.getColorFromStyle=function(e,t){var i=e.color;if("undefined"!=typeof t.color&&"spectrum"!=t.color&&(i=t.color),"undefined"!=typeof t.colorscheme)if("undefined"!=typeof n.elementColors[t.colorscheme]){var r=n.elementColors[t.colorscheme];"undefined"!=typeof r[e.elem]&&(i=r[e.elem])}else"undefined"!=typeof t.colorscheme[e.elem]&&(i=t.colorscheme[e.elem]);var o=n.CC.color(i);return o},n.elementColors=n.elementColors||{},n.elementColors.defaultColor=16716947,n.elementColors.Jmol={H:16777215,He:14286847,HE:14286847,Li:13402367,LI:13402367,B:16758197,C:9474192,N:3166456,O:16715021,F:9494608,Na:11230450,NA:11230450,Mg:9109248,MG:9109248,Al:12560038,AL:12560038,Si:1578e4,SI:1578e4,P:16744448,S:16777008,Cl:2093087,CL:2093087,Ca:4062976,CA:4062976,Ti:12567239,TI:12567239,Cr:9083335,CR:9083335,Mn:10255047,MN:10255047,Fe:14706227,FE:14706227,Ni:5296208,NI:5296208,Cu:13140019,CU:13140019,Zn:8224944,ZN:8224944,Br:10889513,BR:10889513,Ag:12632256,AG:12632256,I:9699476,Ba:51456,BA:51456,Au:16765219,AU:16765219},n.elementColors.rasmol={H:16777215,He:16761035,HE:16761035,Li:11674146,LI:11674146,B:65280,C:13158600,N:9408511,O:15728640,F:14329120,Na:255,NA:255,Mg:2263842,MG:2263842,Al:8421520,AL:8421520,Si:14329120,SI:14329120,P:16753920,S:16762930,Cl:65280,CL:65280,Ca:8421520,CA:8421520,Ti:8421520,TI:8421520,Cr:8421520,CR:8421520,Mn:8421520,MN:8421520,Fe:16753920,FE:16753920,Ni:10824234,NI:10824234,Cu:10824234,CU:10824234,Zn:10824234,ZN:10824234,Br:10824234,BR:10824234,Ag:8421520,AG:8421520,I:10494192,Ba:16753920,BA:16753920,Au:14329120,AU:14329120},n.elementColors.defaultColors=n.elementColors.rasmol,n.elementColors.greenCarbon=$.extend({},n.elementColors.defaultColors),n.elementColors.greenCarbon.C=65280,n.elementColors.cyanCarbon=$.extend({},n.elementColors.defaultColors),n.elementColors.cyanCarbon.C=65535,n.elementColors.magentaCarbon=$.extend({},n.elementColors.defaultColors),n.elementColors.magentaCarbon.C=16711935,n.elementColors.yellowCarbon=$.extend({},n.elementColors.defaultColors),n.elementColors.yellowCarbon.C=16776960,n.elementColors.whiteCarbon=$.extend({},n.elementColors.defaultColors),n.elementColors.whiteCarbon.C=16777215,n.elementColors.orangeCarbon=$.extend({},n.elementColors.defaultColors),n.elementColors.orangeCarbon.C=16737792,n.elementColors.purpleCarbon=$.extend({},n.elementColors.defaultColors),n.elementColors.purpleCarbon.C=8388736,n.elementColors.blueCarbon=$.extend({},n.elementColors.defaultColors),n.elementColors.blueCarbon.C=255;var n=n||{};n.drawCartoon=function(){var e=5,t=6,i=.3,r=1.3,o=.4,a=function(e,t){var i=[],r=e;r=[],r.push(e[0]);var o,a,s,l,c,u,h,d,f;for(o=1,a=e.length-1;a>o;o++)c=e[o],u=e[o+1],c.smoothen?r.push(new n.Vector3((c.x+u.x)/2,(c.y+u.y)/2,(c.z+u.z)/2)):r.push(c);for(r.push(e[e.length-1]),o=-1,s=r.length;s-3>=o;o++){l=r[-1===o?0:o],c=r[o+1],u=r[o+2],h=r[o===s-3?s-1:o+3],d=(new n.Vector3).subVectors(u,l).multiplyScalar(.5),f=(new n.Vector3).subVectors(h,c).multiplyScalar(.5);for(var p=0;t>p;p++){var v=1/t*p,m=c.x+v*d.x+v*v*(-3*c.x+3*u.x-2*d.x-f.x)+v*v*v*(2*c.x-2*u.x+d.x+f.x),g=c.y+v*d.y+v*v*(-3*c.y+3*u.y-2*d.y-f.y)+v*v*v*(2*c.y-2*u.y+d.y+f.y),y=c.z+v*d.z+v*v*(-3*c.z+3*u.z-2*d.z-f.z)+v*v*v*(2*c.z-2*u.z+d.z+f.z),b=new n.Vector3(m,g,y),x=Math.floor((i.length+2)/t);void 0!==e[x]&&void 0!==e[x].atom&&(b.atom=e[x].atom),i.push(b)}}return i.push(r[r.length-1]),i},s=function(e,t,i,r,o){for(var a,s,l,c=new n.Geometry(!0),u=0,h=t.length;h>u;u++){l=n.CC.color(r[Math.round((u-1)/o)]),geoGroup=c.updateGeoGroup(2);var d=geoGroup.vertexArray,f=geoGroup.colorArray,p=geoGroup.faceArray;a=geoGroup.vertices,s=3*a,d[s]=t[u].x,d[s+1]=t[u].y,d[s+2]=t[u].z,d[s+3]=i[u].x,d[s+4]=i[u].y,d[s+5]=i[u].z;for(var v=0;6>v;++v)f[s+3*v]=l.r,f[s+1+3*v]=l.g,f[s+2+3*v]=l.b;if(u>0){var m=[a,a+1,a-1,a-2],g=geoGroup.faceidx;p[g]=m[0],p[g+1]=m[1],p[g+2]=m[3],p[g+3]=m[1],p[g+4]=m[2],p[g+5]=m[3],geoGroup.faceidx+=6}geoGroup.vertices+=2}c.initTypedArrays(),c.setUpNormals();var y=new n.MeshLambertMaterial;y.vertexColors=n.FaceColors,y.side=n.DoubleSide;var b=new n.Mesh(c,y);e.add(b)},l=function(t,i,r,o,l,c){if(!(i.length<2)){if(l=l||e,i=a(i,l),r=a(r,l),!c)return s(t,i,r,o,l);var u,h,d,f,p,v,m,g,y,b,x,w,C,S,A,T,z,M,_=new n.Geometry(!0),E=[],k=[[0,2,-6,-8],[-4,-2,6,4],[7,-1,-5,3],[-3,5,1,-7]];for(w=0,C=i.length;C>w;w++){if(y=n.CC.color(o[Math.round((w-1)/l)]),E.push(h=i[w]),E.push(h),E.push(d=r[w]),E.push(d),C-1>w){var D=i[w+1].clone().sub(i[w]),L=r[w].clone().sub(i[w]);u=L.cross(D).normalize().multiplyScalar(c)}E.push(f=i[w].clone().add(u)),E.push(f),E.push(p=r[w].clone().add(u)),E.push(p),void 0!==h.atom&&(b=h.atom),M=_.updateGeoGroup(8);var I=M.vertexArray,N=M.colorArray,O=M.faceArray;for(v=M.vertices,m=3*v,I[m]=h.x,I[m+1]=h.y,I[m+2]=h.z,I[m+3]=h.x,I[m+4]=h.y,I[m+5]=h.z,I[m+6]=d.x,I[m+7]=d.y,I[m+8]=d.z,I[m+9]=d.x,I[m+10]=d.y,I[m+11]=d.z,I[m+12]=f.x,I[m+13]=f.y,I[m+14]=f.z,I[m+15]=f.x,I[m+16]=f.y,I[m+17]=f.z,I[m+18]=p.x,I[m+19]=p.y,I[m+20]=p.z,I[m+21]=p.x,I[m+22]=p.y,I[m+23]=p.z,S=0;8>S;++S)N[m+3*S]=y.r,N[m+1+3*S]=y.g,N[m+2+3*S]=y.b;if(w>0){var P=void 0!==x&&void 0!==b&&x.serial!==b.serial;for(S=0;4>S;S++){var R=[v+k[S][0],v+k[S][1],v+k[S][2],v+k[S][3]];if(g=M.faceidx,O[g]=R[0],O[g+1]=R[1],O[g+2]=R[3],O[g+3]=R[1],O[g+4]=R[2],O[g+5]=R[3],M.faceidx+=6,b.clickable||x.clickable){var F=E[R[3]].clone(),j=E[R[0]].clone(),B=E[R[2]].clone(),q=E[R[1]].clone();if(F.atom=E[R[3]].atom||null,B.atom=E[R[2]].atom||null,j.atom=E[R[0]].atom||null,q.atom=E[R[1]].atom||null,P){var $=F.clone().add(j).multiplyScalar(.5),U=B.clone().add(q).multiplyScalar(.5),V=F.clone().add(q).multiplyScalar(.5);S%2===0?(x.clickable&&(A=new n.Triangle($,V,F),T=new n.Triangle(U,B,V),z=new n.Triangle(V,B,F),x.intersectionShape.triangle.push(A),x.intersectionShape.triangle.push(T),x.intersectionShape.triangle.push(z)),b.clickable&&(A=new n.Triangle(j,q,V),T=new n.Triangle(q,U,V),z=new n.Triangle(j,V,$),b.intersectionShape.triangle.push(A),b.intersectionShape.triangle.push(T),b.intersectionShape.triangle.push(z))):(b.clickable&&(A=new n.Triangle($,V,F),T=new n.Triangle(U,B,V),z=new n.Triangle(V,B,F),b.intersectionShape.triangle.push(A),b.intersectionShape.triangle.push(T),b.intersectionShape.triangle.push(z)),x.clickable&&(A=new n.Triangle(j,q,V),T=new n.Triangle(q,U,V),z=new n.Triangle(j,V,$),x.intersectionShape.triangle.push(A),x.intersectionShape.triangle.push(T),x.intersectionShape.triangle.push(z)))}else b.clickable&&(A=new n.Triangle(j,q,F),T=new n.Triangle(q,B,F),b.intersectionShape.triangle.push(A),b.intersectionShape.triangle.push(T))}}}M.vertices+=8,x=b}var G=E.length-8;M=_.updateGeoGroup(8);var I=M.vertexArray,N=M.colorArray,O=M.faceArray;for(v=M.vertices,m=3*v,g=M.faceidx,w=0;4>w;w++){E.push(E[2*w]),E.push(E[G+2*w]);var H=E[2*w],W=E[G+2*w];I[m+6*w]=H.x,I[m+1+6*w]=H.y,I[m+2+6*w]=H.z,I[m+3+6*w]=W.x,I[m+4+6*w]=W.y,I[m+5+6*w]=W.z,N[m+6*w]=y.r,N[m+1+6*w]=y.g,N[m+2+6*w]=y.b,N[m+3+6*w]=y.r,N[m+4+6*w]=y.g,N[m+5+6*w]=y.b}G+=8,A=[v,v+2,v+6,v+4],T=[v+1,v+5,v+7,v+3],O[g]=A[0],O[g+1]=A[1],O[g+2]=A[3],O[g+3]=A[1],O[g+4]=A[2],O[g+5]=A[3],O[g+6]=T[0],O[g+7]=T[1],O[g+8]=T[3],O[g+9]=T[1],O[g+10]=T[2],O[g+11]=T[3],M.faceidx+=12,M.vertices+=8,_.initTypedArrays(),_.setUpNormals();var Y=new n.MeshLambertMaterial;Y.vertexColors=n.FaceColors,Y.side=n.DoubleSide;var Q=new n.Mesh(_,Y);t.add(Q)}},c=function(e,t,i,r,o){if(0!==t.length){o=void 0===o?5:o;var s=new n.Geometry,l=(a(t,o),new n.LineBasicMaterial({linewidth:i}));l.vertexColors=!0;var c=new n.Line(s,l);c.type=n.LineStrip,e.add(c)}},u=function(i,r,a,s,u,h,d,f,p){a=a||t,s=s||e,f=!!f;var v,m,g,y=[];for(g=0;a>g;g++)y[g]=[];var b,x,w,C,S,A,T=[],z=null,M=null,_=!1,E=null,k=o;for(v in r){var D=r[v];if(void 0!==D&&("O"==D.atom||"CA"==D.atom)&&!D.hetflag){var L=D.style.cartoon;if("CA"==D.atom){var I=A;if(A=n.getColorFromStyle(D,L).getHex(),p&&(A=p.valueToHex(D.resi,p.range())),k=$.isNumeric(L.thickness)?L.thickness:o,"trace"==L.style){if(b!=D.chain||w+1!=D.resi)E||(E=new n.Geometry(!0));else if(C)if(I==A){var N=n.CC.color(A);n.GLDraw.drawCylinder(E,C,D,k,N,!0,!0)}else{var O=(new n.Vector3).addVectors(C,D).multiplyScalar(.5),P=n.CC.color(I),R=n.CC.color(A);n.GLDraw.drawCylinder(E,C,O,k,P,!0,!1),n.GLDraw.drawCylinder(E,O,D,k,R,!1,!0)}}else if(b!=D.chain||w+1!=D.resi||x!=D.reschain){for(m=0;!k&&a>m;m++)c(i,y[m],1,T,s);for(u&&l(i,y[0],y[a-1],T,s,k),y=[],g=0;a>g;g++)y[g]=[];T=[],z=null,M=null,_=!1}C=new n.Vector3(D.x,D.y,D.z),S=D,b=D.chain,x=D.reschain,w=D.resi,M=D.ss,_=D.ssbegin||D.ssend,T.push(A),D.clickable!==!0||void 0!==D.intersectionShape&&void 0!==D.intersectionShape.triangle||(D.intersectionShape={sphere:null,cylinder:[],line:[],triangle:[]})}else if("trace"!=L.style){var F=new n.Vector3(D.x,D.y,D.z);for(F.sub(C),F.normalize(),F.multiplyScalar("c"==M?h:d),null!==z&&F.dot(z)<0&&F.negate(),z=F,m=0;a>m;m++){var j=-1+2/(a-1)*m,B=new n.Vector3(C.x+z.x*j,C.y+z.y*j,C.z+z.z*j);B.atom=S,f||"s"!=M||(B.smoothen=!0),y[m].push(B)}}}}for(m=0;!k&&a>m;m++)c(i,y[m],1,T,s);if(u&&l(i,y[0],y[a-1],T,s,k),E){var q=new n.MeshLambertMaterial;q.vertexColors=n.FaceColors,q.side=n.DoubleSide;var U=new n.Mesh(E,q);i.add(U)}},h=function(e,t,n){u(e,t,2,void 0,!0,i,r,!1,n)};return h}();var n=n||{};n.GLDraw=function(){var e={},t=function(){var e=new n.Vector3;return function(t){e.set(t[0],t[1],t[2]);var i,r,n,o,a,s=e.x,l=e.y,c=e.z,u=Math.sqrt(s*s+l*l);1e-4>u?(r=0,n=1):(r=-s/u,n=l/u),l=-r*s+n*l,i=Math.sqrt(l*l+c*c),1e-4>i?(o=0,a=1):(o=c/i,a=l/i);var h=new Float32Array(9);return h[0]=n,h[1]=r,h[2]=0,h[3]=-r*a,h[4]=n*a,h[5]=o,h[6]=r*o,h[7]=-n*o,h[8]=a,h}}(),i=function(){var e,t=[],i=4,r=Math.pow(2,i),o=2,a=Math.pow(2,o),s=r/a;for(t[0]=new n.Vector3(-1,0,0),t[s]=new n.Vector3(0,0,1),t[2*s]=new n.Vector3(1,0,0),t[3*s]=new n.Vector3(0,0,-1),o=3;i>=o;o++){for(a=Math.pow(2,o-1),s=r/a,e=0;a-1>e;e++)t[s/2+e*s]=t[e*s].clone().add(t[(e+1)*s]).normalize();e=a-1,t[s/2+e*s]=t[e*s].clone().add(t[0]).normalize()}return t}(),r={cache:{},getVerticesForRadius:function(e){if(void 0!==this.cache[e])return this.cache[e];for(var t,r=(new n.Vector3(0,1,0),i.length),o=[],a=[],s=0;r>s;s++)o.push(i[s].clone().multiplyScalar(e)),o.push(i[s].clone().multiplyScalar(e)),t=i[s].clone().normalize(),a.push(t),a.push(t);var l=[],c=10,u=r;if(c%2!==0||!c)return console.error("heightSegments must be even"),null;var h,d,f=0,p=2*Math.PI,v=0,m=Math.PI,g=!1,y=!1;for(d=0;c>=d;d++){g=0===d||d===c?!0:!1,y=d===c/2?!0:!1;var b=[],x=[];for(h=0;u>=h;h++)if(y){var w=u>h?2*h:0;x.push(w+1),b.push(w)}else{var C=h/u,S=d/c;if(g&&0!==h)g&&b.push(o.length-1);else if(u>h){var A=new n.Vector3;A.x=-e*Math.cos(f+C*p)*Math.sin(v+S*m),A.y=e*Math.cos(v+S*m),A.z=e*Math.sin(f+C*p)*Math.sin(v+S*m),Math.abs(A.x)<1e-5&&(A.x=0),Math.abs(A.y)<1e-5&&(A.y=0),Math.abs(A.z)<1e-5&&(A.z=0),t=new n.Vector3(A.x,A.y,A.z),t.normalize(),o.push(A),a.push(t),b.push(o.length-1)}else b.push(o.length-u)}y&&l.push(x),l.push(b)}var T={vertices:o,normals:a,verticesRows:l,w:u,h:c};return this.cache[e]=T,T}},o=0;e.drawCylinder=function(e,i,n,a,s,l,c){if(i&&n){o++;var u=l||c;s=s||{r:0,g:0,b:0};var h=[n.x,n.y,n.z];h[0]-=i.x,h[1]-=i.y,h[2]-=i.z;var d,f,p,v,m,g,y=t(h),b=r.getVerticesForRadius(a),x=b.w,w=b.h,C=u?w*x+2:2*x,S=e.updateGeoGroup(C),A=b.vertices,T=b.normals,z=b.verticesRows,M=z[w/2],_=z[w/2+1],E=S.vertices,k=S.vertexArray,D=S.normalArray,L=S.colorArray,I=S.faceArray;for(p=0;x>p;++p){var N=2*p;v=y[0]*A[N].x+y[3]*A[N].y+y[6]*A[N].z,m=y[1]*A[N].x+y[4]*A[N].y+y[7]*A[N].z,g=y[5]*A[N].y+y[8]*A[N].z,d=3*(E+N),f=S.faceidx,k[d]=v+i.x,k[d+1]=m+i.y,k[d+2]=g+i.z,k[d+3]=v+n.x,k[d+4]=m+n.y,k[d+5]=g+n.z,D[d]=v,D[d+3]=v,D[d+1]=m,D[d+4]=m,D[d+2]=g,D[d+5]=g,L[d]=s.r,L[d+3]=s.r,L[d+1]=s.g,L[d+4]=s.g,L[d+2]=s.b,L[d+5]=s.b,I[f]=_[p]+E,I[f+1]=_[p+1]+E,I[f+2]=M[p]+E,I[f+3]=M[p]+E,I[f+4]=_[p+1]+E,I[f+5]=M[p+1]+E,S.faceidx+=6}if(u){var O,P,R,F,j,B,q,$,U,V,G,H,W,Y,Q,X,Z,K,J,ee,te,ie,re,ne,oe,ae,se,le,ce,ue,he,de,fe=c?0:w/2,pe=l?w+1:w/2+1;for(m=fe;pe>m;m++)if(m!==w/2){var ve=w/2>=m?n:i;for(v=0;x>v;v++)f=S.faceidx,O=z[m][v+1],ce=3*(O+E),P=z[m][v],ue=3*(P+E),R=z[m+1][v],he=3*(R+E),F=z[m+1][v+1],de=3*(F+E),j=y[0]*A[O].x+y[3]*A[O].y+y[6]*A[O].z,B=y[0]*A[P].x+y[3]*A[P].y+y[6]*A[P].z,q=y[0]*A[R].x+y[3]*A[R].y+y[6]*A[R].z,$=y[0]*A[F].x+y[3]*A[F].y+y[6]*A[F].z,U=y[1]*A[O].x+y[4]*A[O].y+y[7]*A[O].z,V=y[1]*A[P].x+y[4]*A[P].y+y[7]*A[P].z,G=y[1]*A[R].x+y[4]*A[R].y+y[7]*A[R].z,H=y[1]*A[F].x+y[4]*A[F].y+y[7]*A[F].z,W=y[5]*A[O].y+y[8]*A[O].z,Y=y[5]*A[P].y+y[8]*A[P].z,Q=y[5]*A[R].y+y[8]*A[R].z,X=y[5]*A[F].y+y[8]*A[F].z,k[ce]=j+ve.x,k[ue]=B+ve.x,k[he]=q+ve.x,k[de]=$+ve.x,k[ce+1]=U+ve.y,k[ue+1]=V+ve.y,k[he+1]=G+ve.y,k[de+1]=H+ve.y,k[ce+2]=W+ve.z,k[ue+2]=Y+ve.z,k[he+2]=Q+ve.z,k[de+2]=X+ve.z,L[ce]=s.r,L[ue]=s.r,L[he]=s.r,L[de]=s.r,L[ce+1]=s.g,L[ue+1]=s.g,L[he+1]=s.g,L[de+1]=s.g,L[ce+2]=s.b,L[ue+2]=s.b,L[he+2]=s.b,L[de+2]=s.b,Z=y[0]*T[O].x+y[3]*T[O].y+y[6]*T[O].z,K=y[0]*T[P].x+y[3]*T[P].y+y[6]*T[P].z,J=y[0]*T[R].x+y[3]*T[R].y+y[6]*T[R].z,ee=y[0]*T[F].x+y[3]*T[F].y+y[6]*T[F].z,te=y[1]*T[O].x+y[4]*T[O].y+y[7]*T[O].z,ie=y[1]*T[P].x+y[4]*T[P].y+y[7]*T[P].z,re=y[1]*T[R].x+y[4]*T[R].y+y[7]*T[R].z,ne=y[1]*T[F].x+y[4]*T[F].y+y[7]*T[F].z,oe=y[5]*T[O].y+y[8]*T[O].z,ae=y[5]*T[P].y+y[8]*T[P].z,se=y[5]*T[R].y+y[8]*T[R].z,le=y[5]*T[F].y+y[8]*T[F].z,0===m?(D[ce]=Z,D[he]=J,D[de]=ee,D[ce+1]=te,D[he+1]=re,D[de+1]=ne,D[ce+2]=oe,D[he+2]=se,D[de+2]=le,I[f]=O+E,I[f+1]=R+E,I[f+2]=F+E,S.faceidx+=3):m===pe-1?(D[ce]=Z,D[ue]=K,D[he]=J,D[ce+1]=te,D[ue+1]=ie,D[he+1]=re,D[ce+2]=oe,D[ue+2]=ae,D[he+2]=se,I[f]=O+E,I[f+1]=P+E,I[f+2]=R+E,S.faceidx+=3):(D[ce]=Z,D[ue]=K,D[de]=ee,D[ce+1]=te,D[ue+1]=ie,D[de+1]=ne,D[ce+2]=oe,D[ue+2]=ae,D[de+2]=le,D[ue]=K,D[he]=J,D[de]=ee,D[ue+1]=ie,D[he+1]=re,D[de+1]=ne,D[ue+2]=ae,D[he+2]=se,D[de+2]=le,I[f]=O+E,I[f+1]=P+E,I[f+2]=F+E,I[f+3]=P+E,I[f+4]=R+E,I[f+5]=F+E,S.faceidx+=6)}}S.vertices+=C}},e.drawCone=function(e,r,o,a,s){if(r&&o){s=s||{r:0,g:0,b:0};var l=[o.x,o.y,o.z];l.x-=r.x,l.y-=r.y,l.z-=r.z;var c,u,h,d,f,p,v=t(l),m=i.length,g=i,y=m+2,b=e.updateGeoGroup(y),x=b.vertices,w=b.vertexArray,C=b.normalArray,S=b.colorArray,A=b.faceArray,c=3*x,T=new n.Vector3(l[0],l[1],l[2]).normalize();for(w[c]=r.x,w[c+1]=r.y,w[c+2]=r.z,C[c]=-T.x,C[c+1]=-T.y,C[c+2]=-T.z,S[c]=s.r,S[c+1]=s.g,S[c+2]=s.b,w[c+3]=o.x,w[c+4]=o.y,w[c+5]=o.z,C[c+3]=T.x,C[c+4]=T.y,C[c+5]=T.z,S[c+3]=s.r,S[c+4]=s.g,S[c+5]=s.b,c+=6,h=0;m>h;++h){var z=g[h].clone();z.multiplyScalar(a),d=v[0]*z.x+v[3]*z.y+v[6]*z.z,f=v[1]*z.x+v[4]*z.y+v[7]*z.z,p=v[5]*z.y+v[8]*z.z,w[c]=d+r.x,w[c+1]=f+r.y,w[c+2]=p+r.z,C[c]=d,C[c+1]=f,C[c+2]=p,S[c]=s.r,S[c+1]=s.g,S[c+2]=s.b,c+=3}b.vertices+=m+2;var u=b.faceidx;for(h=0;m>h;h++){var M=x+2+h,_=x+2+(h+1)%m;A[u]=M,A[u+1]=_,A[u+2]=x,u+=3,A[u]=M,A[u+1]=_,A[u+2]=x+1,u+=3}b.faceidx+=6*m}};var a={cache:{},getVerticesForRadius:function(e){if("undefined"!=typeof this.cache[e])return this.cache[e];var t={vertices:[],verticesRows:[],normals:[]},i=1,r=16*i,o=10*i;1>e&&(r=10*i,o=8*i);var a,s,l=0,c=2*Math.PI,u=0,h=Math.PI;for(s=0;o>=s;s++){var d=[];for(a=0;r>=a;a++){var f=a/r,p=s/o,v={};v.x=-e*Math.cos(l+f*c)*Math.sin(u+p*h),v.y=e*Math.cos(u+p*h),v.z=e*Math.sin(l+f*c)*Math.sin(u+p*h);var m=new n.Vector3(v.x,v.y,v.z);m.normalize(),t.vertices.push(v),t.normals.push(m),d.push(t.vertices.length-1)}t.verticesRows.push(d)}return this.cache[e]=t,t}};return e.drawSphere=function(e,t,i,r){for(var o,s,l=(new n.Vector3(t.x,t.y,t.z),a.getVerticesForRadius(i)),c=l.vertices,u=l.normals,h=e.updateGeoGroup(c.length),d=h.vertices,f=h.vertexArray,p=h.colorArray,v=h.faceArray,m=h.lineArray,g=h.normalArray,y=0,b=c.length;b>y;++y){var x=3*(d+y),w=c[y];f[x]=w.x+t.x,f[x+1]=w.y+t.y,f[x+2]=w.z+t.z,p[x]=r.r,p[x+1]=r.g,p[x+2]=r.b}h.vertices+=c.length;var C=l.verticesRows,S=C.length-1;for(s=0;S>s;s++){var A=C[s].length-1;for(o=0;A>o;o++){var T=h.faceidx,z=h.lineidx,M=C[s][o+1]+d,_=3*M,E=C[s][o]+d,k=3*E,D=C[s+1][o]+d,L=3*D,I=C[s+1][o+1]+d,N=3*I,O=u[M-d],P=u[E-d],R=u[D-d],F=u[I-d];Math.abs(c[M-d].y)===i?(g[_]=O.x,g[L]=R.x,g[N]=F.x,g[_+1]=O.y,g[L+1]=R.y,g[N+1]=F.y,g[_+2]=O.z,g[L+2]=R.z,g[N+2]=F.z,v[T]=M,v[T+1]=D,v[T+2]=I,m[z]=M,m[z+1]=D,m[z+2]=M,m[z+3]=I,m[z+4]=D,m[z+5]=I,h.faceidx+=3,h.lineidx+=6):Math.abs(c[D-d].y)===i?(g[_]=O.x,g[k]=P.x,g[L]=R.x,g[_+1]=O.y,g[k+1]=P.y,g[L+1]=R.y,g[_+2]=O.z,g[k+2]=P.z,g[L+2]=R.z,v[T]=M,v[T+1]=E,v[T+2]=D,m[z]=M,m[z+1]=E,m[z+2]=M,m[z+3]=D,m[z+4]=E,m[z+5]=D,h.faceidx+=3,h.lineidx+=6):(g[_]=O.x,g[k]=P.x,g[N]=F.x,g[_+1]=O.y,g[k+1]=P.y,g[N+1]=F.y,g[_+2]=O.z,g[k+2]=P.z,g[N+2]=F.z,g[k]=P.x,g[L]=R.x,g[N]=F.x,g[k+1]=P.y,g[L+1]=R.y,g[N+1]=F.y,g[k+2]=P.z,g[L+2]=R.z,g[N+2]=F.z,v[T]=M,v[T+1]=E,v[T+2]=I,v[T+3]=E,v[T+4]=D,v[T+5]=I,m[z]=M,m[z+1]=E,m[z+2]=M,m[z+3]=I,m[z+4]=E,m[z+5]=D,m[z+6]=D,m[z+7]=I,h.faceidx+=6,h.lineidx+=8)}}},e}();var n=n||{};n.GLModel=function(){function e(e,a){var s=[],l=e,c=null,u=null,h=null,d=[],f=new n.Matrix4;f.identity();var p,v,m=n.elementColors.defaultColor,g=a?a:n.elementColors.defaultColors,y=1.5,b=function(e,t){var i=y;return"undefined"!=typeof t.radius?i=t.radius:r[e.elem]&&(i=r[e.elem]),"undefined"!=typeof t.scale&&(i*=t.scale),i},x=function(e,t){if(e.style.cross){var r=e.style.cross;if(!r.hidden){var o=r.linewidth||i;t[o]||(t[o]=new n.Geometry);var a=t[o].updateGeoGroup(6),s=b(e,r),l=[[s,0,0],[-s,0,0],[0,s,0],[0,-s,0],[0,0,s],[0,0,-s]],c=e.clickable;c&&void 0===e.intersectionShape&&(e.intersectionShape={sphere:[],cylinder:[],line:[]});for(var u=n.getColorFromStyle(e,r),h=a.vertexArray,d=a.colorArray,f=0;6>f;f++){var p=3*a.vertices;if(a.vertices++,h[p]=e.x+l[f][0],h[p+1]=e.y+l[f][1],h[p+2]=e.z+l[f][2],d[p]=u.r,d[p+1]=u.g,d[p+2]=u.b,c){var v=new n.Vector3(l[f][0],l[f][1],l[f][2]);v.multiplyScalar(.1),v.set(v.x+e.x,v.y+e.y,v.z+e.z),e.intersectionShape.line.push(v)}}}}},w=function(e,t,i){var r=new n.Vector3(e.x,e.y,e.z),o=new n.Vector3(t.x,t.y,t.z),a=o.clone(),l=null;a.sub(r);var c,u,h,d,f;return 1===e.bonds.length?1===t.bonds.length?(l=a.clone(),Math.abs(l.x)>1e-4?l.y+=1:l.x+=1):(c=(i+1)%t.bonds.length,u=t.bonds[c],h=s[u],d=new n.Vector3(h.x,h.y,h.z),f=d.clone(),f.sub(r),l=f.clone(),l.cross(a)):(c=(i+1)%e.bonds.length,u=e.bonds[c],h=s[u],d=new n.Vector3(h.x,h.y,h.z),f=d.clone(),f.sub(r),l=f.clone(),l.cross(a)),l.lengthSq()<.01&&(l=a.clone(),Math.abs(l.x)>1e-4?l.y+=1:l.x+=1),l.cross(a),l.normalize(),l},C=function(e,t,i,r,n,o){e[i]=r.x,e[i+1]=r.y,e[i+2]=r.z,t[i]=o.r,t[i+1]=o.g,t[i+2]=o.b,e[i+3]=n.x,e[i+4]=n.y,e[i+5]=n.z,t[i+3]=o.r,t[i+4]=o.g,t[i+5]=o.b},S=function(e,t,r){if(e.style.line){var o=e.style.line;if(!o.hidden){var a=o.linewidth||i;r[a]||(r[a]=new n.Geometry);for(var s=r[a].updateGeoGroup(2*e.bonds.length),l=s.vertexArray,c=s.colorArray,u=0;u<e.bonds.length;u++){var h=e.bonds[u],d=t[h];if(d.style.line&&!(e.serial>=d.serial)){var f=new n.Vector3(e.x,e.y,e.z),p=new n.Vector3(d.x,d.y,d.z),v=f.clone().add(p).multiplyScalar(.5),m=!1;e.clickable&&(void 0===e.intersectionShape&&(e.intersectionShape={sphere:[],cylinder:[],line:[],triangle:[]}),e.intersectionShape.line.push(f),e.intersectionShape.line.push(p));var g=n.getColorFromStyle(e,e.style.line),y=n.getColorFromStyle(d,d.style.line);if(e.bondStyles&&e.bondStyles[u]){var b=e.bondStyles[u];if(!b.iswire)continue;b.radius&&(bondR=b.radius),b.singleBond&&(m=!0),"undefined"!=typeof b.color1&&(g=n.CC.color(b.color1)),"undefined"!=typeof b.color2&&(y=n.CC.color(b.color2))}var x=3*s.vertices;if(e.bondOrder[u]>1&&e.bondOrder[u]<4&&!m){var S=w(e,d,u),A=p.clone();if(A.sub(f),2==e.bondOrder[u])if(S.multiplyScalar(.1),p1a=f.clone(),p1a.add(S),p1b=f.clone(),p1b.sub(S),p2a=p1a.clone(),p2a.add(A),p2b=p1b.clone(),p2b.add(A),g==y)s.vertices+=4,C(l,c,x,p1a,p2a,g),C(l,c,x+6,p1b,p2b,g);else{s.vertices+=8,A.multiplyScalar(.5);var T=p1a.clone();T.add(A);var z=p1b.clone();z.add(A),C(l,c,x,p1a,T,g),C(l,c,x+6,T,p2a,y),C(l,c,x+12,p1b,z,g),C(l,c,x+18,z,p2b,y)}else if(3==e.bondOrder[u])if(S.multiplyScalar(.1),p1a=f.clone(),p1a.add(S),p1b=f.clone(),p1b.sub(S),p2a=p1a.clone(),p2a.add(A),p2b=p1b.clone(),p2b.add(A),g==y)s.vertices+=6,C(l,c,x,f,p,g),C(l,c,x+6,p1a,p2a,g),C(l,c,x+12,p1b,p2b,g);else{s.vertices+=12,A.multiplyScalar(.5);var T=p1a.clone();T.add(A);var z=p1b.clone();z.add(A),C(l,c,x,f,v,g),C(l,c,x+6,v,p,y),C(l,c,x+12,p1a,T,g),C(l,c,x+18,T,p2a,y),C(l,c,x+24,p1b,z,g),C(l,c,x+30,z,p2b,y)}}else g==y?(s.vertices+=2,C(l,c,x,f,p,g)):(s.vertices+=4,C(l,c,x,f,v,g),C(l,c,x+6,v,p,y))}}}}},A=.25,T=function(e,t){if(e.style.sphere){var i=e.style.sphere;if(!i.hidden){var r=n.getColorFromStyle(e,i),o=b(e,i);if(e.clickable===!0&&void 0!==e.intersectionShape){var a=new n.Vector3(e.x,e.y,e.z);e.intersectionShape.sphere.push(new n.Sphere(a,o))}n.GLDraw.drawSphere(t,e,o,r)}}},z=function(e,t){if(e.style.spherei){var i=e.style.spherei;if(!i.hidden){for(var r=b(e,i),o=n.getColorFromStyle(e,i),a=t.updateGeoGroup(4),s=a.vertices,l=3*s,c=a.vertexArray,u=a.colorArray,h=0;4>h;h++)c[l+3*h]=e.x,c[l+3*h+1]=e.y,c[l+3*h+2]=e.z;for(var d=a.normalArray,u=a.colorArray,h=0;4>h;h++)u[l+3*h]=o.r,u[l+3*h+1]=o.g,u[l+3*h+2]=o.b;d[l+0]=-r,d[l+1]=-r,d[l+2]=0,d[l+3]=-r,d[l+4]=r,d[l+5]=0,d[l+6]=r,d[l+7]=r,d[l+8]=0,d[l+9]=r,d[l+10]=-r,d[l+11]=0,a.vertices+=4;var f=a.faceArray,p=a.faceidx;f[p+0]=s,f[p+1]=s+1,f[p+2]=s+2,f[p+3]=s+2,f[p+4]=s+3,f[p+5]=s,a.faceidx+=6}}},M=function(e,t,i){if(e.style.stick){var r=e.style.stick;if(!r.hidden){var o,a,s=r.radius||A,l=s,c=r.singleBonds||!1,u=!1,h=!1,d=n.getColorFromStyle(e,r);!e.capDrawn&&e.bonds.length<4&&(u=!0);for(var f=0;f<e.bonds.length;f++){var p=e.bonds[f],v=t[p];if(e.serial<v.serial){var m=v.style;if(!m.stick)continue;var g=n.getColorFromStyle(v,m.stick);l=s;var y=c;if(e.bondStyles&&e.bondStyles[f]){var b=e.bondStyles[f];if(b.iswire)continue;b.radius&&(l=b.radius),b.singleBond&&(y=!0),"undefined"!=typeof b.color1&&(d=n.CC.color(b.color1)),"undefined"!=typeof b.color2&&(g=n.CC.color(b.color2))}var x=new n.Vector3(e.x,e.y,e.z),C=new n.Vector3(v.x,v.y,v.z);if(1===e.bondOrder[f]||y){if(!v.capDrawn&&v.bonds.length<4&&(h=!0),d!=g?(o=(new n.Vector3).addVectors(x,C).multiplyScalar(.5),n.GLDraw.drawCylinder(i,x,o,l,d,u,!1),n.GLDraw.drawCylinder(i,o,C,l,g,!1,h)):n.GLDraw.drawCylinder(i,x,C,l,d,u,h),e.clickable||v.clickable){if(o=(new n.Vector3).addVectors(x,C).multiplyScalar(.5),e.clickable){var S=new n.Cylinder(x,o,l),T=new n.Sphere(x,l);e.intersectionShape.cylinder.push(S),e.intersectionShape.sphere.push(T)}if(v.clickable){var z=new n.Cylinder(C,o,l),M=new n.Sphere(C,l);v.intersectionShape.cylinder.push(z),v.intersectionShape.sphere.push(M)}}}else if(e.bondOrder[f]>1){var _=!1;mtoCap=!1,l!=s&&(_=!0,mtoCap=!0);var E=C.clone(),k=null;E.sub(x);var D,L,I,N,O,k=w(e,v,f);if(2==e.bondOrder[f]){var D=l/2.5,k=w(e,v,f);k.multiplyScalar(1.5*D),L=x.clone(),L.add(k),I=x.clone(),I.sub(k),N=L.clone(),N.add(E),O=I.clone(),O.add(E),d!=g?(o=(new n.Vector3).addVectors(L,N).multiplyScalar(.5),a=(new n.Vector3).addVectors(I,O).multiplyScalar(.5),n.GLDraw.drawCylinder(i,L,o,D,d,_,!1),n.GLDraw.drawCylinder(i,o,N,D,g,!1,mtoCap),n.GLDraw.drawCylinder(i,I,a,D,d,_,!1),n.GLDraw.drawCylinder(i,a,O,D,g,!1,mtoCap)):(n.GLDraw.drawCylinder(i,L,N,D,d,_,mtoCap),n.GLDraw.drawCylinder(i,I,O,D,d,_,mtoCap)),(e.clickable||v.clickable)&&(o=(new n.Vector3).addVectors(L,N).multiplyScalar(.5),a=(new n.Vector3).addVectors(I,O).multiplyScalar(.5),e.clickable&&(cylinder1a=new n.Cylinder(L,o,D),cylinder1b=new n.Cylinder(I,a,D),e.intersectionShape.cylinder.push(cylinder1a),e.intersectionShape.cylinder.push(cylinder1b)),v.clickable&&(cylinder2a=new n.Cylinder(N,o,D),cylinder2b=new n.Cylinder(O,a,D),v.intersectionShape.cylinder.push(cylinder2a),v.intersectionShape.cylinder.push(cylinder2b)))}else 3==e.bondOrder[f]&&(D=l/4,k.cross(E),k.normalize(),k.multiplyScalar(3*D),L=x.clone(),L.add(k),I=x.clone(),I.sub(k),N=L.clone(),N.add(E),O=I.clone(),O.add(E),d!=g?(o=(new n.Vector3).addVectors(L,N).multiplyScalar(.5),a=(new n.Vector3).addVectors(I,O).multiplyScalar(.5),mp3=(new n.Vector3).addVectors(x,C).multiplyScalar(.5),n.GLDraw.drawCylinder(i,L,o,D,d,_,!1),n.GLDraw.drawCylinder(i,o,N,D,g,!1,mtoCap),n.GLDraw.drawCylinder(i,x,mp3,D,d,u,!1),n.GLDraw.drawCylinder(i,mp3,C,D,g,!1,h),n.GLDraw.drawCylinder(i,I,a,D,d,_,!1),n.GLDraw.drawCylinder(i,a,O,D,g,!1,mtoCap)):(n.GLDraw.drawCylinder(i,L,N,D,d,_,mtoCap),n.GLDraw.drawCylinder(i,x,C,D,d,u,h),n.GLDraw.drawCylinder(i,I,O,D,d,_,mtoCap)),(e.clickable||v.clickable)&&(o=(new n.Vector3).addVectors(L,N).multiplyScalar(.5),a=(new n.Vector3).addVectors(I,O).multiplyScalar(.5),mp3=(new n.Vector3).addVectors(x,C).multiplyScalar(.5),e.clickable&&(cylinder1a=new n.Cylinder(L.clone(),o.clone(),D),cylinder1b=new n.Cylinder(I.clone(),a.clone(),D),cylinder1c=new n.Cylinder(x.clone(),mp3.clone(),D),e.intersectionShape.cylinder.push(cylinder1a),e.intersectionShape.cylinder.push(cylinder1b),e.intersectionShape.cylinder.push(cylinder1c)),v.clickable&&(cylinder2a=new n.Cylinder(N.clone(),o.clone(),D),cylinder2b=new n.Cylinder(O.clone(),a.clone(),D),cylinder2c=new n.Cylinder(C.clone(),mp3.clone(),D),v.intersectionShape.cylinder.push(cylinder2a),v.intersectionShape.cylinder.push(cylinder2b),v.intersectionShape.cylinder.push(cylinder2c))))}}}for(var P=!1,R=0,F=!1,f=0;f<e.bonds.length;f++){var y=c;if(e.bondStyles&&e.bondStyles[f]){var b=e.bondStyles[f];b.singleBond&&(y=!0),b.radius&&b.radius!=s&&(F=!0)}(y||1==e.bondOrder[f])&&R++}if(F?R>0&&(P=!0):0==R&&e.bonds.length>0&&(P=!0),P){e.style;l=s,n.GLDraw.drawSphere(i,e,l,d)}}}},_=function(e){var t,i,r=new n.Object3D,o=[],a={},s={},l=new n.Geometry(!0),c=new n.Geometry(!0),u=new n.Geometry(!0),h=[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY];for(t=0,i=e.length;i>t;t++){var f=e[t];f&&f.style&&(f.clickable&&void 0===f.intersectionShape&&(f.intersectionShape={sphere:[],cylinder:[],line:[],triangle:[]}),T(f,l),z(f,c),x(f,s),S(f,e,a),M(f,e,u),"undefined"==typeof f.style.cartoon||f.style.cartoon.hidden||("spectrum"===f.style.cartoon.color&&"number"==typeof f.resi&&(f.resi<h[0]&&(h[0]=f.resi),f.resi>h[1]&&(h[1]=f.resi)),o.push(f)))}if(o.length>0){var m=null;for(h[0]<h[1]&&(m=new n.Gradient.Sinebow(h[0],h[1])),n.drawCartoon(r,o,m),t=0;t<r.children.length;t++){r.children[t].geometry}}if(l.vertices>0){var g=new n.MeshLambertMaterial({ambient:0,vertexColors:!0,reflectivity:0});l.initTypedArrays();var y=new n.Mesh(l,g);r.add(y)}if(c.vertices>0){var b=new n.ImposterMaterial({ambient:0,vertexColors:!0,reflectivity:0});c.initTypedArrays();var w=new n.Mesh(c,b);console.log("spherei geometry "+c.vertices.length),r.add(w)}if(u.vertices>0){var C=new n.MeshLambertMaterial({vertexColors:!0,ambient:0,reflectivity:0});u.initTypedArrays(),C.wireframe&&u.setUpWireframe();var A=new n.Mesh(u,C);r.add(A)}for(t in a)if(a.hasOwnProperty(t)){var _=t,E=new n.LineBasicMaterial({linewidth:_,vertexColors:!0});a[t].initTypedArrays();var k=new n.Line(a[t],E,n.LinePieces);r.add(k)}for(t in s)if(s.hasOwnProperty(t)){var _=t,D=new n.LineBasicMaterial({linewidth:_,vertexColors:!0});s[t].initTypedArrays();var L=new n.Line(s[t],D,n.LinePieces);r.add(L)}if(v&&!p){var I,N=new n.Object3D;for(I=0;I<d.length;I++){var O=new n.Object3D;O=r.clone(),O.matrix.copy(d[I]),O.matrixAutoUpdate=!1,N.add(O)}return N}return r};this.getSymmetries=function(){return d.length>1?d:idList},this.setSymmetries=function(e){if("undefined"==typeof e){var t=[f];d=t}else d=e},this.getID=function(){return l};var E=function(e,i){for(var r=0;r<e.length;r++){var n=e[r];n&&(n.style=n.style||t,n.color=n.color||g[n.elem]||m,n.model=i,n.clickable&&(n.intersectionShape={sphere:[],cylinder:[],line:[],triangle:[]}))}};this.addMolData=function(e,t,i){if(i=i||{},e){"undefined"==typeof n.Parsers[t]&&(console.log("Unknown format: "+t),t=e.match(/^@<TRIPOS>MOLECULE/)?"mol2":e.match(/^HETATM/)||e.match(/^ATOM/)?"pdb":e.match(/^.*\n.*\n.\s*(\d+)\s+(\d+)/)?"sdf":"xyz",console.log("Best guess: "+t));var r=n.Parsers[t];r(s,e,i,d),p=!i.doAssembly,v=!i.duplicateAssemblyAtoms,E(s,l)}},this.atomIsSelected=function(e,t){if("undefined"==typeof t)return!0;var i=!!t.invert,r=!0;for(var n in t)if("predicate"===n){if(!t.predicate(e)){r=!1;break}}else if(t.hasOwnProperty(n)&&"props"!=n&&"invert"!=n&&"model"!=n&&"byres"!=n&&"expand"!=n&&"within"!=n){if("undefined"==typeof e[n]){r=!1;break}var o=!1;if("bonds"===n){var a=t[n];if(a!=e.bonds.length){r=!1;break}}else if($.isArray(t[n])){for(var s=t[n],l=0;l<s.length;l++)if(e[n]==s[l]){o=!0;break}if(!o){r=!1;break}}else{var a=t[n];if(e[n]!=a){r=!1;break}}}return i?!r:r},this.selectedAtoms=function(e,t){var i=[];t||(t=s);for(var r=t.length,n=0;r>n;n++){var o=t[n];o&&this.atomIsSelected(o,e)&&i.push(o)}if(e.hasOwnProperty("expand"))for(var a=D(i,e.expand),l=i.length,n=0;n<a.length;n++)for(var c=0;l>c;c++){var u=k(a[n],i[c]),h=Math.pow(e.expand,2);h>u&&u>0&&i.push(a[n])}if(e.hasOwnProperty("within")&&e.within.hasOwnProperty("sel")&&e.within.hasOwnProperty("distance")){for(var d=this.selectedAtoms(e.within.sel,s),f=[],n=0;n<d.length;n++)for(var c=0;c<i.length;c++){var u=k(d[n],i[c]),h=Math.pow(e.within.distance,2);h>u&&u>0&&f.push(i[c])}i=f}if(e.hasOwnProperty("byres"))for(var p={},v=[],m=[],n=0;n<i.length;n++){var o=i[n],g=o.chain,y=o.resi;if(void 0===p[g]&&(p[g]={}),o.hasOwnProperty("resi")&&void 0===p[g][y])for(p[g][y]=!0,m.push(o);m.length>0;)if(o=m.pop(),g=o.chain,y=o.resi,void 0===v[o.index]){v[o.index]=!0;for(var c=0;c<o.bonds.length;c++){var b=s[o.bonds[c]];void 0===v[b.index]&&b.hasOwnProperty("resi")&&b.chain==g&&b.resi==y&&(m.push(b),
i.push(b))}}}return i};var k=function(e,t){var i=t.x-e.x,r=t.y-e.y,n=t.z-e.z;return Math.pow(i,2)+Math.pow(r,2)+Math.pow(n,2)},D=function(e,t){for(var i=n.getExtent(e),r=[[],[],[]],o=0;3>o;o++)r[0][o]=i[0][o]-t,r[1][o]=i[1][o]+t,r[2][o]=i[2][o];for(var a=[],o=0;o<s.length;o++){var l=s[o].x,c=s[o].y,u=s[o].z;(l>=r[0][0]&&l<i[0][0]||l>i[1][0]&&l<=r[1][0])&&(c>=r[0][1]&&c<i[0][1]||c>i[1][1]&&c<=r[1][1])&&(u>=r[0][2]&&u<i[0][2]||u>i[1][2]&&u<=r[1][2])&&a.push(s[o])}return a};this.addAtoms=function(e){c=null;var t,i=s.length,r=[];for(t=0;t<e.length;t++)r[e[t].index]=i+t;for(t=0;t<e.length;t++){var n=e[t],o=r[n.index],a=$.extend(!1,{},n);a.index=o,a.bonds=[],a.bondOrder=[];for(var l=0;l<n.bonds.length;l++){var u=r[n.bonds[l]];"undefined"!=typeof u&&(a.bonds.push(u),a.bondOrder.push(n.bondOrder[l]))}s.push(a)}},this.removeAtoms=function(e){c=null;var t,i=[];for(t=0;t<e.length;t++)i[e[t].index]=!0;var r=[];for(t=0;t<s.length;t++){var n=s[t];i[n.index]||r.push(n)}s=[],this.addAtoms(r)},this.setStyle=function(e,t,i){for(var r=$.extend(!0,{},t),n=!1,o=this.selectedAtoms(e,s),a=0;a<s.length;a++)s[a]&&(s[a].capDrawn=!1);for(var a=0;a<o.length;a++){n=!0,o[a].clickable&&(o[a].intersectionShape={sphere:[],cylinder:[],line:[],triangle:[]}),i||(o[a].style={});for(var l in r)r.hasOwnProperty(l)&&(o[a].style[l]=r[l])}n&&(c=null)},this.setColorByElement=function(e,t){if(null===c||!o(t,h)){h=t;var i=this.selectedAtoms(e,i);i.length>0&&(c=null);for(var r=0;r<i.length;r++){var n=i[r];"undefined"!=typeof t[n.elem]&&(n.color=t[n.elem])}}},this.setColorByProperty=function(e,t,i){var r=this.selectedAtoms(e,r);h=null,r.length>0&&(c=null);var n,o,a=Number.POSITIVE_INFINITY,s=Number.NEGATIVE_INFINITY;for(n=0;n<r.length;n++)if(o=r[n],o.properties&&void 0!==typeof o.properties[t]){var l=parseFloat(o.properties[t]);a>l&&(a=l),l>s&&(s=l)}for(n=0;n<r.length;n++)if(o=r[n],o.properties&&void 0!==typeof o.properties[t]){var u=i.valueToHex(parseFloat(o.properties[t]),[a,s]);o.color=u}},this.globj=function(e){new Date;if(null===c){c=_(s);new Date;u&&(e.remove(u),u=null),u=c.clone(),e.add(u)}},this.removegl=function(e){u&&(void 0!==u.geometry&&u.geometry.dispose(),void 0!==u.material&&u.material.dispose(),e.remove(u),u=null),c=null},this.addResLabels=function(e,t,i){for(var r=this.selectedAtoms(e,r),o={},a=0;a<r.length;a++){var s=r[a],l=s.chain,c=s.resn,u=s.resi,h=c+""+u;o[l]||(o[l]={}),o[l][h]||(o[l][h]=[]),o[l][h].push(s)}var d=$.extend(!0,{},i);for(var l in o)if(o.hasOwnProperty(l)){var f=o[l];for(var h in f)if(f.hasOwnProperty(h)){for(var r=f[h],p=new n.Vector3(0,0,0),a=0;a<r.length;a++){var s=r[a];p.x+=s.x,p.y+=s.y,p.z+=s.z}p.divideScalar(r.length),d.position=p,t.addLabel(h,d)}}}}var t={line:{}},i=1,r={H:1.2,Li:1.82,LI:1.82,Na:2.27,NA:2.27,K:2.75,C:1.7,N:1.55,O:1.52,F:1.47,P:1.8,S:1.8,CL:1.75,Cl:1.75,BR:1.85,Br:1.85,SE:1.9,Se:1.9,ZN:1.39,Zn:1.39,CU:1.4,Cu:1.4,NI:1.63,Ni:1.63},o=function(e,t){return e&&t?JSON.stringify(e)==JSON.stringify(t):e==t};return e}(),n.GLShape=function(){function e(e){e=e||{},n.ShapeIDCount++,this.boundingSphere=new n.Sphere,this.intersectionShape={sphere:[],cylinder:[],line:[],triangle:[]},l(this,e);var t=[],c=null,u=null,h=new n.Geometry(!0);this.updateStyle=function(t){for(var i in t)e[i]=t[i];l(this,e)},this.addCustom=function(e){e.vertexArr=e.vertexArr||[],e.faceArr=e.faceArr||[],e.normalArr=e.normalArr||[],e.lineArr=e.lineArr||[];var i=h.addGeoGroup();o(this,i,e),i.truncateArrayBuffers(!0,!0);for(var r=0;r<i.colorArray.length/3;++r)i.colorArray[3*r]=this.color.r,i.colorArray[3*r+1]=this.color.g,i.colorArray[3*r+2]=this.color.b;t.push({id:i.id,geoGroup:i,centroid:i.getCentroid()}),s(this.boundingSphere,t,i.vertexArray)},this.addSphere=function(e){e.center=e.center||{x:0,y:0,z:0},e.radius=e.radius?n.Math.clamp(e.radius,0,1/0):1.5,e.color=n.CC.color(e.color),this.intersectionShape.sphere.push(new n.Sphere(e.center,e.radius));var i=h.addGeoGroup();n.GLDraw.drawSphere(h,e.center,e.radius,e.color),i.truncateArrayBuffers(!0,!0),t.push({id:i.id,geoGroup:i,centroid:new n.Vector3(e.center.x,e.center.y,e.center.z)}),s(this.boundingSphere,t,i.vertexArray)},this.addCylinder=function(e){e.start=e.start||{},e.end=e.end||{};var i=new n.Vector3(e.start.x||0,e.start.y||0,e.start.z||0),r=new n.Vector3(e.end.x||3,e.end.y||0,e.end.z||0),o=e.radius||.1,a=n.CC.color(e.color),l=h.addGeoGroup();n.GLDraw.drawCylinder(h,i,r,o,a,e.fromCap,e.toCap),l.truncateArrayBuffers(!0,!0);var c=new n.Vector3;t.push({id:l.id,geoGroup:l,centroid:c.addVectors(e.start,e.end).multiplyScalar(.5)}),s(this.boundingSphere,t,l.vertexArray)},this.addArrow=function(e){if(e.start=e.start||{},e.end=e.end||{},e.start=new n.Vector3(e.start.x||0,e.start.y||0,e.start.z||0),e.dir instanceof n.Vector3&&e.length instanceof number){var i=e.dir.clone().multiplyScalar(e.length).add(start);e.end=i}else e.end=new n.Vector3(e.end.x||3,e.end.y||0,e.end.z||0);e.radius=e.radius||.1,e.radiusRatio=e.radiusRatio||1.618034,e.mid=0<e.mid&&e.mid<1?e.mid:.618034;var o=h.addGeoGroup();r(this,o,e),o.truncateArrayBuffers(!0,!0);var a=new n.Vector3;t.push({id:o.id,geoGroup:o,centroid:a.addVectors(e.start,e.end).multiplyScalar(.5)}),s(this.boundingSphere,t,o.vertexArray)},this.addVolumetricData=function(e,i,r){var n=void 0!==r.isoval&&"number"==typeof r.isoval?r.isoval:0,o=r.voxel?!0:!1,l=h.addGeoGroup();switch(i){case"cube":a(this,l,e,n,o)}t.push({id:l.id,geoGroup:l,centroid:l.getCentroid()}),this.updateStyle(r),s(this.boundingSphere,t,l.vertexArray)},this.globj=function(e){h.initTypedArrays(),i(h,this.color),c=new n.Object3D;var t=new n.MeshLambertMaterial({wireframe:this.wireframe,vertexColors:!0,ambient:0,reflectivity:0,side:this.side,transparent:this.alpha<1?!0:!1,opacity:this.alpha,wireframeLinewidth:this.linewidth}),r=new n.Mesh(h,t);c.add(r),u&&(e.remove(u),u=null),u=c.clone(),e.add(u)},this.removegl=function(e){u&&(void 0!==u.geometry&&u.geometry.dispose(),void 0!==u.material&&u.material.dispose(),e.remove(u),u=null),c=null}}var t=2,i=function(e,t){var i=t||n.CC.color(t);e.colorsNeedUpdate=!0;for(var r in e.geometryGroups)for(var o=e.geometryGroups[r],a=o.colorArray,s=0,l=o.vertices;l>s;++s)a[3*s]=i.r,a[3*s+1]=i.g,a[3*s+2]=i.b},r=function(e,t,i){var r=i.start,o=i.end,a=i.radius,s=i.radiusRatio,l=i.mid;if(r&&o){var c=o.clone();c.sub(r).multiplyScalar(l);var u=r.clone().add(c),h=c.clone().negate();e.intersectionShape.cylinder.push(new n.Cylinder(r.clone(),u.clone(),a)),e.intersectionShape.sphere.push(new n.Sphere(r.clone(),a));var d=[];d[0]=c.clone(),Math.abs(d[0].x)>1e-4?d[0].y+=1:d[0].x+=1,d[0].cross(c),d[0].normalize(),d[0]=d[0],d[4]=d[0].clone(),d[4].crossVectors(d[0],c),d[4].normalize(),d[8]=d[0].clone().negate(),d[12]=d[4].clone().negate(),d[2]=d[0].clone().add(d[4]).normalize(),d[6]=d[4].clone().add(d[8]).normalize(),d[10]=d[8].clone().add(d[12]).normalize(),d[14]=d[12].clone().add(d[0]).normalize(),d[1]=d[0].clone().add(d[2]).normalize(),d[3]=d[2].clone().add(d[4]).normalize(),d[5]=d[4].clone().add(d[6]).normalize(),d[7]=d[6].clone().add(d[8]).normalize(),d[9]=d[8].clone().add(d[10]).normalize(),d[11]=d[10].clone().add(d[12]).normalize(),d[13]=d[12].clone().add(d[14]).normalize(),d[15]=d[14].clone().add(d[0]).normalize();var f,p,v,m=t.vertices,g=t.vertexArray,y=(t.colorArray,t.faceArray),b=t.normalArray,x=t.lineArray;for(p=0,v=d.length;v>p;++p){f=3*(m+3*p);var w=d[p].clone().multiplyScalar(a).add(r),C=d[p].clone().multiplyScalar(a).add(u),S=d[p].clone().multiplyScalar(a*s).add(u);if(g[f]=w.x,g[f+1]=w.y,g[f+2]=w.z,g[f+3]=C.x,g[f+4]=C.y,g[f+5]=C.z,g[f+6]=S.x,g[f+7]=S.y,g[f+8]=S.z,p>0){var A=g[f-3],T=g[f-2],z=g[f-1],M=new n.Vector3(A,T,z),_=o.clone(),E=u.clone(),k=new n.Vector3(S.x,S.y,S.z);e.intersectionShape.triangle.push(new n.Triangle(k,_,M)),e.intersectionShape.triangle.push(new n.Triangle(M.clone(),E,k.clone()))}}t.vertices+=48,f=3*t.vertices,g[f]=r.x,g[f+1]=r.y,g[f+2]=r.z,g[f+3]=u.x,g[f+4]=u.y,g[f+5]=u.z,g[f+6]=o.x,g[f+7]=o.y,g[f+8]=o.z,t.vertices+=3;var D,L,I,N,O,P,R,F,j,B,q,$,U,V,G,H,W,Y,Q,X,Z=t.vertices-3,K=t.vertices-2,J=t.vertices-1,ee=3*Z,te=3*K,ie=3*J;for(p=0,v=d.length-1;v>p;++p){var re=m+3*p;f=3*re,I=t.faceidx,N=t.lineidx,O=re,q=3*O,P=re+1,$=3*P,R=re+2,U=3*R,F=re+4,V=3*F,j=re+5,G=3*j,B=re+3,H=3*B,L=[d[p],d[p],d[p+1],d[p+1]],W=Y=d[p],Q=X=d[p+1],b[q]=W.x,b[$]=Y.x,b[H]=X.x,b[q+1]=W.y,b[$+1]=Y.y,b[H+1]=X.y,b[q+2]=W.z,b[$+2]=Y.z,b[H+2]=X.z,b[$]=Y.x,b[V]=Q.x,b[H]=X.x,b[$+1]=Y.y,b[V+1]=Q.y,b[H+1]=X.y,b[$+2]=Y.z,b[V+2]=Q.z,b[H+2]=X.z,b[U]=Y.x,b[G]=Q.x,b[U+1]=Y.y,b[G+1]=Q.y,b[U+2]=Y.z,b[G+2]=Q.z,y[I]=O,y[I+1]=P,y[I+2]=B,y[I+3]=P,y[I+4]=F,y[I+5]=B,y[I+6]=O,y[I+7]=B,y[I+8]=Z,y[I+9]=R,y[I+10]=K,y[I+11]=j,y[I+12]=R,y[I+13]=J,y[I+14]=j,x[N]=O,x[N+1]=P,x[N+2]=O,x[N+3]=B,x[N+4]=F,x[N+5]=B,x[N+6]=O,x[N+7]=B,x[N+8]=R,x[N+9]=P,x[N+10]=R,x[N+11]=j,x[N+12]=F,x[N+13]=j,x[N+14]=R,x[N+15]=J,x[N+16]=R,x[N+17]=j,x[N+18]=J,x[N+19]=j,t.faceidx+=15,t.lineidx+=20}D=[m+45,m+46,m+1,m,m+47,m+2],L=[d[15],d[15],d[0],d[0]],I=t.faceidx,N=t.lineidx,O=D[0],q=3*O,P=D[1],$=3*P,R=D[4],U=3*R,F=D[2],V=3*F,j=D[5],G=3*j,B=D[3],H=3*B,W=Y=d[15],Q=X=d[0],b[q]=W.x,b[$]=Y.x,b[H]=X.x,b[q+1]=W.y,b[$+1]=Y.y,b[H+1]=X.y,b[q+2]=W.z,b[$+2]=Y.z,b[H+2]=X.z,b[$]=Y.x,b[V]=Q.x,b[H]=X.x,b[$+1]=Y.y,b[V+1]=Q.y,b[H+1]=X.y,b[$+2]=Y.z,b[V+2]=Q.z,b[H+2]=X.z,b[U]=Y.x,b[G]=Q.x,b[U+1]=Y.y,b[G+1]=Q.y,b[U+2]=Y.z,b[G+2]=Q.z,c.normalize(),h.normalize(),b[ee]=h.x,b[te]=b[ie]=c.x,b[ee+1]=h.y,b[te+1]=b[ie+1]=c.y,b[ee+2]=h.z,b[te+2]=b[ie+2]=c.z,y[I]=O,y[I+1]=P,y[I+2]=B,y[I+3]=P,y[I+4]=F,y[I+5]=B,y[I+6]=O,y[I+7]=B,y[I+8]=Z,y[I+9]=R,y[I+10]=K,y[I+11]=j,y[I+12]=R,y[I+13]=J,y[I+14]=j,x[N]=O,x[N+1]=P,x[N+2]=O,x[N+3]=B,x[N+4]=F,x[N+5]=B,x[N+6]=O,x[N+7]=B,x[N+8]=R,x[N+9]=P,x[N+10]=R,x[N+11]=j,x[N+12]=F,x[N+13]=j,x[N+14]=R,x[N+15]=J,x[N+16]=R,x[N+17]=j,x[N+18]=J,x[N+19]=j,t.faceidx+=15,t.lineidx+=20}},o=function(e,t,i){var r=i.vertexArr,o=i.normalArr,a=i.faceArr,s=i.lineArr;(0===r.length||0===a.length)&&console.warn("Error adding custom shape component: No vertices and/or face indices supplied!"),t.vertices=r.length,t.faceidx=a.length;var l,c,u,h,d,f,p;for(f=0,p=t.vertices;p>f;++f)l=3*f,c=r[f],t.vertexArray[l]=c.x,t.vertexArray[l+1]=c.y,t.vertexArray[l+2]=c.z;for(f=0,p=t.faceidx/3;p>f;++f){l=3*f,u=a[l],h=a[l+1],d=a[l+2];var v=new n.Vector3,m=new n.Vector3,g=new n.Vector3;e.intersectionShape.triangle.push(new n.Triangle(v.copy(r[u]),m.copy(r[h]),g.copy(r[d])))}if(t.faceArray=new Uint16Array(a),t.truncateArrayBuffers(!0,!0),o.length<t.vertices)t.setNormals();else{t.normalArray=new Float32Array(3*t.vertices);var y;for(f=0,p=t.vertices;p>f;++f)l=3*f,y=o[f],t.normalArray[l]=y.x,t.normalArray[l+1]=y.y,t.normalArray[l+2]=y.z}s.length?t.lineArray=new Uint16Array(s):t.setLineIndices(),t.lineidx=t.lineArray.length},a=function(e,i,r,a,s){var l=r.replace(/^\s+/,"").split(/[\n\r]+/);if(!(l.length<6)){var c=l[2].replace(/^\s+/,"").replace(/\s+/g," ").split(" "),u=Math.abs(parseFloat(c[0])),h=new n.Vector3(parseFloat(c[1]),parseFloat(c[2]),parseFloat(c[3]));c=l[3].replace(/^\s+/,"").replace(/\s+/g," ").split(" ");var d=parseFloat(c[0])>0?.529177:1;h.multiplyScalar(d);var f=Math.abs(c[0]),p=new n.Vector3(parseFloat(c[1]),parseFloat(c[2]),parseFloat(c[3])).multiplyScalar(d);c=l[4].replace(/^\s+/,"").replace(/\s+/g," ").split(" ");var v=Math.abs(c[0]);new n.Vector3(parseFloat(c[1]),parseFloat(c[2]),parseFloat(c[3])).multiplyScalar(d);c=l[5].replace(/^\s+/,"").replace(/\s+/g," ").split(" ");var m=Math.abs(c[0]);new n.Vector3(parseFloat(c[1]),parseFloat(c[2]),parseFloat(c[3])).multiplyScalar(d);l=new Float32Array(l.splice(u+7).join(" ").replace(/^\s+/,"").split(/[\s\r]+/));var g,y,b=new Int16Array(f*v*m);for(g=0,y=b.length;y>g;++g)b[g]=-1;var x=new Uint8Array(f*v*m);for(g=0,y=l.length;y>g;++g){var w=a>=0?l[g]-a:a-l[g];w>0&&(x[g]|=t)}var C=[],S=[];n.MarchingCube.march(x,C,S,{fulltable:!0,voxel:s,scale:p.length(),origin:h,nX:f,nY:v,nZ:m}),s||n.MarchingCube.laplacianSmooth(10,C,S),o(e,i,{vertexArr:C,faceArr:S,normalArr:[],lineArr:[]})}},s=function(e,t,i){e.center.set(0,0,0);var r,n;if(t.length>0){for(r=0,n=t.length;n>r;++r){var o=t[r].centroid;e.center.add(o)}e.center.divideScalar(t.length)}var a=e.radius*e.radius;for(r=0,n=i.length/3;n>r;r++){var s=i[3*r],l=i[3*r+1],c=i[3*r+2],u=e.center.distanceToSquared({x:s,y:l,z:c});a=Math.max(a,u)}e.radius=Math.sqrt(a)},l=function(e,t){e.color=t.color||new n.Color,t.color instanceof n.Color||(e.color=n.CC.color(t.color)),e.wireframe=t.wireframe?!0:!1,e.alpha=t.alpha?n.Math.clamp(t.alpha,0,1):1,e.side=void 0!==t.side?t.side:n.DoubleSide,e.linewidth="undefined"==typeof t.linewidth?1:t.linewidth,e.clickable=t.clickable?!0:!1,e.callback="function"==typeof t.callback?t.callback:null};return Object.defineProperty(e.prototype,"position",{get:function(){return this.boundingSphere.center}}),Object.defineProperty(e.prototype,"x",{get:function(){return this.boundingSphere.center.x}}),Object.defineProperty(e.prototype,"y",{get:function(){return this.boundingSphere.center.y}}),Object.defineProperty(e.prototype,"z",{get:function(){return this.boundingSphere.center.z}}),e}(),n.ShapeIDCount=0,n.GLViewer=function(){function e(e,r,o,a){function s(e){var t=[];"undefined"==typeof e&&(e={});var i,r=[];if("undefined"==typeof e.model)for(i=0;i<p.length;i++)p[i]&&r.push(p[i]);else r=e.model,$.isArray(r)||(r=[r]);for(i=0;i<r.length;i++)t=t.concat(r[i].selectedAtoms(e));return t}function l(e,t){"undefined"==typeof t&&(t={});var i,r=[];if("undefined"==typeof t.model)for(i=0;i<p.length;i++)p[i]&&r.push(p[i]);else r=t.model,$.isArray(r)||(r=[r]);for(i=0;i<r.length;i++)if(r[i].atomIsSelected(e,t))return!0;return!1}function c(e,t,i,r){for(var n=0;n<p.length;n++)p[n]&&p[n][e](t,i,r)}function u(e){var t=new n.MeshLambertMaterial;t.vertexColors=n.VertexColors;for(var i in e)"color"===i||"map"===i||e.hasOwnProperty(i)&&(t[i]=e[i]);return void 0!==e.opacity&&(1===e.opacity?t.transparent=!1:t.transparent=!0),t}function h(e,t){for(var i=Number.POSITIVE_INFINITY,r=Number.NEGATIVE_INFINITY,n=0,o=e.length;o>n;n++){var a=e[n];if(a.properties&&"undefined"!=typeof a.properties[t]){var s=a.properties[t];i>s&&(i=s),s>r&&(r=s)}}return isFinite(i)||isFinite(r)?isFinite(i)?isFinite(r)||(r=i):i=r:i=r=0,[i,r]}var d=this,f=e,p=(f.id,[]),v=[],m=[],g=[],y=[],b=f.width(),x=f.height(),w=b/x,C=1,S=800,A=150,T=20,z=new n.Renderer({antialias:!0,premultipliedAlpha:!1});z.domElement.style.width="100%",z.domElement.style.height="100%",z.domElement.style.padding="0",z.domElement.style.position="absolute",z.domElement.style.top="0px",z.domElement.style.zIndex="0",f.append(z.domElement),z.setSize(b,x);var M=new n.Camera(T,w,C,S);M.position=new n.Vector3(0,0,A);var _=new n.Vector3;M.lookAt(_);var E=new n.Raycaster(new n.Vector3(0,0,0),new n.Vector3(0,0,0)),k=new n.Projector,D=new n.Vector3(0,0,0),L=null,I=null,N=null,O=0,P=.4,R=-50,F=50,j=new n.Quaternion(0,0,0,1),B=new n.Quaternion(0,0,0,1),q=!1,U=0,V=0,G=0,H=0,W=0,Y=0,Q=0,X=function(){var e=M.position.z-I.position.z;1>e&&(e=1),M.near=e+R,M.near<1&&(M.near=1),M.far=e+F,M.near+1>M.far&&(M.far=M.near+1),M instanceof n.Camera?M.fov=T:(M.right=e*Math.tan(Math.PI/180*T),M.left=-M.right,M.top=M.right/w,M.bottom=-M.top),M.updateProjectionMatrix(),L.fog.near=M.near+P*(M.far-M.near),L.fog.far=M.far},Z=function(){L&&(X(),z.render(L,M))},K=function(){L=new n.Scene,L.fog=new n.Fog(O,100,200),N=new n.Object3D,I=new n.Object3D,I.useQuaternion=!0,I.quaternion=new n.Quaternion(0,0,0,1),I.add(N),L.add(I);var e=new n.Light(16777215);e.position=new n.Vector3(.2,.2,1).normalize(),e.intensity=1,L.add(e)};K(),z.setClearColorHex(O,1),L.fog.color=n.CC.color(O);var J=null,ee=$(z.domElement),te=function(){y=[];var e,t;for(e=0,t=p.length;t>e;e++){var i=p[e];if(i){var r=i.selectedAtoms({clickable:!0});y=y.concat(r)}}for(e=0,t=m.length;t>e;e++){var n=m[e];n&&n.clickable&&y.push(n)}},ie=function(e,t){if(0!=y.length){var i={x:e,y:t,z:-1};D.set(i.x,i.y,i.z),k.unprojectVector(D,M),D.sub(M.position).normalize(),E.set(M.position,D);var r=[];if(r=E.intersectObjects(N,y),r.length){var n=r[0].clickable;void 0!==n.callback&&"function"==typeof n.callback&&n.callback(n,d)}}},re=function(e){var t=e.originalEvent.targetTouches[0].pageX-e.originalEvent.targetTouches[1].pageX,i=e.originalEvent.targetTouches[0].pageY-e.originalEvent.targetTouches[1].pageY;return Math.sqrt(t*t+i*i)},ne=function(e){var t=e.pageX,i=e.pageY;return e.originalEvent.targetTouches&&e.originalEvent.targetTouches[0]?(t=e.originalEvent.targetTouches[0].pageX,i=e.originalEvent.targetTouches[0].pageY):e.originalEvent.changedTouches&&e.originalEvent.changedTouches[0]&&(t=e.originalEvent.changedTouches[0].pageX,i=e.originalEvent.changedTouches[0].pageY),[t,i]},oe=function(e,t){var i=e/b,r=t/x,o=I.position.z,a=I.quaternion,s=new n.Vector3(0,0,o);return k.projectVector(s,M),s.x+=2*i,s.y-=2*r,k.unprojectVector(s,M),s.z=0,s.applyQuaternion(a),s};a||(ee.bind("mousedown touchstart",function(e){if(e.preventDefault(),L){var t=ne(e),i=t[0],r=t[1];void 0!==i&&(q=!0,J=null,mouseButton=e.which,U=i,V=r,G=0,e.originalEvent.targetTouches&&2==e.originalEvent.targetTouches.length&&(G=re(e)),j=I.quaternion,W=I.position.z,H=N.position.clone(),Y=R,Q=F)}}),ee.bind("DOMMouseScroll mousewheel",function(e){if(e.preventDefault(),L){var t=.85*(A-I.position.z);e.originalEvent.detail?I.position.z+=t*e.originalEvent.detail/10:e.originalEvent.wheelDelta&&(I.position.z-=t*e.originalEvent.wheelDelta/400),I.position.z>A&&(I.position.z=.999*A),Z()}}),ee.bind("contextmenu",function(e){e.preventDefault()}),$("body").bind("mouseup touchend",function(e){if(q&&L){var t=ne(e),i=t[0],r=t[1];if(i==U&&r==V){var n=i/$(window).width()*2-1,o=2*-(r/x)+1;ie(n,o,e,f)}}q=!1}),ee.bind("mousemove touchmove",function(e){if(e.preventDefault(),L&&q){var t=0,i=ne(e),r=i[0],o=i[1];if(void 0!==r){var a=(r-U)/b,s=(o-V)/x;if(0!=G&&e.originalEvent.targetTouches&&2==e.originalEvent.targetTouches.length){var l=re(e);t=2,s=2*(G-l)/(b+x)}else e.originalEvent.targetTouches&&3==e.originalEvent.targetTouches.length&&(t=1);var c,u=Math.sqrt(a*a+s*s);if(3==t||3==mouseButton&&e.ctrlKey)R=Y+100*a,F=Q+100*s;else if(2==t||3==mouseButton||e.shiftKey)c=.85*(A-I.position.z),80>c&&(c=80),I.position.z=W-s*c,I.position.z>A&&(I.position.z=.999*A);else if(1==t||2==mouseButton||e.ctrlKey){var h=oe(r-U,o-V);N.position.addVectors(H,h)}else if((0===t||1==mouseButton)&&0!==u){var d=Math.sin(u*Math.PI)/u;B.x=Math.cos(u*Math.PI),B.y=0,B.z=d*a,B.w=-d*s,I.quaternion=new n.Quaternion(1,0,0,0),I.quaternion.multiply(B),I.quaternion.multiply(j)}Z()}}})),this.setBackgroundColor=function(e,t){"undefined"==typeof t?t=1:(0>t||t>1)&&(t=1);var i=n.CC.color(e);L.fog.color=i,O=i.getHex(),z.setClearColorHex(i.getHex(),t),Z()},this.setWidth=function(e){b=e||b,z.setSize(b,x)},this.setHeight=function(e){x=e||x,z.setSize(b,x)},this.resize=function(){b=f.width(),x=f.height(),w=b/x,z.setSize(b,x),M.aspect=w,M.updateProjectionMatrix(),Z()},$(window).resize(this.resize),this.getModel=function(e){return e=e||p.length-1,p[e]},this.rotate=function(e,t){"undefined"==typeof t&&(t="y");var i=0,r=0,o=0,a=Math.PI*e/180,s=Math.sin(a/2),l=Math.cos(a/2);"x"==t&&(i=s),"y"==t&&(r=s),"z"==t&&(o=s);var c=new n.Quaternion(i,r,o,l).normalize();I.quaternion.multiply(c),Z()},this.getView=function(){if(!N)return[0,0,0,0,0,0,0,1];var e=N.position,t=I.quaternion;return[e.x,e.y,e.z,I.position.z,t.x,t.y,t.z,t.w]},this.setView=function(e){void 0!==e&&(e instanceof Array||8!==e.length)&&N&&I&&(N.position.x=e[0],N.position.y=e[1],N.position.z=e[2],I.position.z=e[3],I.quaternion.x=e[4],I.quaternion.y=e[5],I.quaternion.z=e[6],I.quaternion.w=e[7],"undefined"!=typeof e[8]&&(I.position.x=e[8],I.position.y=e[9]),Z())},this.render=function(){te();var e,t=(new Date,this.getView());for(e=0;e<p.length;e++)p[e]&&p[e].globj(N);for(e=0;e<m.length;e++)m[e]&&m[e].globj(N);for(e in v)if(v.hasOwnProperty(e)){var i=v[e].geo;if(!v[e].finished){i.verticesNeedUpdate=!0,i.elementsNeedUpdate=!0,i.normalsNeedUpdate=!0,i.colorsNeedUpdate=!0,i.buffersNeedUpdate=!0,i.boundingSphere=null,v[e].done&&(v[e].finished=!0),v[e].lastGL&&N.remove(v[e].lastGL);var r=null;r=v[e].mat instanceof n.LineBasicMaterial?new n.Line(i,v[e].mat):new n.Mesh(i,v[e].mat),v[e].mat.transparent&&0==v[e].mat.opacity?r.visible=!1:r.visible=!0,v[e].lastGL=r,N.add(r)}}this.setView(t);new Date},this.pdbData=function(e){for(var t=s(e),i="",r=0,n=t.length;n>r;++r)i+=t[r].pdbline+"\n";return i},this.zoom=function(e){var e=e||2,t=(A-I.position.z)/e;I.position.z=A-t,Z()},this.translate=function(e,t){var i=e/b,r=t/x,o=new n.Vector3(0,0,-A);k.projectVector(o,M),o.x-=i,o.y-=r,k.unprojectVector(o,M),o.z=0,_.add(o),M.lookAt(_),Z()},this.zoomTo=function(e){var t,i;e=e||{};var r=s(e),o=n.getExtent(r);$.isEmptyObject(e)?($.each(m,function(e,t){r.push(t)}),t=r,i=o):(t=s({}),i=n.getExtent(t));var a=new n.Vector3(o[2][0],o[2][1],o[2][2]);N.position=a.clone().multiplyScalar(-1);var l=i[1][0]-i[0][0],c=i[1][1]-i[0][1],u=i[1][2]-i[0][2],h=Math.sqrt(l*l+c*c+u*u);5>h&&(h=5),R=-h/1.9,F=h/2,l=o[1][0]-o[0][0],c=o[1][1]-o[0][1],u=o[1][2]-o[0][2],h=Math.sqrt(l*l+c*c+u*u),5>h&&(h=5);for(var d=25,f=0;f<r.length;f++)if(r[f]){var p=a.distanceToSquared(r[f]);p>d&&(d=p)}var h=2*Math.sqrt(d);I.position.z=-(.5*h/Math.tan(Math.PI/180*M.fov/2)-A),Z()},this.addLabel=function(e,t){var i=new n.Label(e,t);return i.setContext(),N.add(i.sprite),g.push(i),Z(),i},this.addResLabels=function(e,t){c("addResLabels",e,this,t)},this.removeLabel=function(e){for(var t=0;t<g.length;t++)if(g[t]==e){g.splice(t,1),e.dispose(),N.remove(e.sprite);break}},this.removeAllLabels=function(){for(var e=0;e<g.length;e++)N.remove(g[e].sprite);g=[]},this.setLabelStyle=function(e,t){return N.remove(e.sprite),e.dispose(),e.stylespec=t,e.setContext(),N.add(e.sprite),Z(),e},this.setLabelText=function(e,t){return N.remove(e.sprite),e.dispose(),e.text=t,e.setContext(),N.add(e.sprite),Z(),e},this.addShape=function(e){e=e||{};var t=new n.GLShape(e);return t.shapePosition=m.length,m.push(t),t},this.removeShape=function(e){if(e)for(e.removegl(N),delete m[e.shapePosition];m.length>0&&"undefined"==typeof m[m.length-1];)m.pop()},this.removeAllShapes=function(){for(var e=0;e<m.length;e++){var t=m[e];t.removegl(N)}m=[]},this.addSphere=function(e){e=e||{};var t=new n.GLShape(e);return t.shapePosition=m.length,t.addSphere(e),m.push(t),t},this.addArrow=function(e){e=e||{};var t=new n.GLShape(e);return t.shapePosition=m.length,t.addArrow(e),m.push(t),t},this.addCylinder=function(e){e=e||{};var t=new n.GLShape(e);return t.shapePosition=m.length,t.addCylinder(e),m.push(t),t},this.addCustom=function(e){e=e||{};var t=new n.GLShape(e);return t.shapePosition=m.length,t.addCustom(e),m.push(t),t},this.addVolumetricData=function(e,t,i){i=i||{};var r=new n.GLShape(i);return r.shapePosition=m.length,r.addVolumetricData(e,t,i),m.push(r),r},this.addModel=function(e,t,i){var r=new n.GLModel(p.length,o);return r.addMolData(e,t,i),p.push(r),r},this.removeModel=function(e){if(e)for(e.removegl(N),delete p[e.getID()];p.length>0&&"undefined"==typeof p[p.length-1];)p.pop()},this.removeAllModels=function(){for(var e=0;e<p.length;e++){var t=p[e];t.removegl(N)}p=[]},this.createModelFrom=function(e,t){for(var i=new n.GLModel(p.length,o),r=0;r<p.length;r++)if(p[r]){var a=p[r].selectedAtoms(e);i.addAtoms(a),t&&p[r].removeAtoms(a)}return p.push(i),i},this.setStyle=function(e,t){c("setStyle",e,t,!1)},this.addStyle=function(e,t){c("setStyle",e,t,!0)},this.setColorByProperty=function(e,t,i){c("setColorByProperty",e,t,i)},this.setColorByElement=function(e,t){c("setColorByElement",e,t)};var ae=function(e,t){for(var i=[],r=0;r<e.length;r++){var n=e[r];"undefined"!=typeof n&&(n.x<t[0][0]||n.x>t[1][0]||n.y<t[0][1]||n.y>t[1][1]||n.z<t[0][2]||n.z>t[1][2]||i.push(r))}return i},se=function(e){var t=e[1][0]-e[0][0],i=e[1][1]-e[0][1],r=e[1][2]-e[0][2];return t*i*r},le=function(e,t,r){for(var n=[],o=function(e){var t=[];return t[0]=[e[0][0],e[0][1],e[0][2]],t[1]=[e[1][0],e[1][1],e[1][2]],t},a=function(e){if(se(e)<i)return[e];var t,r=e[1][0]-e[0][0],n=e[1][1]-e[0][1],s=e[1][2]-e[0][2];t=r>n&&r>s?0:n>r&&n>s?1:2;var l=o(e),c=o(e),u=(e[1][t]-e[0][t])/2+e[0][t];l[1][t]=u,c[0][t]=u;var h=a(l),d=a(c);return h.concat(d)},s=a(e),l=6,c=0,u=s.length;u>c;c++){var h=o(s[c]);h[0][0]-=l,h[0][1]-=l,h[0][2]-=l,h[1][0]+=l,h[1][1]+=l,h[1][2]+=l;var d=ae(t,h),f=ae(r,s[c]);n.push({extent:s[c],atoms:d,toshow:f})}return n},ce=function(e,t,i){var r,o,a,s=new n.Geometry(!0),l=s.updateGeoGroup(0),c=l.vertexArray,u=t.vertices;for(o=0,a=u.length;a>o;o++)r=3*l.vertices,c[r]=u[o].x,c[r+1]=u[o].y,c[r+2]=u[o].z,l.vertices++;var h=t.faces;l.faceidx=h.length,s.initTypedArrays();var d=[];for(o=0,a=e.length;a>o;o++){var f=e[o];f&&("undefined"!=typeof f.surfaceColor?d[o]=f.surfaceColor:f.color&&(d[o]=n.CC.color(f.color)))}var p,v,m,g,y=l.vertexArray,b=l.colorArray,x=l.normalArray;for(o=0,a=h.length;a>o;o+=3){var w=h[o],C=h[o+1],S=h[o+2],A=u[w].atomid,T=u[C].atomid,z=u[S].atomid,M=3*w,_=3*C,E=3*S;b[M]=d[A].r,b[M+1]=d[A].g,b[M+2]=d[A].b,b[_]=d[T].r,b[_+1]=d[T].g,b[_+2]=d[T].b,b[E]=d[z].r,b[E+1]=d[z].g,b[E+2]=d[z].b,p=new n.Vector3(y[M],y[M+1],y[M+2]),v=new n.Vector3(y[_],y[_+1],y[_+2]),m=new n.Vector3(y[E],y[E+1],y[E+2]),m.subVectors(m,v),p.subVectors(p,v),m.cross(p),g=m,g.normalize(),x[M]+=g.x,x[_]+=g.x,x[E]+=g.x,x[M+1]+=g.y,x[_+1]+=g.y,x[E+1]+=g.y,x[M+2]+=g.z,x[_+2]+=g.z,x[E+2]+=g.z}l.faceArray=new Uint16Array(h);var k=new n.Mesh(s,i);return k.doubleSided=!0,k},ue=function(e,t,i,r,o,a){var s=new Date,l=new n.ProteinSurface;l.initparm(t,1===e?!1:!0,a);new Date;l.fillvoxels(o,i);var c=new Date;l.buildboundary(),e==n.SurfaceType.SES&&(l.fastdistancemap(),l.boundingatom(!1),l.fillvoxelswaals(o,i));var u=new Date;console.log("buildboundaryetc "+(u-c)+"  "+(u-s)+"ms"),l.marchingcube(e);new Date;return l.getFacesAndVertices(r)};this.addMesh=function(e){var t={geo:e.geometry,mat:e.material,done:!0,finished:!1},i=v.length;return v[i]=t,i};var he=function(e){var t=[];return $.each(e,function(e,i){t[e]=$.extend({},i)}),t};this.addSurface=function(e,i,r,o,a){var l=null,c=null,f=he(s(r));l=o?he(s(o)):f,c=a?he(s(a)):f;var p;i=i||{};var m,g,y=(new Date,u(i)),b=n.getExtent(f);if(i.map&&i.map.prop){var x=i.map.prop,w=i.map.scheme||new n.Gradient.RWB,C=w.range();for(C||(C=h(f,x)),m=0,g=l.length;g>m;m++)p=l[m],p.surfaceColor=n.CC.color(w.valueToHex(p.properties[x],C))}else if("undefined"!=typeof i.color)for(m=0,g=l.length;g>m;m++)p=l[m],p.surfaceColor=n.CC.color(i.color);else if("undefined"!=typeof i.colorscheme)for(m=0,g=l.length;g>m;m++){p=l[m];var w=n.elementColors[i.colorscheme];w&&"undefined"!=typeof w[p.elem]&&(p.surfaceColor=n.CC.color(w[p.elem]))}var S=se(b),A=le(b,l,f);if(c&&c.length&&c.length>0){var T=n.getExtent(c),z=function(e,t){var i=function(e,t){var i=e.extent,r=i[1][0]-i[0][0],n=i[1][1]-i[0][1],o=i[1][2]-i[0][2],a=r-t[2][0];a*=a;var s=n-t[2][1];s*=s;var l=o-t[2][2];return l*=l,a+s+l},r=i(e,T),n=i(t,T);return r-n};A.sort(z)}var M={geo:new n.Geometry(!0),mat:y,done:!1,finished:!1},_=v.length;v[_]=M;var E=[];for(m=0,g=l.length;g>m;m++)p=l[m],E[m]={x:p.x,y:p.y,z:p.z,serial:m,elem:p.elem};var k=!!n.syncSurface;if(k){var D=function F(t){if(!(t>=A.length)){var i=ue(e,A[t].extent,A[t].atoms,A[t].toshow,E,S),r=ce(l,i,y);n.mergeGeos(M.geo,r),d.render(),setTimeout(F,1,t+1)}};setTimeout(D,1,0)}else{var L=[];for(0>e&&(e=0),m=0,g=t;g>m;m++){var I=new Worker(n.SurfaceWorker);L.push(I),I.postMessage({type:-1,atoms:E,volume:S})}var N=0,O=function(e){var t=e.data,i=ce(l,t,y);n.mergeGeos(M.geo,i),d.render(),N++,N==A.length&&(M.done=!0)},P=function(e){console.log(e.message+" ("+e.filename+":"+e.lineno+")")};for(m=0;m<A.length;m++){var R=L[m%L.length];R.onmessage=O,R.onerror=P,R.postMessage({type:e,expandedExtent:A[m].extent,extendedAtoms:A[m].atoms,atomsToShow:A[m].toshow})}}return _},this.setSurfaceMaterialStyle=function(e,t){v[e]&&(v[e].mat=u(t),v[e].mat.side=n.FrontSide,v[e].finished=!1)},this.removeSurface=function(e){v[e]&&v[e].lastGL&&(void 0!==v[e].geo&&v[e].geo.dispose(),void 0!==v[e].mat&&v[e].mat.dispose(),N.remove(v[e].lastGL)),delete v[e],Z()},this.removeAllSurfaces=function(){for(var e=0;e<v.length;e++)v[e]&&v[e].lastGL&&(void 0!==v[e].geo&&v[e].geo.dispose(),void 0!==v[e].mat&&v[e].mat.dispose(),N.remove(v[e].lastGL)),delete v[e];Z()},this.jmolMoveTo=function(){var e=N.position,t="center { "+-e.x+" "+-e.y+" "+-e.z+" }; ",i=I.quaternion;return t+="moveto .5 quaternion { "+i.x+" "+i.y+" "+i.z+" "+i.w+" };"},this.clear=function(){this.removeAllSurfaces(),this.removeAllModels(),this.removeAllLabels(),this.removeAllShapes(),Z()},this.mapAtomProperties=function(e,t){t=t||{};var i=s(t);if("function"==typeof e)for(var r=0,n=i.length;n>r;r++){var o=i[r];e(o)}else for(var r=0,n=i.length;n>r;r++)for(var o=i[r],a=0,c=e.length;c>a;a++){var u=e[a];if(u.props)for(var h in u.props)u.props.hasOwnProperty(h)&&l(o,u)&&(o.properties||(o.properties={}),o.properties[h]=u.props[h])}};try{"function"==typeof r&&r(this)}catch(de){console.log("error with glviewer callback: "+de)}}var t=4,i=64e3;return e}(),n.glmolViewer=n.GLViewer;var n=n||{};n.Gradient=function(e,t){},n.Gradient.valueToHex=function(e,t){},n.Gradient.jmolID=function(){},n.Gradient.range=function(){},n.Gradient.RWB=function(e,t){this.valueToHex=function(i,r){var n,o;if(r?(n=r[0],o=r[1]):(n=e,o=t),void 0===i)return 16777215;n>i&&(i=n),i>o&&(i=o);var a,s,l=(o+n)/2;return l>=i?(a=Math.floor(255*Math.sqrt((i-n)/(l-n))),s=16711680+256*a+a):(a=Math.floor(255*Math.sqrt(1-(i-l)/(o-l))),s=65536*a+256*a+255)},this.jmolID=function(){return"rwb"},this.range=function(){return"undefined"!=typeof e&&"undefined"!=typeof t?[e,t]:null}},n.Gradient.ROYGB=function(e,t){this.valueToHex=function(i,r){var n,o;if(r?(n=r[0],o=r[1]):(n=e,o=t),"undefined"==typeof i)return 16777215;n>i&&(i=n),i>o&&(i=o);var a,s,l=(n+o)/2,c=(n+l)/2,u=(l+o)/2;return c>i?(a=Math.floor(255*Math.sqrt((i-n)/(c-n))),s=16711680+256*a+0):l>i?(a=Math.floor(255*Math.sqrt(1-(i-c)/(l-c))),s=65536*a+65280+0):u>i?(a=Math.floor(255*Math.sqrt((i-l)/(u-l))),s=65280+1*a):(a=Math.floor(255*Math.sqrt(1-(i-u)/(o-u))),s=0+256*a+255)},this.jmolID=function(){return"roygb"},this.range=function(){return"undefined"!=typeof e&&"undefined"!=typeof t?[e,t]:null}},n.Gradient.Sinebow=function(e,t){this.valueToHex=function(i,r){var n,o;if(r?(n=r[0],o=r[1]):(n=e,o=t),"undefined"==typeof i)return 16777215;n>i&&(i=n),i>o&&(i=o);var a=(i-n)/(o-n),s=5*a/6+.5,l=Math.sin(Math.PI*s);l*=255*l;var c=Math.sin(Math.PI*(s+1/3));c*=255*c;var u=Math.sin(Math.PI*(s+2/3));return u*=255*u,65536*Math.floor(l)+256*Math.floor(u)+1*Math.floor(c)},this.jmolID=function(){return"sinebow"},this.range=function(){return"undefined"!=typeof e&&"undefined"!=typeof t?[e,t]:null}},n.LabelCount=0,n.Label=function(e,t){this.id=n.LabelCount++,this.stylespec=t||{},this.canvas=document.createElement("canvas"),this.canvas.width=134,this.canvas.height=35,this.context=this.canvas.getContext("2d"),this.sprite=new n.Sprite,this.text=e},n.Label.prototype={constructor:n.Label,getStyle:function(){return this.stylespec},setContext:function(){var e=function(e,t,i,r,n,o,a){e.beginPath(),e.moveTo(t+o,i),e.lineTo(t+r-o,i),e.quadraticCurveTo(t+r,i,t+r,i+o),e.lineTo(t+r,i+n-o),e.quadraticCurveTo(t+r,i+n,t+r-o,i+n),e.lineTo(t+o,i+n),e.quadraticCurveTo(t,i+n,t,i+n-o),e.lineTo(t,i+o),e.quadraticCurveTo(t,i,t+o,i),e.closePath(),e.fill(),a&&e.stroke()},t=function(e,t,i){var r=i;return"undefined"!=typeof e&&(r=e instanceof n.Color?e.scaled():n.CC.color(e).scaled()),"undefined"!=typeof t&&(r.a=parseFloat(t)),r};return function(){var i=this.stylespec,r="undefined"==typeof i.useScreen?!1:i.useScreen,o=i.showBackground;("0"===o||"false"===o)&&(o=!1),"undefined"==typeof o&&(o=!0);var a=i.font?i.font:"sans-serif",s=parseInt(i.fontSize)?parseInt(i.fontSize):18,l=t(i.fontColor,i.fontOpacity,{r:255,g:255,b:255,a:1}),c=i.padding?i.padding:4,u=i.borderThickness?i.borderThickness:0,h=t(i.backgroundColor,i.backgroundOpacity,{r:0,g:0,b:0,a:1}),d=t(i.borderColor,i.borderOpacity,h),f=i.position?i.position:{x:-10,y:1,z:1},p=void 0!==i.inFront?i.inFront:!0;("false"===p||"0"===p)&&(p=!1);var v=i.alignment||n.SpriteAlignment.topLeft,m="";i.bold&&(m="bold "),this.context.font=m+s+"px  "+a;
var g=this.context.measureText(this.text),y=g.width;o||(u=0);var b=y+2.5*u+2*c,x=1.25*s+2*u+2*c;if(i.backgroundImage){var w=i.backgroundImage,C=i.backgroundWidth?i.backgroundWidth:w.width,S=i.backgroundHeight?i.backgroundHeight:w.height;C>b&&(b=C),S>x&&(x=S)}this.canvas.width=b,this.canvas.height=x,this.context.clearRect(0,0,this.canvas.width,this.canvas.height);var m="";if(i.bold&&(m="bold "),this.context.font=m+s+"px  "+a,this.context.fillStyle="rgba("+h.r+","+h.g+","+h.b+","+h.a+")",this.context.strokeStyle="rgba("+d.r+","+d.g+","+d.b+","+d.a+")",this.context.lineWidth=u,o&&e(this.context,u,u,b-2*u,x-2*u,6,u>0),i.backgroundImage){var w=i.backgroundImage,C=i.backgroundWidth?i.backgroundWidth:w.width,S=i.backgroundHeight?i.backgroundHeight:w.height;this.context.drawImage(w,0,0,C,S)}this.context.fillStyle="rgba("+l.r+","+l.g+","+l.b+","+l.a+")",this.context.fillText(this.text,u+c,s+u+c,y);var A=new n.Texture(this.canvas);A.needsUpdate=!0,this.sprite.material=new n.SpriteMaterial({map:A,useScreenCoordinates:r,alignment:v,depthTest:!p}),this.sprite.scale.set(1,1,1),this.sprite.position.set(f.x,f.y,f.z)}}(),dispose:function(){void 0!==this.sprite.material.map&&this.sprite.material.map.dispose(),void 0!==this.sprite.material&&this.sprite.material.dispose()}},n.Parsers=function(){var e={},t=function(e){var t,i,r,n=e.slice(0);for(t=0,r=e.length;r>t;t++)e[t].index||(e[t].index=t);for(n.sort(function(e,t){return e.z-t.z}),t=0,r=n.length;r>t;t++){var o=n[t];for(i=t+1;r>i;i++){var s=n[i];if(s.z-o.z>1.9)break;a(o,s)&&-1==o.bonds.indexOf(s.index)&&(o.bonds.push(s.index),o.bondOrder.push(1),s.bonds.push(o.index),s.bondOrder.push(1))}}},i=function(e){var i,r,n=[],o=[];for(i=0,r=e.length;r>i;i++){var s=e[i];s.index=i,s.hetflag?o.push(s):n.push(s)}t(o),n.sort(function(e,t){return e.chain!=t.chain?e.chain<t.chain?-1:1:e.resi-t.resi});var l,c=-1,u=-1;for(i=0,r=n.length;r>i;i++){var h=n[i];h.resi!==c&&(c=h.resi,l||u++,l=!1),h.reschain=u;for(var d=i+1;d<n.length;d++){var f=n[d];if(f.chain!=h.chain)break;if(f.resi-h.resi>1)break;a(h,f)&&(-1===h.bonds.indexOf(f.index)&&(h.bonds.push(f.index),h.bondOrder.push(1),f.bonds.push(h.index),f.bondOrder.push(1)),h.resi!==f.resi&&(l=!0))}}},r=function(e){var t,i,r,n=3.2,o=10.24,a=[];for(t=0,r=e.length;r>t;t++){e[t].index=t;var s=e[t];s.hetflag||"N"!==s.atom&&"O"!==s.atom||(a.push(s),s.hbondOther=null,s.hbondDistanceSq=Number.POSITIVE_INFINITY)}for(a.sort(function(e,t){return e.z-t.z}),t=0,r=a.length;r>t;t++){var l=a[t];for(i=t+1;r>i;i++){var c=a[i],u=c.z-l.z;if(u>n)break;if(c.atom!=l.atom){var h=Math.abs(c.y-l.y);if(!(h>n)){var d=Math.abs(c.x-l.x);if(!(d>n)){var f=d*d+h*h+u*u;f>o||c.chain==l.chain&&Math.abs(c.resi-l.resi)<4||(f<l.hbondDistanceSq&&(l.hbondOther=c,l.hbondDistanceSq=f),f<c.hbondDistanceSq&&(c.hbondOther=l,c.hbondDistanceSq=f))}}}}}},o=function(e){r(e);var t,i,n,o,a,s,l={};for(t=0,i=e.length;i>t;t++)if(a=e[t],"undefined"==typeof l[a.chain]&&(l[a.chain]=[]),isFinite(a.hbondDistanceSq)){var c=a.hbondOther;4===Math.abs(c.resi-a.resi)?l[a.chain][a.resi]="h":l[a.chain][a.resi]="s"}for(n in l){for(o=1;o<l[n].length-1;o++){var u=l[n][o-1],h=l[n][o+1];s=l[n][o],u==h&&s!=u&&(l[n][o]=u)}for(o=0;o<l[n].length;o++)s=l[n][o],("h"==s||"s"==s)&&l[n][o-1]!=s&&l[n][o+1]!=s&&delete l[n][o]}for(t=0,i=e.length;i>t;t++)a=e[t],s=l[a.chain][a.resi],"undefined"!=typeof s&&(a.ss=s,l[a.chain][a.resi-1]!=s&&(a.ssbegin=!0),l[a.chain][a.resi+1]!=s&&(a.ssend=!0))};e.cube=e.CUBE=function(e,i,r){var n=i.replace(/^\s+/,"").split(/[\n\r]+/);if(!(n.length<6)){var o=n[2].replace(/^\s+/,"").replace(/\s+/g," ").split(" "),a=Math.abs(parseFloat(o[0]));o=n[3].replace(/^\s+/,"").replace(/\s+/g," ").split(" ");var s=parseFloat(o[0])>0?.529177:1;n=n.splice(6,a);for(var l=e.length,c=l+n.length,u=l;c>u;++u){var h={};h.serial=u;var d=n[u-l],f=d.replace(/^\s+/,"").replace(/\s+/g," ").split(" ");6==f[0]?h.elem="C":1==f[0]?h.elem="H":8==f[0]?h.elem="O":17==f[0]&&(h.elem="CL"),h.x=parseFloat(f[2])*s,h.y=parseFloat(f[3])*s,h.z=parseFloat(f[4])*s,h.hetflag=!0,h.bonds=[],h.bondOrder=[],h.properties={},e.push(h)}return t(e),!0}},e.xyz=e.XYZ=function(e,i,r){var n=i.split("\n");if(!(n.length<3)){var o=parseInt(n[0].substr(0,3));if(!(isNaN(o)||0>=o||n.length<o+2)){for(var a=2,s=e.length,l=s+o,c=s;l>c;c++){var u=n[a++],h=u.replace(/^\s+/,"").replace(/\s+/g," ").split(" "),d={};d.serial=c,d.atom=d.elem=h[0],d.x=parseFloat(h[1]),d.y=parseFloat(h[2]),d.z=parseFloat(h[3]),d.hetflag=!0,d.bonds=[],d.bondOrder=[],d.properties={},e[c]=d}return t(e),!0}}},e.sdf=e.SDF=function(e,t,i){var r=!1;"undefined"!=typeof i.keepH&&(r=!i.keepH);var n=t.split("\n");if(!(n.length<4)){var o=parseInt(n[3].substr(0,3));if(!(isNaN(o)||0>=o)){var a=parseInt(n[3].substr(3,3)),s=4;if(!(n.length<4+o+a)){var l,c,u=[],h=e.length,d=h+o;for(l=h;d>l;l++){c=n[s],s++;var f={};f.atom=f.elem=c.substr(31,3).replace(/ /g,""),"H"==f.elem&&r||(f.serial=l,u[l]=e.length,f.x=parseFloat(c.substr(0,10)),f.y=parseFloat(c.substr(10,10)),f.z=parseFloat(c.substr(20,10)),f.hetflag=!0,f.bonds=[],f.bondOrder=[],f.properties={},e.push(f))}for(l=0;a>l;l++){c=n[s],s++;var p=u[parseInt(c.substr(0,3))-1+h],v=u[parseInt(c.substr(3,3))-1+h],m=parseInt(c.substr(6,3));"undefined"!=typeof p&&"undefined"!=typeof v&&(e[p].bonds.push(v),e[p].bondOrder.push(m),e[v].bonds.push(p),e[v].bondOrder.push(m))}return!0}}}},e.mcif=e.cif=function(e,i,r){function o(e,t){for(var i=[],r=0,n=0;n<e.length;){for(;e.substr(n,t.length)!==t&&n<e.length;){if("'"===e[n])for(n++;n<e.length&&"'"!==e[n];)n++;else if('"'===e[n])for(n++;n<e.length&&'"'!==e[n];)n++;n++}i.push(e.substr(r,n-r)),r=n+=t.length}return i}function a(e,t){e in d||(d[e]={});var i=d[e];t in i||(i[t]=[]);var r=i[t];return r}for(var s=i.split("\n"),l=[],c=!1,u=0;u<s.length;u++){var h=s[u].split("#")[0];c?";"===h[0]&&(c=!1):";"===h[0]&&(c=!0),c?l.push(h):""!==h&&l.push(h.trim())}for(var d={},u=0;u<l.length;)if(void 0===l[u][0])u++;else if("_"===l[u][0]){var f=l[u].split(".")[0],p=l[u].split(".")[1].split(/\s/)[0],v=a(f,p),m=l[u].substr(l[u].indexOf(p)+p.length);if(""===m)if(u++,";"===l[u][0]){var g=l[u].substr(1);for(u++;";"!==l[u];)g=g+"\n"+l[u],u++;v.push(g)}else v.push(l[u]);else v.push(m.trim());u++}else if("loop_"===l[u].substr(0,5)){u++;for(var y=[],b=[];""===l[u]||"_"===l[u][0];){if(""!==l[u]){var f=l[u].split(".")[0],p=l[u].split(".")[1].split(/\s/)[0],v=a(f,p);y.push(v),b.push(p)}u++}for(var x=0;u<l.length&&"_"!==l[u][0]&&"loop_"!==l[u].substr(0,5);){for(var h=o(l[u]," "),w=0;w<h.length;w++)""!==h[w]&&(y[x].push(h[w]),x=(x+1)%y.length);u++}}else u++;for(var C={},S=0;S<d._atom_site.id.length;S++)if("TER"!==d._atom_site.group_PDB[S]){var A={};A.id=parseFloat(d._atom_site.id[S]),A.x=parseFloat(d._atom_site.cartn_x[S]),A.y=parseFloat(d._atom_site.cartn_y[S]),A.z=parseFloat(d._atom_site.cartn_z[S]),A.hetflag=!0,A.elem=d._atom_site.type_symbol[S],A.bonds=[],A.bondOrder=[],A.properties={},C[A.id]=A}var T=[],z=0;for(var M in C){var A=C[M];A.index=z,T[z]=A,z++}for(var _={},S=0;S<d._atom_site.id.length;S++){var E=d._atom_site.label_alt_id[S],k=d._atom_site.label_asym_id[S],D=d._atom_site.label_atom_id[S],L=d._atom_site.label_seq_id[S],M=d._atom_site.id[S];void 0===_[E]&&(_[E]={}),void 0===_[E][k]&&(_[E][k]={}),void 0===_[E][k][D]&&(_[E][k][D]={}),_[E][k][D][L]=M}for(var S=0;S<d._struct_conn.id.length;S++){var I=e.length,N=_[d._struct_conn.ptnr1_label_alt_id[S]][d._struct_conn.ptnr1_label_asym_id[S]][d._struct_conn.ptnr1_label_atom_id[S]][d._struct_conn.ptnr1_label_seq_id[S]];if(void 0!==C[N]){var O=C[N].index,P=_[d._struct_conn.ptnr2_label_alt_id[S]][d._struct_conn.ptnr2_label_asym_id[S]][d._struct_conn.ptnr2_label_atom_id[S]][d._struct_conn.ptnr2_label_seq_id[S]];if(void 0!==C[P]){var R=C[P].index;C[N].bonds.push(R+I),C[N].bondOrder.push(1),C[P].bonds.push(O+I),C[P].bondOrder.push(1),console.log("connected "+O+" and "+R)}}}for(var S=0;S<T.length;S++)delete T[S].index,e.push(T[S]);t(e);for(var F=[],S=0;S<d._atom_sites["fract_transf_matrix[1][1]"].length;S++){var j=new n.Matrix4(d._atom_sites["fract_transf_matrix[1][1]"],d._atom_sites["fract_transf_matrix[1][2]"],d._atom_sites["fract_transf_matrix[1][3]"],d._atom_sites["fract_transf_vector[1]"],d._atom_sites["fract_transf_matrix[2][1]"],d._atom_sites["fract_transf_matrix[2][2]"],d._atom_sites["fract_transf_matrix[2][3]"],d._atom_sites["fract_transf_vector[2]"],d._atom_sites["fract_transf_matrix[3][1]"],d._atom_sites["fract_transf_matrix[3][2]"],d._atom_sites["fract_transf_matrix[3][3]"],d._atom_sites["fract_transf_vector[3]"]);F.push(j)}},e.mol2=e.MOL2=function(e,t,i){var r=!1;"undefined"!=typeof i.keepH&&(r=!i.keepH);var n=t.search(/@<TRIPOS>MOLECULE/),o=t.search(/@<TRIPOS>ATOM/);if(-1!=n&&-1!=o){var a=[],s=t.substr(n,t.length).split("\n"),l=s[2].replace(/^\s+/,"").replace(/\s+/g," ").split(" "),c=parseInt(l[0]),u=0;l.length>1&&(u=parseInt(l[1]));var h,d=4;for(h=3;h<s.length;h++)if("@<TRIPOS>ATOM"==s[h]){d=h+1;break}var f,p=e.length,v=p+c;for(h=p;v>h;h++){f=s[d++],l=f.replace(/^\s+/,"").replace(/\s+/g," ").split(" ");var m={};if(m.atom=m.elem=l[5].split(".")[0],"H"==m.elem&&r);else{var g=e.length,y=parseInt(l[0]);m.serial=y,m.x=parseFloat(l[2]),m.y=parseFloat(l[3]),m.z=parseFloat(l[4]),m.atom=l[5];var b=parseFloat(l[8]);m.bonds=[],m.bondOrder=[],m.properties={charge:b,partialCharge:b},a[y]=g,e.push(m)}}for(var x=!1;d<s.length;)if("@<TRIPOS>BOND"==s[d++]){x=!0;break}if(x&&u)for(h=0;u>h;h++){f=s[d++],l=f.replace(/^\s+/,"").replace(/\s+/g," ").split(" ");var w=parseInt(l[1]);fromAtom=e[a[w]];var C=parseInt(l[2]);toAtom=e[a[C]];var S=parseInt(l[3]);isNaN(S)&&(S=1),void 0!==fromAtom&&void 0!==toAtom&&(fromAtom.bonds.push(a[C]),fromAtom.bondOrder.push(S),toAtom.bonds.push(a[w]),toAtom.bondOrder.push(S))}return!0}};var a=function(e,t){var i=3.6,r=e.x-t.x;if(r*=r,r>i)return!1;var n=e.y-t.y;if(n*=n,n>i)return!1;var o=e.z-t.z;if(o*=o,o>i)return!1;var a=r+n+o;return isNaN(a)?!1:.5>a?!1:a>1.3&&("H"==e.elem||"H"==t.elem||"D"==e.elem||"D"==t.elem)?!1:3.6>a&&("S"==e.elem||"S"==t.elem)?!0:a>2.78?!1:!0};return e.pdb=e.PDB=e.pdbqt=e.PDBQT=function(e,t,r,a){var s,l,c,u,h=!r.keepH,d=!r.noSecondaryStructure,f=!r.doAssembly,p=!r.duplicateAssemblyAtoms,v=[],m=e.length,g={sheet:[],helix:[]},y=!1,b=[],x=t.split("\n");for(l=0;l<x.length;l++){u=x[l].replace(/^\s*/,"");var w,C,S,A,T=u.substr(0,6);if("ATOM  "==T||"HETATM"==T){var z,M,_,E,k,D,L,I,N,O,P,R;if(P=u.substr(16,1)," "!=P&&"A"!=P)continue;if(O=parseInt(u.substr(6,5)),s=u.substr(12,4).replace(/ /g,""),z=u.substr(17,3),M=u.substr(21,1),_=parseInt(u.substr(22,4)),E=u.substr(26,1),k=parseFloat(u.substr(30,8)),D=parseFloat(u.substr(38,8)),L=parseFloat(u.substr(46,8)),R=parseFloat(u.substr(60,8)),N=u.substr(76,2).replace(/ /g,""),""===N&&(N=u.substr(12,2).replace(/ /g,"")),("H"==N||"HH"==N||"HD"==N)&&h)continue;I="H"==u[0]?!0:!1,b[O]=e.length,e.push({resn:z,x:k,y:D,z:L,elem:N,hetflag:I,chain:M,resi:_,icode:E,rescode:_+(" "!=E?"^"+E:""),serial:O,atom:s,bonds:[],ss:"c",bondOrder:[],properties:{},b:R,pdbline:u})}else if("SHEET "==T)y=!0,w=u.substr(21,1),C=parseInt(u.substr(22,4)),S=u.substr(32,1),A=parseInt(u.substr(33,4)),g.sheet.push([w,C,S,A]);else if("CONECT"==T){var F=parseInt(u.substr(6,5)),j=e[b[F]];for(c=0;4>c;c++){var B=parseInt(u.substr([11,16,21,26][c],5)),q=e[b[B]];if(void 0!==j&&void 0!==q){var $=b[B];j.bonds[j.bonds.length-1]!=$&&(j.bonds.push($),j.bondOrder.push(1))}}}else if("HELIX "==T)y=!0,w=u.substr(19,1),C=parseInt(u.substr(21,4)),S=u.substr(31,1),A=parseInt(u.substr(33,4)),g.helix.push([w,C,S,A]);else if(!f&&"REMARK"==T&&"BIOMT"==u.substr(13,5)){var U,V=new n.Matrix4;for(U=1;3>=U;U++)if(u=x[l].replace(/^\s*/,""),parseInt(u.substr(18,1))==U)V.elements[U-1]=parseFloat(u.substr(23,10)),V.elements[U-1+4]=parseFloat(u.substr(33,10)),V.elements[U-1+8]=parseFloat(u.substr(43,10)),V.elements[U-1+12]=parseFloat(u.substr(53)),l++;else for(;"BIOMT"==u.substr(13,5);)l++,u=x[l].replace(/^\s*/,"");V.elements[3]=0,V.elements[7]=0,V.elements[11]=0,V.elements[15]=1,v.push(V),a.push(V),l--}}var G=(new Date).getTime();i(e);var H=e.length,W=H,Y=new n.Matrix4;Y.identity();var Q,X;if(p)for(Q=0;Q<e.length;Q++){var Z=[];for(X=0;X<a.length;X++){var K=new n.Vector3;K.set(e[Q].x,e[Q].y,e[Q].x),K.applyMatrix4(a[X]),Z.push(K)}e[Q].symmetries=Z}else for(Q=0;Q<v.length;Q++)if(!v[Q].isEqual(Y)){var U,J=new n.Vector3;for(U=0;H>U;U++){var ee=[];for(X=0;X<e[U].bonds.length;X++)ee.push(e[U].bonds[X]+W);J.set(e[U].x,e[U].y,e[U].z),J.applyMatrix4(v[Q]),e.push({resn:e[U].resn,x:J.x,y:J.y,z:J.z,elem:e[U].elem,hetflag:e[U].hetflag,chain:e[U].chain,resi:e[U].resi,icode:e[U].icode,rescode:e[U].rescode,serial:e[U].serial,atom:e[U].atom,bonds:ee,ss:e[U].ss,bondOrder:e[U].bondOrder,properties:e[U].properties,b:e[U].b,pdbline:e[U].pdbline})}W=e.length}for((d||!y)&&(G=(new Date).getTime(),o(e)),l=m;l<e.length;l++)if(s=e[l],void 0!==s){for(c=0;c<g.sheet.length;c++)s.chain==g.sheet[c][0]&&(s.resi<g.sheet[c][1]||s.resi>g.sheet[c][3]||(s.ss="s",s.resi==g.sheet[c][1]&&(s.ssbegin=!0),s.resi==g.sheet[c][3]&&(s.ssend=!0)));for(c=0;c<g.helix.length;c++)s.chain==g.helix[c][0]&&(s.resi<g.helix[c][1]||s.resi>g.helix[c][3]||(s.ss="h",s.resi==g.helix[c][1]?s.ssbegin=!0:s.resi==g.helix[c][3]&&(s.ssend=!0)))}return!0},e.pqr=e.PQR=function(e,t,r){var n,a,s,l,c=(e.length,!r.noSecondaryStructure),u=[],h=t.split("\n");for(a=0;a<h.length;a++){l=h[a].replace(/^\s*/,"");var d=l.substr(0,6);if("ATOM  "==d||"HETATM"==d){var f=parseInt(l.substr(6,5)),n=l.substr(12,4).replace(/ /g,""),p=l.substr(17,3),v=l.substr(21,1),m=parseInt(l.substr(22,4)),g=l.substr(30).trim().split(/\s+/),y=parseFloat(g[0]),b=parseFloat(g[1]),x=parseFloat(g[2]),w=parseFloat(g[3]),C=parseFloat(g[4]),S=n[0];n.length>1&&n[1].toUpperCase()!=n[1]&&(S=n.substr(0,2)),"H"==l[0]?hetflag=!0:hetflag=!1,u[f]=e.length,e.push({resn:p,x:y,y:b,z:x,elem:S,hetflag:hetflag,chain:v,resi:m,serial:f,atom:n,bonds:[],ss:"c",bondOrder:[],properties:{charge:w,partialCharge:w,radius:C},pdbline:l})}else if("CONECT"==d){var A=parseInt(l.substr(6,5)),T=e[u[A]];for(s=0;4>s;s++){var z=parseInt(l.substr([11,16,21,26][s],5)),M=e[u[z]];void 0!==T&&void 0!==M&&(T.bonds.push(u[z]),T.bondOrder.push(1))}}}return i(e),c&&o(e),!0},e}();var n=n||{};n.partialCharges={"ALA:N":-.15,"ALA:CA":.1,"ALA:CB":0,"ALA:C":.6,"ALA:O":-.55,"ARG:N":-.15,"ARG:CA":.1,"ARG:CB":0,"ARG:CG":0,"ARG:CD":.1,"ARG:NE":-.1,"ARG:CZ":.5,"ARG:NH1":.25,"ARG:NH2":.25,"ARG:C":.6,"ARG:O":-.55,"ASN:N":-.15,"ASN:CA":.1,"ASN:CB":0,"ASN:CG":.55,"ASN:OD1":-.55,"ASN:ND2":0,"ASN:C":.6,"ASN:O":-.55,"ASP:N":-.15,"ASP:CA":.1,"ASP:CB":0,"ASP:CG":.14,"ASP:OD1":-.57,"ASP:OD2":-.57,"ASP:C":.6,"ASP:O":-.55,"CYS:N":-.15,"CYS:CA":.1,"CYS:CB":.19,"CYS:SG":-.19,"CYS:C":.6,"CYS:O":-.55,"GLN:N":-.15,"GLN:CA":.1,"GLN:CB":0,"GLN:CG":0,"GLN:CD":.55,"GLN:OE1":-.55,"GLN:NE2":0,"GLN:C":.6,"GLN:O":-.55,"GLU:N":-.15,"GLU:CA":.1,"GLU:CB":0,"GLU:CG":0,"GLU:CD":.14,"GLU:OE1":-.57,"GLU:OE2":-.57,"GLU:C":.6,"GLU:O":-.55,"GLY:N":-.15,"GLY:CA":.1,"GLY:C":.6,"GLY:O":-.55,"HIS:N":-.15,"HIS:CA":.1,"HIS:CB":0,"HIS:CG":.1,"HIS:ND1":-.1,"HIS:CD2":.1,"HIS:NE2":-.4,"HIS:CE1":.3,"HIS:C":.6,"HIS:O":-.55,"ILE:N":-.15,"ILE:CA":.1,"ILE:CB":0,"ILE:CG2":0,"ILE:CG1":0,"ILE:CD":0,"ILE:C":.6,"ILE:O":-.55,"LEU:N":-.15,"LEU:CA":.1,"LEU:CB":0,"LEU:CG":0,"LEU:CD1":0,"LEU:CD2":0,"LEU:C":.6,"LEU:O":-.55,"LYS:N":-.15,"LYS:CA":.1,"LYS:CB":0,"LYS:CG":0,"LYS:CD":0,"LYS:CE":.25,"LYS:NZ":.75,"LYS:C":.6,"LYS:O":-.55,"MET:N":-.15,"MET:CA":.1,"MET:CB":0,"MET:CG":.06,"MET:SD":-.12,"MET:CE":.06,"MET:C":.6,"MET:O":-.55,"PHE:N":-.15,"PHE:CA":.1,"PHE:CB":0,"PHE:CG":0,"PHE:CD1":0,"PHE:CD2":0,"PHE:CE1":0,"PHE:CE2":0,"PHE:CZ":0,"PHE:C":.6,"PHE:O":-.55,"PRO:N":-.25,"PRO:CD":.1,"PRO:CA":.1,"PRO:CB":0,"PRO:CG":0,"PRO:C":.6,"PRO:O":-.55,"SER:N":-.15,"SER:CA":.1,"SER:CB":.25,"SER:OG":-.25,"SER:C":.6,"SER:O":-.55,"THR:N":-.15,"THR:CA":.1,"THR:CB":.25,"THR:OG1":-.25,"THR:CG2":0,"THR:C":.6,"THR:O":-.55,"TRP:N":-.15,"TRP:CA":.1,"TRP:CB":0,"TRP:CG":-.03,"TRP:CD2":.1,"TRP:CE2":-.04,"TRP:CE3":-.03,"TRP:CD1":.06,"TRP:NE1":-.06,"TRP:CZ2":0,"TRP:CZ3":0,"TRP:CH2":0,"TRP:C":.6,"TRP:O":-.55,"TYR:N":-.15,"TYR:CA":.1,"TYR:CB":0,"TYR:CG":0,"TYR:CD1":0,"TYR:CE1":0,"TYR:CD2":0,"TYR:CE2":0,"TYR:CZ":.25,"TYR:OH":-.25,"TYR:C":.6,"TYR:O":-.55,"VAL:N":-.15,"VAL:CA":.1,"VAL:CB":0,"VAL:CG1":0,"VAL:CG2":0,"VAL:C":.6,"VAL:O":-.55},n.applyPartialCharges=function(e,t){if((!t||"undefined"==typeof e.partialCharge)&&e.resn&&e.atom){var i=e.resn+":"+e.atom;e.properties.partialCharge=n.partialCharges[i]}},function(){var e={};e.defaultcolors,e.callback;var t={};t.color,t.wireframe,t.alpha,t.side,t.clickable,t.callback;var i={};i.vertexArr,i.faceArr,i.normalArr,i.lineArr;var r={};r.radius,r.center;var n={};n.start,n.end,n.radius,n.radiusRatio,n.mid;var o={};o.isoval,o.voxel}()},{}],2:[function(e,t,i){!function(){"use strict";function e(e,t,i,r){function n(e,t){return e-=r,t-=r,0>e||e>=a||0>t||t>=a?!1:o.isDark(e,t)}var o=b(i,t);o.addData(e),o.make(),r=r||0;var a=o.getModuleCount(),s=o.getModuleCount()+2*r,l=function(e,t,i,r){var n=this.isDark,o=1/s;this.isDark=function(a,s){var l=s*o,c=a*o,u=l+o,h=c+o;return n(a,s)&&(e>u||l>i||t>h||c>r)}};this.text=e,this.level=t,this.version=i,this.moduleCount=s,this.isDark=n,this.addBlank=l}function t(t,i,r,n,o){r=Math.max(1,r||1),n=Math.min(40,n||40);for(var a=r;n>=a;a+=1)try{return new e(t,i,a,o)}catch(s){}}function i(e,t,i){var r=i.size,n="bold "+i.mSize*r+"px "+i.fontname,o=v("<canvas/>")[0].getContext("2d");o.font=n;var a=o.measureText(i.label).width,s=i.mSize,l=a/r,c=(1-l)*i.mPosX,u=(1-s)*i.mPosY,h=c+l,d=u+s,f=.01;1===i.mode?e.addBlank(0,u-f,r,d+f):e.addBlank(c-f,u-f,h+f,d+f),t.fillStyle=i.fontcolor,t.font=n,t.fillText(i.label,c*r,u*r+.75*i.mSize*r)}function r(e,t,i){var r=i.size,n=i.image.naturalWidth||1,o=i.image.naturalHeight||1,a=i.mSize,s=a*n/o,l=(1-s)*i.mPosX,c=(1-a)*i.mPosY,u=l+s,h=c+a,d=.01;3===i.mode?e.addBlank(0,c-d,r,h+d):e.addBlank(l-d,c-d,u+d,h+d),t.drawImage(i.image,l*r,c*r,s*r,a*r)}function n(e,t,n){v(n.background).is("img")?t.drawImage(n.background,0,0,n.size,n.size):n.background&&(t.fillStyle=n.background,t.fillRect(n.left,n.top,n.size,n.size));var o=n.mode;1===o||2===o?i(e,t,n):(3===o||4===o)&&r(e,t,n)}function o(e,t,i,r,n,o,a,s){e.isDark(a,s)&&t.rect(r,n,o,o)}function a(e,t,i,r,n,o,a,s,l,c){a?e.moveTo(t+o,i):e.moveTo(t,i),s?(e.lineTo(r-o,i),e.arcTo(r,i,r,n,o)):e.lineTo(r,i),l?(e.lineTo(r,n-o),e.arcTo(r,n,t,n,o)):e.lineTo(r,n),c?(e.lineTo(t+o,n),e.arcTo(t,n,t,i,o)):e.lineTo(t,n),a?(e.lineTo(t,i+o),e.arcTo(t,i,r,i,o)):e.lineTo(t,i)}function s(e,t,i,r,n,o,a,s,l,c){a&&(e.moveTo(t+o,i),e.lineTo(t,i),e.lineTo(t,i+o),e.arcTo(t,i,t+o,i,o)),s&&(e.moveTo(r-o,i),e.lineTo(r,i),e.lineTo(r,i+o),e.arcTo(r,i,r-o,i,o)),l&&(e.moveTo(r-o,n),e.lineTo(r,n),e.lineTo(r,n-o),e.arcTo(r,n,r-o,n,o)),c&&(e.moveTo(t+o,n),e.lineTo(t,n),e.lineTo(t,n-o),e.arcTo(t,n,t+o,n,o))}function l(e,t,i,r,n,o,l,c){var u=e.isDark,h=r+o,d=n+o,f=i.radius*o,p=l-1,v=l+1,m=c-1,g=c+1,y=u(l,c),b=u(p,m),x=u(p,c),w=u(p,g),C=u(l,g),S=u(v,g),A=u(v,c),T=u(v,m),z=u(l,m);y?a(t,r,n,h,d,f,!x&&!z,!x&&!C,!A&&!C,!A&&!z):s(t,r,n,h,d,f,x&&z&&b,x&&C&&w,A&&C&&S,A&&z&&T)}function c(e,t,i){var r,n,a=e.moduleCount,s=i.size/a,c=o;for(g&&i.radius>0&&i.radius<=.5&&(c=l),t.beginPath(),r=0;a>r;r+=1)for(n=0;a>n;n+=1){var u=i.left+n*s,h=i.top+r*s,d=s;c(e,t,i,u,h,d,r,n)}if(v(i.fill).is("img")){t.strokeStyle="rgba(0,0,0,0.5)",t.lineWidth=2,t.stroke();var f=t.globalCompositeOperation;t.globalCompositeOperation="destination-out",t.fill(),t.globalCompositeOperation=f,t.clip(),t.drawImage(i.fill,0,0,i.size,i.size),t.restore()}else t.fillStyle=i.fill,t.fill()}function u(e,i){var r=t(i.text,i.ecLevel,i.minVersion,i.maxVersion,i.quiet);if(!r)return null;var o=v(e).data("qrcode",r),a=o[0].getContext("2d");return n(r,a,i),c(r,a,i),o}function h(e){var t=v("<canvas/>").attr("width",e.size).attr("height",e.size);return u(t,e)}function d(e){return v("<img/>").attr("src",h(e)[0].toDataURL("image/png"))}function f(e){var i=t(e.text,e.ecLevel,e.minVersion,e.maxVersion,e.quiet);if(!i)return null;var r,n,o=e.size,a=e.background,s=Math.floor,l=i.moduleCount,c=s(o/l),u=s(.5*(o-c*l)),h={position:"relative",left:0,top:0,padding:0,margin:0,width:o,height:o},d={position:"absolute",padding:0,margin:0,width:c,height:c,"background-color":e.fill},f=v("<div/>").data("qrcode",i).css(h);for(a&&f.css("background-color",a),r=0;l>r;r+=1)for(n=0;l>n;n+=1)i.isDark(r,n)&&v("<div/>").css(d).css({left:u+n*c,top:u+r*c}).appendTo(f);return f}function p(e){return m&&"canvas"===e.render?h(e):m&&"image"===e.render?d(e):f(e)}var v=jQuery,m=function(){var e=document.createElement("canvas");return!(!e.getContext||!e.getContext("2d"))}(),g="[object Opera]"!==Object.prototype.toString.call(window.opera),y={render:"canvas",minVersion:1,maxVersion:40,ecLevel:"L",left:0,top:0,size:200,fill:"#000",background:null,text:"no text",radius:0,quiet:0,mode:0,mSize:.1,mPosX:.5,mPosY:.5,label:"no label",fontname:"sans",fontcolor:"#000",image:null};v.fn.qrcode=function(e){var t=v.extend({},y,e);return this.each(function(){"canvas"===this.nodeName.toLowerCase()?u(this,t):v(this).append(p(t))})};var b=function(){function e(t,i){if("undefined"==typeof t.length)throw new Error(t.length+"/"+i);var r=function(){for(var e=0;e<t.length&&0==t[e];)e+=1;for(var r=new Array(t.length-e+i),n=0;n<t.length-e;n+=1)r[n]=t[n+e];return r}(),n={};return n.get=function(e){return r[e]},n.getLength=function(){return r.length},n.multiply=function(t){for(var i=new Array(n.getLength()+t.getLength()-1),r=0;r<n.getLength();r+=1)for(var o=0;o<t.getLength();o+=1)i[r+o]^=a.gexp(a.glog(n.get(r))+a.glog(t.get(o)));return e(i,0)},n.mod=function(t){if(n.getLength()-t.getLength()<0)return n;for(var i=a.glog(n.get(0))-a.glog(t.get(0)),r=new Array(n.getLength()),o=0;o<n.getLength();o+=1)r[o]=n.get(o);for(var o=0;o<t.getLength();o+=1)r[o]^=a.gexp(a.glog(t.get(o))+i);return e(r,0).mod(t)},n}var t=function(t,i){var n=236,a=17,u=t,h=r[i],d=null,f=0,v=null,m=new Array,g={},y=function(e,t){f=4*u+17,d=function(e){for(var t=new Array(e),i=0;e>i;i+=1){t[i]=new Array(e);for(var r=0;e>r;r+=1)t[i][r]=null}return t}(f),b(0,0),b(f-7,0),b(0,f-7),C(),w(),A(e,t),u>=7&&S(e),null==v&&(v=M(u,h,m)),T(v,t)},b=function(e,t){for(var i=-1;7>=i;i+=1)if(!(-1>=e+i||e+i>=f))for(var r=-1;7>=r;r+=1)-1>=t+r||t+r>=f||(i>=0&&6>=i&&(0==r||6==r)||r>=0&&6>=r&&(0==i||6==i)||i>=2&&4>=i&&r>=2&&4>=r?d[e+i][t+r]=!0:d[e+i][t+r]=!1)},x=function(){for(var e=0,t=0,i=0;8>i;i+=1){y(!0,i);var r=o.getLostPoint(g);(0==i||e>r)&&(e=r,t=i)}return t},w=function(){for(var e=8;f-8>e;e+=1)null==d[e][6]&&(d[e][6]=e%2==0);for(var t=8;f-8>t;t+=1)null==d[6][t]&&(d[6][t]=t%2==0)},C=function(){for(var e=o.getPatternPosition(u),t=0;t<e.length;t+=1)for(var i=0;i<e.length;i+=1){var r=e[t],n=e[i];if(null==d[r][n])for(var a=-2;2>=a;a+=1)for(var s=-2;2>=s;s+=1)-2==a||2==a||-2==s||2==s||0==a&&0==s?d[r+a][n+s]=!0:d[r+a][n+s]=!1}},S=function(e){for(var t=o.getBCHTypeNumber(u),i=0;18>i;i+=1){var r=!e&&1==(t>>i&1);d[Math.floor(i/3)][i%3+f-8-3]=r}for(var i=0;18>i;i+=1){var r=!e&&1==(t>>i&1);d[i%3+f-8-3][Math.floor(i/3)]=r}},A=function(e,t){for(var i=h<<3|t,r=o.getBCHTypeInfo(i),n=0;15>n;n+=1){var a=!e&&1==(r>>n&1);6>n?d[n][8]=a:8>n?d[n+1][8]=a:d[f-15+n][8]=a}for(var n=0;15>n;n+=1){var a=!e&&1==(r>>n&1);8>n?d[8][f-n-1]=a:9>n?d[8][15-n-1+1]=a:d[8][15-n-1]=a}d[f-8][8]=!e},T=function(e,t){for(var i=-1,r=f-1,n=7,a=0,s=o.getMaskFunction(t),l=f-1;l>0;l-=2)for(6==l&&(l-=1);;){for(var c=0;2>c;c+=1)if(null==d[r][l-c]){var u=!1;a<e.length&&(u=1==(e[a]>>>n&1));var h=s(r,l-c);h&&(u=!u),d[r][l-c]=u,n-=1,-1==n&&(a+=1,n=7)}if(r+=i,0>r||r>=f){r-=i,i=-i;break}}},z=function(t,i){for(var r=0,n=0,a=0,s=new Array(i.length),l=new Array(i.length),c=0;c<i.length;c+=1){var u=i[c].dataCount,h=i[c].totalCount-u;n=Math.max(n,u),a=Math.max(a,h),s[c]=new Array(u);for(var d=0;d<s[c].length;d+=1)s[c][d]=255&t.getBuffer()[d+r];r+=u;var f=o.getErrorCorrectPolynomial(h),p=e(s[c],f.getLength()-1),v=p.mod(f);l[c]=new Array(f.getLength()-1);for(var d=0;d<l[c].length;d+=1){var m=d+v.getLength()-l[c].length;l[c][d]=m>=0?v.get(m):0}}for(var g=0,d=0;d<i.length;d+=1)g+=i[d].totalCount;for(var y=new Array(g),b=0,d=0;n>d;d+=1)for(var c=0;c<i.length;c+=1)d<s[c].length&&(y[b]=s[c][d],b+=1);for(var d=0;a>d;d+=1)for(var c=0;c<i.length;c+=1)d<l[c].length&&(y[b]=l[c][d],b+=1);return y},M=function(e,t,i){for(var r=s.getRSBlocks(e,t),c=l(),u=0;u<i.length;u+=1){var h=i[u];c.put(h.getMode(),4),c.put(h.getLength(),o.getLengthInBits(h.getMode(),e)),h.write(c)}for(var d=0,u=0;u<r.length;u+=1)d+=r[u].dataCount;if(c.getLengthInBits()>8*d)throw new Error("code length overflow. ("+c.getLengthInBits()+">"+8*d+")");for(c.getLengthInBits()+4<=8*d&&c.put(0,4);c.getLengthInBits()%8!=0;)c.putBit(!1);for(;;){if(c.getLengthInBits()>=8*d)break;if(c.put(n,8),c.getLengthInBits()>=8*d)break;c.put(a,8)}return z(c,r)};return g.addData=function(e){var t=c(e);m.push(t),v=null},g.isDark=function(e,t){if(0>e||e>=f||0>t||t>=f)throw new Error(e+","+t);return d[e][t]},g.getModuleCount=function(){return f},g.make=function(){y(!1,x())},g.createTableTag=function(e,t){e=e||2,t="undefined"==typeof t?4*e:t;var i="";i+='<table style="',i+=" border-width: 0px; border-style: none;",i+=" border-collapse: collapse;",i+=" padding: 0px; margin: "+t+"px;",i+='">',i+="<tbody>";for(var r=0;r<g.getModuleCount();r+=1){i+="<tr>";for(var n=0;n<g.getModuleCount();n+=1)i+='<td style="',i+=" border-width: 0px; border-style: none;",i+=" border-collapse: collapse;",i+=" padding: 0px; margin: 0px;",i+=" width: "+e+"px;",i+=" height: "+e+"px;",i+=" background-color: ",i+=g.isDark(r,n)?"#000000":"#ffffff",i+=";",i+='"/>';i+="</tr>"}return i+="</tbody>",i+="</table>"},g.createImgTag=function(e,t){e=e||2,t="undefined"==typeof t?4*e:t;var i=g.getModuleCount()*e+2*t,r=t,n=i-t;return p(i,i,function(t,i){if(t>=r&&n>t&&i>=r&&n>i){var o=Math.floor((t-r)/e),a=Math.floor((i-r)/e);return g.isDark(a,o)?0:1}return 1})},g};t.stringToBytes=function(e){for(var t=new Array,i=0;i<e.length;i+=1){var r=e.charCodeAt(i);t.push(255&r)}return t},t.createStringToBytes=function(e,t){var i=function(){for(var i=d(e),r=function(){var e=i.read();if(-1==e)throw new Error;return e},n=0,o={};;){var a=i.read();if(-1==a)break;var s=r(),l=r(),c=r(),u=String.fromCharCode(a<<8|s),h=l<<8|c;o[u]=h,n+=1}if(n!=t)throw new Error(n+" != "+t);return o}(),r="?".charCodeAt(0);return function(e){for(var t=new Array,n=0;n<e.length;n+=1){var o=e.charCodeAt(n);if(128>o)t.push(o);else{var a=i[e.charAt(n)];"number"==typeof a?(255&a)==a?t.push(a):(t.push(a>>>8),t.push(255&a)):t.push(r)}}return t}};var i={MODE_NUMBER:1,MODE_ALPHA_NUM:2,MODE_8BIT_BYTE:4,MODE_KANJI:8},r={L:1,M:0,Q:3,H:2},n={PATTERN000:0,PATTERN001:1,PATTERN010:2,PATTERN011:3,PATTERN100:4,PATTERN101:5,PATTERN110:6,PATTERN111:7},o=function(){var t=[[],[6,18],[6,22],[6,26],[6,30],[6,34],[6,22,38],[6,24,42],[6,26,46],[6,28,50],[6,30,54],[6,32,58],[6,34,62],[6,26,46,66],[6,26,48,70],[6,26,50,74],[6,30,54,78],[6,30,56,82],[6,30,58,86],[6,34,62,90],[6,28,50,72,94],[6,26,50,74,98],[6,30,54,78,102],[6,28,54,80,106],[6,32,58,84,110],[6,30,58,86,114],[6,34,62,90,118],[6,26,50,74,98,122],[6,30,54,78,102,126],[6,26,52,78,104,130],[6,30,56,82,108,134],[6,34,60,86,112,138],[6,30,58,86,114,142],[6,34,62,90,118,146],[6,30,54,78,102,126,150],[6,24,50,76,102,128,154],[6,28,54,80,106,132,158],[6,32,58,84,110,136,162],[6,26,54,82,110,138,166],[6,30,58,86,114,142,170]],r=1335,o=7973,s=21522,l={},c=function(e){for(var t=0;0!=e;)t+=1,e>>>=1;return t};return l.getBCHTypeInfo=function(e){for(var t=e<<10;c(t)-c(r)>=0;)t^=r<<c(t)-c(r);return(e<<10|t)^s},l.getBCHTypeNumber=function(e){for(var t=e<<12;c(t)-c(o)>=0;)t^=o<<c(t)-c(o);return e<<12|t},l.getPatternPosition=function(e){return t[e-1]},l.getMaskFunction=function(e){switch(e){case n.PATTERN000:return function(e,t){return(e+t)%2==0};case n.PATTERN001:return function(e,t){return e%2==0};case n.PATTERN010:return function(e,t){return t%3==0};case n.PATTERN011:return function(e,t){return(e+t)%3==0};case n.PATTERN100:return function(e,t){return(Math.floor(e/2)+Math.floor(t/3))%2==0};case n.PATTERN101:return function(e,t){return e*t%2+e*t%3==0};case n.PATTERN110:return function(e,t){return(e*t%2+e*t%3)%2==0};case n.PATTERN111:return function(e,t){return(e*t%3+(e+t)%2)%2==0};default:throw new Error("bad maskPattern:"+e)}},l.getErrorCorrectPolynomial=function(t){for(var i=e([1],0),r=0;t>r;r+=1)i=i.multiply(e([1,a.gexp(r)],0));return i},l.getLengthInBits=function(e,t){if(t>=1&&10>t)switch(e){case i.MODE_NUMBER:return 10;case i.MODE_ALPHA_NUM:return 9;case i.MODE_8BIT_BYTE:return 8;case i.MODE_KANJI:return 8;default:throw new Error("mode:"+e)}else if(27>t)switch(e){case i.MODE_NUMBER:return 12;case i.MODE_ALPHA_NUM:return 11;case i.MODE_8BIT_BYTE:return 16;case i.MODE_KANJI:return 10;default:throw new Error("mode:"+e)}else{if(!(41>t))throw new Error("type:"+t);switch(e){case i.MODE_NUMBER:return 14;case i.MODE_ALPHA_NUM:return 13;case i.MODE_8BIT_BYTE:return 16;case i.MODE_KANJI:return 12;default:throw new Error("mode:"+e)}}},l.getLostPoint=function(e){for(var t=e.getModuleCount(),i=0,r=0;t>r;r+=1)for(var n=0;t>n;n+=1){for(var o=0,a=e.isDark(r,n),s=-1;1>=s;s+=1)if(!(0>r+s||r+s>=t))for(var l=-1;1>=l;l+=1)0>n+l||n+l>=t||(0!=s||0!=l)&&a==e.isDark(r+s,n+l)&&(o+=1);o>5&&(i+=3+o-5)}for(var r=0;t-1>r;r+=1)for(var n=0;t-1>n;n+=1){var c=0;e.isDark(r,n)&&(c+=1),e.isDark(r+1,n)&&(c+=1),e.isDark(r,n+1)&&(c+=1),e.isDark(r+1,n+1)&&(c+=1),(0==c||4==c)&&(i+=3)}for(var r=0;t>r;r+=1)for(var n=0;t-6>n;n+=1)e.isDark(r,n)&&!e.isDark(r,n+1)&&e.isDark(r,n+2)&&e.isDark(r,n+3)&&e.isDark(r,n+4)&&!e.isDark(r,n+5)&&e.isDark(r,n+6)&&(i+=40);for(var n=0;t>n;n+=1)for(var r=0;t-6>r;r+=1)e.isDark(r,n)&&!e.isDark(r+1,n)&&e.isDark(r+2,n)&&e.isDark(r+3,n)&&e.isDark(r+4,n)&&!e.isDark(r+5,n)&&e.isDark(r+6,n)&&(i+=40);for(var u=0,n=0;t>n;n+=1)for(var r=0;t>r;r+=1)e.isDark(r,n)&&(u+=1);var h=Math.abs(100*u/t/t-50)/5;return i+=10*h},l}(),a=function(){for(var e=new Array(256),t=new Array(256),i=0;8>i;i+=1)e[i]=1<<i;for(var i=8;256>i;i+=1)e[i]=e[i-4]^e[i-5]^e[i-6]^e[i-8];for(var i=0;255>i;i+=1)t[e[i]]=i;var r={};return r.glog=function(e){if(1>e)throw new Error("glog("+e+")");return t[e]},r.gexp=function(t){for(;0>t;)t+=255;for(;t>=256;)t-=255;return e[t]},r}(),s=function(){var e=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16],[4,101,81],[1,80,50,4,81,51],[4,50,22,4,51,23],[3,36,12,8,37,13],[2,116,92,2,117,93],[6,58,36,2,59,37],[4,46,20,6,47,21],[7,42,14,4,43,15],[4,133,107],[8,59,37,1,60,38],[8,44,20,4,45,21],[12,33,11,4,34,12],[3,145,115,1,146,116],[4,64,40,5,65,41],[11,36,16,5,37,17],[11,36,12,5,37,13],[5,109,87,1,110,88],[5,65,41,5,66,42],[5,54,24,7,55,25],[11,36,12],[5,122,98,1,123,99],[7,73,45,3,74,46],[15,43,19,2,44,20],[3,45,15,13,46,16],[1,135,107,5,136,108],[10,74,46,1,75,47],[1,50,22,15,51,23],[2,42,14,17,43,15],[5,150,120,1,151,121],[9,69,43,4,70,44],[17,50,22,1,51,23],[2,42,14,19,43,15],[3,141,113,4,142,114],[3,70,44,11,71,45],[17,47,21,4,48,22],[9,39,13,16,40,14],[3,135,107,5,136,108],[3,67,41,13,68,42],[15,54,24,5,55,25],[15,43,15,10,44,16],[4,144,116,4,145,117],[17,68,42],[17,50,22,6,51,23],[19,46,16,6,47,17],[2,139,111,7,140,112],[17,74,46],[7,54,24,16,55,25],[34,37,13],[4,151,121,5,152,122],[4,75,47,14,76,48],[11,54,24,14,55,25],[16,45,15,14,46,16],[6,147,117,4,148,118],[6,73,45,14,74,46],[11,54,24,16,55,25],[30,46,16,2,47,17],[8,132,106,4,133,107],[8,75,47,13,76,48],[7,54,24,22,55,25],[22,45,15,13,46,16],[10,142,114,2,143,115],[19,74,46,4,75,47],[28,50,22,6,51,23],[33,46,16,4,47,17],[8,152,122,4,153,123],[22,73,45,3,74,46],[8,53,23,26,54,24],[12,45,15,28,46,16],[3,147,117,10,148,118],[3,73,45,23,74,46],[4,54,24,31,55,25],[11,45,15,31,46,16],[7,146,116,7,147,117],[21,73,45,7,74,46],[1,53,23,37,54,24],[19,45,15,26,46,16],[5,145,115,10,146,116],[19,75,47,10,76,48],[15,54,24,25,55,25],[23,45,15,25,46,16],[13,145,115,3,146,116],[2,74,46,29,75,47],[42,54,24,1,55,25],[23,45,15,28,46,16],[17,145,115],[10,74,46,23,75,47],[10,54,24,35,55,25],[19,45,15,35,46,16],[17,145,115,1,146,116],[14,74,46,21,75,47],[29,54,24,19,55,25],[11,45,15,46,46,16],[13,145,115,6,146,116],[14,74,46,23,75,47],[44,54,24,7,55,25],[59,46,16,1,47,17],[12,151,121,7,152,122],[12,75,47,26,76,48],[39,54,24,14,55,25],[22,45,15,41,46,16],[6,151,121,14,152,122],[6,75,47,34,76,48],[46,54,24,10,55,25],[2,45,15,64,46,16],[17,152,122,4,153,123],[29,74,46,14,75,47],[49,54,24,10,55,25],[24,45,15,46,46,16],[4,152,122,18,153,123],[13,74,46,32,75,47],[48,54,24,14,55,25],[42,45,15,32,46,16],[20,147,117,4,148,118],[40,75,47,7,76,48],[43,54,24,22,55,25],[10,45,15,67,46,16],[19,148,118,6,149,119],[18,75,47,31,76,48],[34,54,24,34,55,25],[20,45,15,61,46,16]],t=function(e,t){
var i={};return i.totalCount=e,i.dataCount=t,i},i={},n=function(t,i){switch(i){case r.L:return e[4*(t-1)+0];case r.M:return e[4*(t-1)+1];case r.Q:return e[4*(t-1)+2];case r.H:return e[4*(t-1)+3];default:return}};return i.getRSBlocks=function(e,i){var r=n(e,i);if("undefined"==typeof r)throw new Error("bad rs block @ typeNumber:"+e+"/errorCorrectLevel:"+i);for(var o=r.length/3,a=new Array,s=0;o>s;s+=1)for(var l=r[3*s+0],c=r[3*s+1],u=r[3*s+2],h=0;l>h;h+=1)a.push(t(c,u));return a},i}(),l=function(){var e=new Array,t=0,i={};return i.getBuffer=function(){return e},i.get=function(t){var i=Math.floor(t/8);return 1==(e[i]>>>7-t%8&1)},i.put=function(e,t){for(var r=0;t>r;r+=1)i.putBit(1==(e>>>t-r-1&1))},i.getLengthInBits=function(){return t},i.putBit=function(i){var r=Math.floor(t/8);e.length<=r&&e.push(0),i&&(e[r]|=128>>>t%8),t+=1},i},c=function(e){var r=i.MODE_8BIT_BYTE,n=t.stringToBytes(e),o={};return o.getMode=function(){return r},o.getLength=function(e){return n.length},o.write=function(e){for(var t=0;t<n.length;t+=1)e.put(n[t],8)},o},u=function(){var e=new Array,t={};return t.writeByte=function(t){e.push(255&t)},t.writeShort=function(e){t.writeByte(e),t.writeByte(e>>>8)},t.writeBytes=function(e,i,r){i=i||0,r=r||e.length;for(var n=0;r>n;n+=1)t.writeByte(e[n+i])},t.writeString=function(e){for(var i=0;i<e.length;i+=1)t.writeByte(e.charCodeAt(i))},t.toByteArray=function(){return e},t.toString=function(){var t="";t+="[";for(var i=0;i<e.length;i+=1)i>0&&(t+=","),t+=e[i];return t+="]"},t},h=function(){var e=0,t=0,i=0,r="",n={},o=function(e){r+=String.fromCharCode(a(63&e))},a=function(e){if(0>e);else{if(26>e)return 65+e;if(52>e)return 97+(e-26);if(62>e)return 48+(e-52);if(62==e)return 43;if(63==e)return 47}throw new Error("n:"+e)};return n.writeByte=function(r){for(e=e<<8|255&r,t+=8,i+=1;t>=6;)o(e>>>t-6),t-=6},n.flush=function(){if(t>0&&(o(e<<6-t),e=0,t=0),i%3!=0)for(var n=3-i%3,a=0;n>a;a+=1)r+="="},n.toString=function(){return r},n},d=function(e){var t=e,i=0,r=0,n=0,o={};o.read=function(){for(;8>n;){if(i>=t.length){if(0==n)return-1;throw new Error("unexpected end of file./"+n)}var e=t.charAt(i);if(i+=1,"="==e)return n=0,-1;e.match(/^\s$/)||(r=r<<6|a(e.charCodeAt(0)),n+=6)}var o=r>>>n-8&255;return n-=8,o};var a=function(e){if(e>=65&&90>=e)return e-65;if(e>=97&&122>=e)return e-97+26;if(e>=48&&57>=e)return e-48+52;if(43==e)return 62;if(47==e)return 63;throw new Error("c:"+e)};return o},f=function(e,t){var i=e,r=t,n=new Array(e*t),o={};o.setPixel=function(e,t,r){n[t*i+e]=r},o.write=function(e){e.writeString("GIF87a"),e.writeShort(i),e.writeShort(r),e.writeByte(128),e.writeByte(0),e.writeByte(0),e.writeByte(0),e.writeByte(0),e.writeByte(0),e.writeByte(255),e.writeByte(255),e.writeByte(255),e.writeString(","),e.writeShort(0),e.writeShort(0),e.writeShort(i),e.writeShort(r),e.writeByte(0);var t=2,n=s(t);e.writeByte(t);for(var o=0;n.length-o>255;)e.writeByte(255),e.writeBytes(n,o,255),o+=255;e.writeByte(n.length-o),e.writeBytes(n,o,n.length-o),e.writeByte(0),e.writeString(";")};var a=function(e){var t=e,i=0,r=0,n={};return n.write=function(e,n){if(e>>>n!=0)throw new Error("length over");for(;i+n>=8;)t.writeByte(255&(e<<i|r)),n-=8-i,e>>>=8-i,r=0,i=0;r=e<<i|r,i+=n},n.flush=function(){i>0&&t.writeByte(r)},n},s=function(e){for(var t=1<<e,i=(1<<e)+1,r=e+1,o=l(),s=0;t>s;s+=1)o.add(String.fromCharCode(s));o.add(String.fromCharCode(t)),o.add(String.fromCharCode(i));var c=u(),h=a(c);h.write(t,r);var d=0,f=String.fromCharCode(n[d]);for(d+=1;d<n.length;){var p=String.fromCharCode(n[d]);d+=1,o.contains(f+p)?f+=p:(h.write(o.indexOf(f),r),o.size()<4095&&(o.size()==1<<r&&(r+=1),o.add(f+p)),f=p)}return h.write(o.indexOf(f),r),h.write(i,r),h.flush(),c.toByteArray()},l=function(){var e={},t=0,i={};return i.add=function(r){if(i.contains(r))throw new Error("dup key:"+r);e[r]=t,t+=1},i.size=function(){return t},i.indexOf=function(t){return e[t]},i.contains=function(t){return"undefined"!=typeof e[t]},i};return o},p=function(e,t,i,r){for(var n=f(e,t),o=0;t>o;o+=1)for(var a=0;e>a;a+=1)n.setPixel(a,o,i(a,o));var s=u();n.write(s);for(var l=h(),c=s.toByteArray(),d=0;d<c.length;d+=1)l.writeByte(c[d]);l.flush();var p="";return p+="<img",p+=' src="',p+="data:image/gif;base64,",p+=l,p+='"',p+=' width="',p+=e,p+='"',p+=' height="',p+=t,p+='"',r&&(p+=' alt="',p+=r,p+='"'),p+="/>"};return t}()}()},{}],3:[function(e,t,i){if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(e){"use strict";var t=e.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1==t[0]&&9==t[1]&&t[2]<1)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher")}(jQuery),+function(e){"use strict";function t(t){return this.each(function(){var i=e(this),n=i.data("bs.alert");n||i.data("bs.alert",n=new r(this)),"string"==typeof t&&n[t].call(i)})}var i='[data-dismiss="alert"]',r=function(t){e(t).on("click",i,this.close)};r.VERSION="3.3.4",r.TRANSITION_DURATION=150,r.prototype.close=function(t){function i(){a.detach().trigger("closed.bs.alert").remove()}var n=e(this),o=n.attr("data-target");o||(o=n.attr("href"),o=o&&o.replace(/.*(?=#[^\s]*$)/,""));var a=e(o);t&&t.preventDefault(),a.length||(a=n.closest(".alert")),a.trigger(t=e.Event("close.bs.alert")),t.isDefaultPrevented()||(a.removeClass("in"),e.support.transition&&a.hasClass("fade")?a.one("bsTransitionEnd",i).emulateTransitionEnd(r.TRANSITION_DURATION):i())};var n=e.fn.alert;e.fn.alert=t,e.fn.alert.Constructor=r,e.fn.alert.noConflict=function(){return e.fn.alert=n,this},e(document).on("click.bs.alert.data-api",i,r.prototype.close)}(jQuery),+function(e){"use strict";function t(t){return this.each(function(){var r=e(this),n=r.data("bs.button"),o="object"==typeof t&&t;n||r.data("bs.button",n=new i(this,o)),"toggle"==t?n.toggle():t&&n.setState(t)})}var i=function(t,r){this.$element=e(t),this.options=e.extend({},i.DEFAULTS,r),this.isLoading=!1};i.VERSION="3.3.4",i.DEFAULTS={loadingText:"loading..."},i.prototype.setState=function(t){var i="disabled",r=this.$element,n=r.is("input")?"val":"html",o=r.data();t+="Text",null==o.resetText&&r.data("resetText",r[n]()),setTimeout(e.proxy(function(){r[n](null==o[t]?this.options[t]:o[t]),"loadingText"==t?(this.isLoading=!0,r.addClass(i).attr(i,i)):this.isLoading&&(this.isLoading=!1,r.removeClass(i).removeAttr(i))},this),0)},i.prototype.toggle=function(){var e=!0,t=this.$element.closest('[data-toggle="buttons"]');if(t.length){var i=this.$element.find("input");"radio"==i.prop("type")&&(i.prop("checked")&&this.$element.hasClass("active")?e=!1:t.find(".active").removeClass("active")),e&&i.prop("checked",!this.$element.hasClass("active")).trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active"));e&&this.$element.toggleClass("active")};var r=e.fn.button;e.fn.button=t,e.fn.button.Constructor=i,e.fn.button.noConflict=function(){return e.fn.button=r,this},e(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(i){var r=e(i.target);r.hasClass("btn")||(r=r.closest(".btn")),t.call(r,"toggle"),i.preventDefault()}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(t){e(t.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(t.type))})}(jQuery),+function(e){"use strict";function t(t){return this.each(function(){var r=e(this),n=r.data("bs.carousel"),o=e.extend({},i.DEFAULTS,r.data(),"object"==typeof t&&t),a="string"==typeof t?t:o.slide;n||r.data("bs.carousel",n=new i(this,o)),"number"==typeof t?n.to(t):a?n[a]():o.interval&&n.pause().cycle()})}var i=function(t,i){this.$element=e(t),this.$indicators=this.$element.find(".carousel-indicators"),this.options=i,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",e.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",e.proxy(this.pause,this)).on("mouseleave.bs.carousel",e.proxy(this.cycle,this))};i.VERSION="3.3.4",i.TRANSITION_DURATION=600,i.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},i.prototype.keydown=function(e){if(!/input|textarea/i.test(e.target.tagName)){switch(e.which){case 37:this.prev();break;case 39:this.next();break;default:return}e.preventDefault()}},i.prototype.cycle=function(t){return t||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(e.proxy(this.next,this),this.options.interval)),this},i.prototype.getItemIndex=function(e){return this.$items=e.parent().children(".item"),this.$items.index(e||this.$active)},i.prototype.getItemForDirection=function(e,t){var i=this.getItemIndex(t),r="prev"==e&&0===i||"next"==e&&i==this.$items.length-1;if(r&&!this.options.wrap)return t;var n="prev"==e?-1:1,o=(i+n)%this.$items.length;return this.$items.eq(o)},i.prototype.to=function(e){var t=this,i=this.getItemIndex(this.$active=this.$element.find(".item.active"));return e>this.$items.length-1||0>e?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){t.to(e)}):i==e?this.pause().cycle():this.slide(e>i?"next":"prev",this.$items.eq(e))},i.prototype.pause=function(t){return t||(this.paused=!0),this.$element.find(".next, .prev").length&&e.support.transition&&(this.$element.trigger(e.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},i.prototype.next=function(){return this.sliding?void 0:this.slide("next")},i.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},i.prototype.slide=function(t,r){var n=this.$element.find(".item.active"),o=r||this.getItemForDirection(t,n),a=this.interval,s="next"==t?"left":"right",l=this;if(o.hasClass("active"))return this.sliding=!1;var c=o[0],u=e.Event("slide.bs.carousel",{relatedTarget:c,direction:s});if(this.$element.trigger(u),!u.isDefaultPrevented()){if(this.sliding=!0,a&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var h=e(this.$indicators.children()[this.getItemIndex(o)]);h&&h.addClass("active")}var d=e.Event("slid.bs.carousel",{relatedTarget:c,direction:s});return e.support.transition&&this.$element.hasClass("slide")?(o.addClass(t),o[0].offsetWidth,n.addClass(s),o.addClass(s),n.one("bsTransitionEnd",function(){o.removeClass([t,s].join(" ")).addClass("active"),n.removeClass(["active",s].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(d)},0)}).emulateTransitionEnd(i.TRANSITION_DURATION)):(n.removeClass("active"),o.addClass("active"),this.sliding=!1,this.$element.trigger(d)),a&&this.cycle(),this}};var r=e.fn.carousel;e.fn.carousel=t,e.fn.carousel.Constructor=i,e.fn.carousel.noConflict=function(){return e.fn.carousel=r,this};var n=function(i){var r,n=e(this),o=e(n.attr("data-target")||(r=n.attr("href"))&&r.replace(/.*(?=#[^\s]+$)/,""));if(o.hasClass("carousel")){var a=e.extend({},o.data(),n.data()),s=n.attr("data-slide-to");s&&(a.interval=!1),t.call(o,a),s&&o.data("bs.carousel").to(s),i.preventDefault()}};e(document).on("click.bs.carousel.data-api","[data-slide]",n).on("click.bs.carousel.data-api","[data-slide-to]",n),e(window).on("load",function(){e('[data-ride="carousel"]').each(function(){var i=e(this);t.call(i,i.data())})})}(jQuery),+function(e){"use strict";function t(t){t&&3===t.which||(e(n).remove(),e(o).each(function(){var r=e(this),n=i(r),o={relatedTarget:this};n.hasClass("open")&&(n.trigger(t=e.Event("hide.bs.dropdown",o)),t.isDefaultPrevented()||(r.attr("aria-expanded","false"),n.removeClass("open").trigger("hidden.bs.dropdown",o)))}))}function i(t){var i=t.attr("data-target");i||(i=t.attr("href"),i=i&&/#[A-Za-z]/.test(i)&&i.replace(/.*(?=#[^\s]*$)/,""));var r=i&&e(i);return r&&r.length?r:t.parent()}function r(t){return this.each(function(){var i=e(this),r=i.data("bs.dropdown");r||i.data("bs.dropdown",r=new a(this)),"string"==typeof t&&r[t].call(i)})}var n=".dropdown-backdrop",o='[data-toggle="dropdown"]',a=function(t){e(t).on("click.bs.dropdown",this.toggle)};a.VERSION="3.3.4",a.prototype.toggle=function(r){var n=e(this);if(!n.is(".disabled, :disabled")){var o=i(n),a=o.hasClass("open");if(t(),!a){"ontouchstart"in document.documentElement&&!o.closest(".navbar-nav").length&&e('<div class="dropdown-backdrop"/>').insertAfter(e(this)).on("click",t);var s={relatedTarget:this};if(o.trigger(r=e.Event("show.bs.dropdown",s)),r.isDefaultPrevented())return;n.trigger("focus").attr("aria-expanded","true"),o.toggleClass("open").trigger("shown.bs.dropdown",s)}return!1}},a.prototype.keydown=function(t){if(/(38|40|27|32)/.test(t.which)&&!/input|textarea/i.test(t.target.tagName)){var r=e(this);if(t.preventDefault(),t.stopPropagation(),!r.is(".disabled, :disabled")){var n=i(r),a=n.hasClass("open");if(!a&&27!=t.which||a&&27==t.which)return 27==t.which&&n.find(o).trigger("focus"),r.trigger("click");var s=" li:not(.disabled):visible a",l=n.find('[role="menu"]'+s+', [role="listbox"]'+s);if(l.length){var c=l.index(t.target);38==t.which&&c>0&&c--,40==t.which&&c<l.length-1&&c++,~c||(c=0),l.eq(c).trigger("focus")}}}};var s=e.fn.dropdown;e.fn.dropdown=r,e.fn.dropdown.Constructor=a,e.fn.dropdown.noConflict=function(){return e.fn.dropdown=s,this},e(document).on("click.bs.dropdown.data-api",t).on("click.bs.dropdown.data-api",".dropdown form",function(e){e.stopPropagation()}).on("click.bs.dropdown.data-api",o,a.prototype.toggle).on("keydown.bs.dropdown.data-api",o,a.prototype.keydown).on("keydown.bs.dropdown.data-api",'[role="menu"]',a.prototype.keydown).on("keydown.bs.dropdown.data-api",'[role="listbox"]',a.prototype.keydown)}(jQuery),+function(e){"use strict";function t(t,r){return this.each(function(){var n=e(this),o=n.data("bs.modal"),a=e.extend({},i.DEFAULTS,n.data(),"object"==typeof t&&t);o||n.data("bs.modal",o=new i(this,a)),"string"==typeof t?o[t](r):a.show&&o.show(r)})}var i=function(t,i){this.options=i,this.$body=e(document.body),this.$element=e(t),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,e.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};i.VERSION="3.3.4",i.TRANSITION_DURATION=300,i.BACKDROP_TRANSITION_DURATION=150,i.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},i.prototype.toggle=function(e){return this.isShown?this.hide():this.show(e)},i.prototype.show=function(t){var r=this,n=e.Event("show.bs.modal",{relatedTarget:t});this.$element.trigger(n),this.isShown||n.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',e.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){r.$element.one("mouseup.dismiss.bs.modal",function(t){e(t.target).is(r.$element)&&(r.ignoreBackdropClick=!0)})}),this.backdrop(function(){var n=e.support.transition&&r.$element.hasClass("fade");r.$element.parent().length||r.$element.appendTo(r.$body),r.$element.show().scrollTop(0),r.adjustDialog(),n&&r.$element[0].offsetWidth,r.$element.addClass("in").attr("aria-hidden",!1),r.enforceFocus();var o=e.Event("shown.bs.modal",{relatedTarget:t});n?r.$dialog.one("bsTransitionEnd",function(){r.$element.trigger("focus").trigger(o)}).emulateTransitionEnd(i.TRANSITION_DURATION):r.$element.trigger("focus").trigger(o)}))},i.prototype.hide=function(t){t&&t.preventDefault(),t=e.Event("hide.bs.modal"),this.$element.trigger(t),this.isShown&&!t.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),e(document).off("focusin.bs.modal"),this.$element.removeClass("in").attr("aria-hidden",!0).off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),e.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",e.proxy(this.hideModal,this)).emulateTransitionEnd(i.TRANSITION_DURATION):this.hideModal())},i.prototype.enforceFocus=function(){e(document).off("focusin.bs.modal").on("focusin.bs.modal",e.proxy(function(e){this.$element[0]===e.target||this.$element.has(e.target).length||this.$element.trigger("focus")},this))},i.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",e.proxy(function(e){27==e.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},i.prototype.resize=function(){this.isShown?e(window).on("resize.bs.modal",e.proxy(this.handleUpdate,this)):e(window).off("resize.bs.modal")},i.prototype.hideModal=function(){var e=this;this.$element.hide(),this.backdrop(function(){e.$body.removeClass("modal-open"),e.resetAdjustments(),e.resetScrollbar(),e.$element.trigger("hidden.bs.modal")})},i.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},i.prototype.backdrop=function(t){var r=this,n=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var o=e.support.transition&&n;if(this.$backdrop=e('<div class="modal-backdrop '+n+'" />').appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",e.proxy(function(e){return this.ignoreBackdropClick?void(this.ignoreBackdropClick=!1):void(e.target===e.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide()))},this)),o&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!t)return;o?this.$backdrop.one("bsTransitionEnd",t).emulateTransitionEnd(i.BACKDROP_TRANSITION_DURATION):t()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var a=function(){r.removeBackdrop(),t&&t()};e.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",a).emulateTransitionEnd(i.BACKDROP_TRANSITION_DURATION):a()}else t&&t()},i.prototype.handleUpdate=function(){this.adjustDialog()},i.prototype.adjustDialog=function(){var e=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&e?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!e?this.scrollbarWidth:""})},i.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},i.prototype.checkScrollbar=function(){var e=window.innerWidth;if(!e){var t=document.documentElement.getBoundingClientRect();e=t.right-Math.abs(t.left)}this.bodyIsOverflowing=document.body.clientWidth<e,this.scrollbarWidth=this.measureScrollbar()},i.prototype.setScrollbar=function(){parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||""},i.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},i.prototype.measureScrollbar=function(){var e=document.createElement("div");e.className="modal-scrollbar-measure",this.$body.append(e);var t=e.offsetWidth-e.clientWidth;return this.$body[0].removeChild(e),t};var r=e.fn.modal;e.fn.modal=t,e.fn.modal.Constructor=i,e.fn.modal.noConflict=function(){return e.fn.modal=r,this},e(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(i){var r=e(this),n=r.attr("href"),o=e(r.attr("data-target")||n&&n.replace(/.*(?=#[^\s]+$)/,"")),a=o.data("bs.modal")?"toggle":e.extend({remote:!/#/.test(n)&&n},o.data(),r.data());r.is("a")&&i.preventDefault(),o.one("show.bs.modal",function(e){e.isDefaultPrevented()||o.one("hidden.bs.modal",function(){r.is(":visible")&&r.trigger("focus")})}),t.call(o,a,this)})}(jQuery),+function(e){"use strict";function t(t){return this.each(function(){var r=e(this),n=r.data("bs.tooltip"),o="object"==typeof t&&t;(n||!/destroy|hide/.test(t))&&(n||r.data("bs.tooltip",n=new i(this,o)),"string"==typeof t&&n[t]())})}var i=function(e,t){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.init("tooltip",e,t)};i.VERSION="3.3.4",i.TRANSITION_DURATION=150,i.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},i.prototype.init=function(t,i,r){if(this.enabled=!0,this.type=t,this.$element=e(i),this.options=this.getOptions(r),this.$viewport=this.options.viewport&&e(this.options.viewport.selector||this.options.viewport),this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var n=this.options.trigger.split(" "),o=n.length;o--;){var a=n[o];if("click"==a)this.$element.on("click."+this.type,this.options.selector,e.proxy(this.toggle,this));else if("manual"!=a){var s="hover"==a?"mouseenter":"focusin",l="hover"==a?"mouseleave":"focusout";this.$element.on(s+"."+this.type,this.options.selector,e.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,e.proxy(this.leave,this))}}this.options.selector?this._options=e.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},i.prototype.getDefaults=function(){return i.DEFAULTS},i.prototype.getOptions=function(t){return t=e.extend({},this.getDefaults(),this.$element.data(),t),t.delay&&"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),t},i.prototype.getDelegateOptions=function(){var t={},i=this.getDefaults();return this._options&&e.each(this._options,function(e,r){i[e]!=r&&(t[e]=r)}),t},i.prototype.enter=function(t){var i=t instanceof this.constructor?t:e(t.currentTarget).data("bs."+this.type);return i&&i.$tip&&i.$tip.is(":visible")?void(i.hoverState="in"):(i||(i=new this.constructor(t.currentTarget,this.getDelegateOptions()),e(t.currentTarget).data("bs."+this.type,i)),clearTimeout(i.timeout),i.hoverState="in",i.options.delay&&i.options.delay.show?void(i.timeout=setTimeout(function(){"in"==i.hoverState&&i.show()},i.options.delay.show)):i.show())},i.prototype.leave=function(t){var i=t instanceof this.constructor?t:e(t.currentTarget).data("bs."+this.type);return i||(i=new this.constructor(t.currentTarget,this.getDelegateOptions()),e(t.currentTarget).data("bs."+this.type,i)),clearTimeout(i.timeout),i.hoverState="out",i.options.delay&&i.options.delay.hide?void(i.timeout=setTimeout(function(){"out"==i.hoverState&&i.hide()},i.options.delay.hide)):i.hide()},i.prototype.show=function(){var t=e.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(t);var r=e.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(t.isDefaultPrevented()||!r)return;var n=this,o=this.tip(),a=this.getUID(this.type);this.setContent(),o.attr("id",a),this.$element.attr("aria-describedby",a),this.options.animation&&o.addClass("fade");var s="function"==typeof this.options.placement?this.options.placement.call(this,o[0],this.$element[0]):this.options.placement,l=/\s?auto?\s?/i,c=l.test(s);c&&(s=s.replace(l,"")||"top"),o.detach().css({top:0,left:0,display:"block"}).addClass(s).data("bs."+this.type,this),this.options.container?o.appendTo(this.options.container):o.insertAfter(this.$element);var u=this.getPosition(),h=o[0].offsetWidth,d=o[0].offsetHeight;if(c){var f=s,p=this.options.container?e(this.options.container):this.$element.parent(),v=this.getPosition(p);s="bottom"==s&&u.bottom+d>v.bottom?"top":"top"==s&&u.top-d<v.top?"bottom":"right"==s&&u.right+h>v.width?"left":"left"==s&&u.left-h<v.left?"right":s,o.removeClass(f).addClass(s)}var m=this.getCalculatedOffset(s,u,h,d);this.applyPlacement(m,s);var g=function(){var e=n.hoverState;n.$element.trigger("shown.bs."+n.type),n.hoverState=null,"out"==e&&n.leave(n)};e.support.transition&&this.$tip.hasClass("fade")?o.one("bsTransitionEnd",g).emulateTransitionEnd(i.TRANSITION_DURATION):g()}},i.prototype.applyPlacement=function(t,i){var r=this.tip(),n=r[0].offsetWidth,o=r[0].offsetHeight,a=parseInt(r.css("margin-top"),10),s=parseInt(r.css("margin-left"),10);isNaN(a)&&(a=0),isNaN(s)&&(s=0),t.top=t.top+a,t.left=t.left+s,e.offset.setOffset(r[0],e.extend({using:function(e){r.css({top:Math.round(e.top),left:Math.round(e.left)})}},t),0),r.addClass("in");var l=r[0].offsetWidth,c=r[0].offsetHeight;"top"==i&&c!=o&&(t.top=t.top+o-c);var u=this.getViewportAdjustedDelta(i,t,l,c);u.left?t.left+=u.left:t.top+=u.top;var h=/top|bottom/.test(i),d=h?2*u.left-n+l:2*u.top-o+c,f=h?"offsetWidth":"offsetHeight";r.offset(t),this.replaceArrow(d,r[0][f],h)},i.prototype.replaceArrow=function(e,t,i){this.arrow().css(i?"left":"top",50*(1-e/t)+"%").css(i?"top":"left","")},i.prototype.setContent=function(){var e=this.tip(),t=this.getTitle();e.find(".tooltip-inner")[this.options.html?"html":"text"](t),e.removeClass("fade in top bottom left right")},i.prototype.hide=function(t){function r(){"in"!=n.hoverState&&o.detach(),n.$element.removeAttr("aria-describedby").trigger("hidden.bs."+n.type),t&&t()}var n=this,o=e(this.$tip),a=e.Event("hide.bs."+this.type);return this.$element.trigger(a),a.isDefaultPrevented()?void 0:(o.removeClass("in"),e.support.transition&&o.hasClass("fade")?o.one("bsTransitionEnd",r).emulateTransitionEnd(i.TRANSITION_DURATION):r(),this.hoverState=null,this)},i.prototype.fixTitle=function(){var e=this.$element;(e.attr("title")||"string"!=typeof e.attr("data-original-title"))&&e.attr("data-original-title",e.attr("title")||"").attr("title","")},i.prototype.hasContent=function(){return this.getTitle()},i.prototype.getPosition=function(t){t=t||this.$element;var i=t[0],r="BODY"==i.tagName,n=i.getBoundingClientRect();null==n.width&&(n=e.extend({},n,{width:n.right-n.left,height:n.bottom-n.top}));var o=r?{top:0,left:0}:t.offset(),a={scroll:r?document.documentElement.scrollTop||document.body.scrollTop:t.scrollTop()},s=r?{width:e(window).width(),height:e(window).height()}:null;return e.extend({},n,a,s,o)},i.prototype.getCalculatedOffset=function(e,t,i,r){return"bottom"==e?{top:t.top+t.height,left:t.left+t.width/2-i/2}:"top"==e?{top:t.top-r,left:t.left+t.width/2-i/2}:"left"==e?{top:t.top+t.height/2-r/2,left:t.left-i}:{top:t.top+t.height/2-r/2,left:t.left+t.width}},i.prototype.getViewportAdjustedDelta=function(e,t,i,r){var n={top:0,left:0};if(!this.$viewport)return n;var o=this.options.viewport&&this.options.viewport.padding||0,a=this.getPosition(this.$viewport);if(/right|left/.test(e)){var s=t.top-o-a.scroll,l=t.top+o-a.scroll+r;s<a.top?n.top=a.top-s:l>a.top+a.height&&(n.top=a.top+a.height-l)}else{var c=t.left-o,u=t.left+o+i;c<a.left?n.left=a.left-c:u>a.width&&(n.left=a.left+a.width-u)}return n},i.prototype.getTitle=function(){var e,t=this.$element,i=this.options;return e=t.attr("data-original-title")||("function"==typeof i.title?i.title.call(t[0]):i.title)},i.prototype.getUID=function(e){do e+=~~(1e6*Math.random());while(document.getElementById(e));return e},i.prototype.tip=function(){return this.$tip=this.$tip||e(this.options.template)},i.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},i.prototype.enable=function(){this.enabled=!0},i.prototype.disable=function(){this.enabled=!1},i.prototype.toggleEnabled=function(){this.enabled=!this.enabled},i.prototype.toggle=function(t){var i=this;t&&(i=e(t.currentTarget).data("bs."+this.type),i||(i=new this.constructor(t.currentTarget,this.getDelegateOptions()),e(t.currentTarget).data("bs."+this.type,i))),i.tip().hasClass("in")?i.leave(i):i.enter(i)},i.prototype.destroy=function(){var e=this;clearTimeout(this.timeout),this.hide(function(){e.$element.off("."+e.type).removeData("bs."+e.type)})};var r=e.fn.tooltip;e.fn.tooltip=t,e.fn.tooltip.Constructor=i,e.fn.tooltip.noConflict=function(){return e.fn.tooltip=r,this}}(jQuery),+function(e){"use strict";function t(t){return this.each(function(){var r=e(this),n=r.data("bs.popover"),o="object"==typeof t&&t;(n||!/destroy|hide/.test(t))&&(n||r.data("bs.popover",n=new i(this,o)),"string"==typeof t&&n[t]())})}var i=function(e,t){this.init("popover",e,t)};if(!e.fn.tooltip)throw new Error("Popover requires tooltip.js");i.VERSION="3.3.4",i.DEFAULTS=e.extend({},e.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),i.prototype=e.extend({},e.fn.tooltip.Constructor.prototype),i.prototype.constructor=i,i.prototype.getDefaults=function(){return i.DEFAULTS},i.prototype.setContent=function(){var e=this.tip(),t=this.getTitle(),i=this.getContent();e.find(".popover-title")[this.options.html?"html":"text"](t),e.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof i?"html":"append":"text"](i),e.removeClass("fade top bottom left right in"),e.find(".popover-title").html()||e.find(".popover-title").hide()},i.prototype.hasContent=function(){return this.getTitle()||this.getContent()},i.prototype.getContent=function(){var e=this.$element,t=this.options;return e.attr("data-content")||("function"==typeof t.content?t.content.call(e[0]):t.content)},i.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var r=e.fn.popover;e.fn.popover=t,e.fn.popover.Constructor=i,e.fn.popover.noConflict=function(){return e.fn.popover=r,this}}(jQuery),+function(e){"use strict";function t(t){return this.each(function(){var r=e(this),n=r.data("bs.tab");n||r.data("bs.tab",n=new i(this)),"string"==typeof t&&n[t]()})}var i=function(t){this.element=e(t)};i.VERSION="3.3.4",i.TRANSITION_DURATION=150,i.prototype.show=function(){var t=this.element,i=t.closest("ul:not(.dropdown-menu)"),r=t.data("target");if(r||(r=t.attr("href"),r=r&&r.replace(/.*(?=#[^\s]*$)/,"")),!t.parent("li").hasClass("active")){var n=i.find(".active:last a"),o=e.Event("hide.bs.tab",{relatedTarget:t[0]}),a=e.Event("show.bs.tab",{relatedTarget:n[0]});if(n.trigger(o),t.trigger(a),!a.isDefaultPrevented()&&!o.isDefaultPrevented()){var s=e(r);this.activate(t.closest("li"),i),this.activate(s,s.parent(),function(){n.trigger({type:"hidden.bs.tab",relatedTarget:t[0]}),t.trigger({type:"shown.bs.tab",relatedTarget:n[0]})})}}},i.prototype.activate=function(t,r,n){function o(){a.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),t.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),s?(t[0].offsetWidth,t.addClass("in")):t.removeClass("fade"),t.parent(".dropdown-menu").length&&t.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),n&&n()}var a=r.find("> .active"),s=n&&e.support.transition&&(a.length&&a.hasClass("fade")||!!r.find("> .fade").length);a.length&&s?a.one("bsTransitionEnd",o).emulateTransitionEnd(i.TRANSITION_DURATION):o(),a.removeClass("in")};var r=e.fn.tab;e.fn.tab=t,e.fn.tab.Constructor=i,e.fn.tab.noConflict=function(){return e.fn.tab=r,this};var n=function(i){i.preventDefault(),t.call(e(this),"show")};e(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',n).on("click.bs.tab.data-api",'[data-toggle="pill"]',n)}(jQuery),+function(e){"use strict";function t(t){return this.each(function(){var r=e(this),n=r.data("bs.affix"),o="object"==typeof t&&t;n||r.data("bs.affix",n=new i(this,o)),"string"==typeof t&&n[t]()})}var i=function(t,r){this.options=e.extend({},i.DEFAULTS,r),this.$target=e(this.options.target).on("scroll.bs.affix.data-api",e.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",e.proxy(this.checkPositionWithEventLoop,this)),this.$element=e(t),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};i.VERSION="3.3.4",i.RESET="affix affix-top affix-bottom",i.DEFAULTS={offset:0,target:window},i.prototype.getState=function(e,t,i,r){var n=this.$target.scrollTop(),o=this.$element.offset(),a=this.$target.height();if(null!=i&&"top"==this.affixed)return i>n?"top":!1;if("bottom"==this.affixed)return null!=i?n+this.unpin<=o.top?!1:"bottom":e-r>=n+a?!1:"bottom";
var s=null==this.affixed,l=s?n:o.top,c=s?a:t;return null!=i&&i>=n?"top":null!=r&&l+c>=e-r?"bottom":!1},i.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(i.RESET).addClass("affix");var e=this.$target.scrollTop(),t=this.$element.offset();return this.pinnedOffset=t.top-e},i.prototype.checkPositionWithEventLoop=function(){setTimeout(e.proxy(this.checkPosition,this),1)},i.prototype.checkPosition=function(){if(this.$element.is(":visible")){var t=this.$element.height(),r=this.options.offset,n=r.top,o=r.bottom,a=e(document.body).height();"object"!=typeof r&&(o=n=r),"function"==typeof n&&(n=r.top(this.$element)),"function"==typeof o&&(o=r.bottom(this.$element));var s=this.getState(a,t,n,o);if(this.affixed!=s){null!=this.unpin&&this.$element.css("top","");var l="affix"+(s?"-"+s:""),c=e.Event(l+".bs.affix");if(this.$element.trigger(c),c.isDefaultPrevented())return;this.affixed=s,this.unpin="bottom"==s?this.getPinnedOffset():null,this.$element.removeClass(i.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}"bottom"==s&&this.$element.offset({top:a-t-o})}};var r=e.fn.affix;e.fn.affix=t,e.fn.affix.Constructor=i,e.fn.affix.noConflict=function(){return e.fn.affix=r,this},e(window).on("load",function(){e('[data-spy="affix"]').each(function(){var i=e(this),r=i.data();r.offset=r.offset||{},null!=r.offsetBottom&&(r.offset.bottom=r.offsetBottom),null!=r.offsetTop&&(r.offset.top=r.offsetTop),t.call(i,r)})})}(jQuery),+function(e){"use strict";function t(t){var i,r=t.attr("data-target")||(i=t.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,"");return e(r)}function i(t){return this.each(function(){var i=e(this),n=i.data("bs.collapse"),o=e.extend({},r.DEFAULTS,i.data(),"object"==typeof t&&t);!n&&o.toggle&&/show|hide/.test(t)&&(o.toggle=!1),n||i.data("bs.collapse",n=new r(this,o)),"string"==typeof t&&n[t]()})}var r=function(t,i){this.$element=e(t),this.options=e.extend({},r.DEFAULTS,i),this.$trigger=e('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};r.VERSION="3.3.4",r.TRANSITION_DURATION=350,r.DEFAULTS={toggle:!0},r.prototype.dimension=function(){var e=this.$element.hasClass("width");return e?"width":"height"},r.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var t,n=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(n&&n.length&&(t=n.data("bs.collapse"),t&&t.transitioning))){var o=e.Event("show.bs.collapse");if(this.$element.trigger(o),!o.isDefaultPrevented()){n&&n.length&&(i.call(n,"hide"),t||n.data("bs.collapse",null));var a=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[a](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var s=function(){this.$element.removeClass("collapsing").addClass("collapse in")[a](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!e.support.transition)return s.call(this);var l=e.camelCase(["scroll",a].join("-"));this.$element.one("bsTransitionEnd",e.proxy(s,this)).emulateTransitionEnd(r.TRANSITION_DURATION)[a](this.$element[0][l])}}}},r.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var t=e.Event("hide.bs.collapse");if(this.$element.trigger(t),!t.isDefaultPrevented()){var i=this.dimension();this.$element[i](this.$element[i]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var n=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return e.support.transition?void this.$element[i](0).one("bsTransitionEnd",e.proxy(n,this)).emulateTransitionEnd(r.TRANSITION_DURATION):n.call(this)}}},r.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},r.prototype.getParent=function(){return e(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(e.proxy(function(i,r){var n=e(r);this.addAriaAndCollapsedClass(t(n),n)},this)).end()},r.prototype.addAriaAndCollapsedClass=function(e,t){var i=e.hasClass("in");e.attr("aria-expanded",i),t.toggleClass("collapsed",!i).attr("aria-expanded",i)};var n=e.fn.collapse;e.fn.collapse=i,e.fn.collapse.Constructor=r,e.fn.collapse.noConflict=function(){return e.fn.collapse=n,this},e(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(r){var n=e(this);n.attr("data-target")||r.preventDefault();var o=t(n),a=o.data("bs.collapse"),s=a?"toggle":n.data();i.call(o,s)})}(jQuery),+function(e){"use strict";function t(i,r){this.$body=e(document.body),this.$scrollElement=e(e(i).is(document.body)?window:i),this.options=e.extend({},t.DEFAULTS,r),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",e.proxy(this.process,this)),this.refresh(),this.process()}function i(i){return this.each(function(){var r=e(this),n=r.data("bs.scrollspy"),o="object"==typeof i&&i;n||r.data("bs.scrollspy",n=new t(this,o)),"string"==typeof i&&n[i]()})}t.VERSION="3.3.4",t.DEFAULTS={offset:10},t.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},t.prototype.refresh=function(){var t=this,i="offset",r=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),e.isWindow(this.$scrollElement[0])||(i="position",r=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var t=e(this),n=t.data("target")||t.attr("href"),o=/^#./.test(n)&&e(n);return o&&o.length&&o.is(":visible")&&[[o[i]().top+r,n]]||null}).sort(function(e,t){return e[0]-t[0]}).each(function(){t.offsets.push(this[0]),t.targets.push(this[1])})},t.prototype.process=function(){var e,t=this.$scrollElement.scrollTop()+this.options.offset,i=this.getScrollHeight(),r=this.options.offset+i-this.$scrollElement.height(),n=this.offsets,o=this.targets,a=this.activeTarget;if(this.scrollHeight!=i&&this.refresh(),t>=r)return a!=(e=o[o.length-1])&&this.activate(e);if(a&&t<n[0])return this.activeTarget=null,this.clear();for(e=n.length;e--;)a!=o[e]&&t>=n[e]&&(void 0===n[e+1]||t<n[e+1])&&this.activate(o[e])},t.prototype.activate=function(t){this.activeTarget=t,this.clear();var i=this.selector+'[data-target="'+t+'"],'+this.selector+'[href="'+t+'"]',r=e(i).parents("li").addClass("active");r.parent(".dropdown-menu").length&&(r=r.closest("li.dropdown").addClass("active")),r.trigger("activate.bs.scrollspy")},t.prototype.clear=function(){e(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var r=e.fn.scrollspy;e.fn.scrollspy=i,e.fn.scrollspy.Constructor=t,e.fn.scrollspy.noConflict=function(){return e.fn.scrollspy=r,this},e(window).on("load.bs.scrollspy.data-api",function(){e('[data-spy="scroll"]').each(function(){var t=e(this);i.call(t,t.data())})})}(jQuery),+function(e){"use strict";function t(){var e=document.createElement("bootstrap"),t={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var i in t)if(void 0!==e.style[i])return{end:t[i]};return!1}e.fn.emulateTransitionEnd=function(t){var i=!1,r=this;e(this).one("bsTransitionEnd",function(){i=!0});var n=function(){i||e(r).trigger(e.support.transition.end)};return setTimeout(n,t),this},e(function(){e.support.transition=t(),e.support.transition&&(e.event.special.bsTransitionEnd={bindType:e.support.transition.end,delegateType:e.support.transition.end,handle:function(t){return e(t.target).is(this)?t.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery)},{}],4:[function(e,t,i){var r=r||{fontSizeChangerIndex:2,defaultFontSize:16};r.fontSizeChanger=function(e,t){return-1===e?this.changeFontSize(parseInt(t)-this.fontSizeChangerIndex):0===e?this.changeFontSize(this.defaultFontSize):1===e?this.changeFontSize(parseInt(t)+this.fontSizeChangerIndex):void 0},r.changeFontSize=function(e){return $("body").css("font-size",e.toString()+"px"),e}},{}],5:[function(e,t,i){var r=r||{};r.FullToolTipOptIn=function(){$('[data-toggle="tooltip"]').on("click",function(e){e.preventDefault()}),$(function(){$('[data-toggle="tooltip"]').tooltip()})}},{}],6:[function(e,t,i){var r=r||{feedback_num:0,feedback_timeout:1500,active_feedback_closer:!1,debug:!0};r.getRootURL=function(){return location.origin||(location.origin=location.protocol+"//"+location.host),location.origin},r.smoothScrollingAnchors=function(){$('a[href^="#"]').on("click",function(e){e.preventDefault();var t=this.hash,i=$(t);$("html, body").stop().animate({scrollTop:i.offset().top},900,"swing",function(){window.location.hash=t})})},r.bootstrapFeedback=function(e,t,i){var r='<i class="fa '+i+'"></i> '+e;$(".top-right").notify({message:{html:r},type:t,fadeOut:{enabled:!0,delay:this.feedback_timeout}}).show()},r.footerToBottom=function(e,t){$(e).length&&$(t).length?(this.updateFooterHeight(e,t),setInterval(function(){r.updateFooterHeight(e,t)},200)):this.debug&&console.log("Sectors not found - FooterToBottom")},r.updateFooterHeight=function(e,t){var i=$(window).height(),r=$(e).height(),n=$(e).position().top+r;$(t).height();i>n?$(e).css("margin-top",10+(i-n)+"px"):$(e).css("margin-top","10px")},r.toProperCase=function(){String.prototype.toProperCase=function(){return this.replace(/\w\S*/g,function(e){return e.charAt(0).toUpperCase()+e.substr(1).toLowerCase()})}}()},{}],7:[function(e,t,i){var r=r||{};r.trim=function(){String.prototype.trim||!function(){var e=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;String.prototype.trim=function(){return this.replace(e,"")}}()}()},{}],8:[function(e,t,i){!function(e,t,i){"function"==typeof define&&define.amd?define(["jquery"],function(r){return i(r,e,t),r.mobile}):i(e.jQuery,e,t)}(this,document,function(e,t,i,r){!function(e){e.event.special.throttledresize={setup:function(){e(this).bind("resize",o)},teardown:function(){e(this).unbind("resize",o)}};var t,i,r,n=250,o=function(){i=(new Date).getTime(),r=i-a,r>=n?(a=i,e(this).trigger("throttledresize")):(t&&clearTimeout(t),t=setTimeout(o,n-r))},a=0}(e),function(e,t,i,r){function n(e){for(;e&&"undefined"!=typeof e.originalEvent;)e=e.originalEvent;return e}function o(t,i){var o,a,s,l,c,u,h,d,f,p=t.type;if(t=e.Event(t),t.type=i,o=t.originalEvent,a=e.event.props,p.search(/^(mouse|click)/)>-1&&(a=k),o)for(h=a.length,l;h;)l=a[--h],t[l]=o[l];if(p.search(/mouse(down|up)|click/)>-1&&!t.which&&(t.which=1),-1!==p.search(/^touch/)&&(s=n(o),p=s.touches,c=s.changedTouches,u=p&&p.length?p[0]:c&&c.length?c[0]:r,u))for(d=0,f=_.length;f>d;d++)l=_[d],t[l]=u[l];return t}function a(t){for(var i,r,n={};t;){i=e.data(t,T);for(r in i)i[r]&&(n[r]=n.hasVirtualBinding=!0);t=t.parentNode}return n}function s(t,i){for(var r;t;){if(r=e.data(t,T),r&&(!i||r[i]))return t;t=t.parentNode}return null}function l(){F=!1}function c(){F=!0}function u(){$=0,P.length=0,R=!1,c()}function h(){l()}function d(){f(),L=setTimeout(function(){L=0,u()},e.vmouse.resetTimerDuration)}function f(){L&&(clearTimeout(L),L=0)}function p(t,i,r){var n;return(r&&r[t]||!r&&s(i.target,t))&&(n=o(i,t),e(i.target).trigger(n)),n}function v(t){var i,r=e.data(t.target,z);!R&&(!$||$!==r)&&(i=p("v"+t.type,t),i&&(i.isDefaultPrevented()&&t.preventDefault(),i.isPropagationStopped()&&t.stopPropagation(),i.isImmediatePropagationStopped()&&t.stopImmediatePropagation()))}function m(t){var i,r,o,s=n(t).touches;s&&1===s.length&&(i=t.target,r=a(i),r.hasVirtualBinding&&($=q++,e.data(i,z,$),f(),h(),O=!1,o=n(t).touches[0],I=o.pageX,N=o.pageY,p("vmouseover",t,r),p("vmousedown",t,r)))}function g(e){F||(O||p("vmousecancel",e,a(e.target)),O=!0,d())}function y(t){if(!F){var i=n(t).touches[0],r=O,o=e.vmouse.moveDistanceThreshold,s=a(t.target);O=O||Math.abs(i.pageX-I)>o||Math.abs(i.pageY-N)>o,O&&!r&&p("vmousecancel",t,s),p("vmousemove",t,s),d()}}function b(e){if(!F){c();var t,i,r=a(e.target);p("vmouseup",e,r),O||(t=p("vclick",e,r),t&&t.isDefaultPrevented()&&(i=n(e).changedTouches[0],P.push({touchID:$,x:i.clientX,y:i.clientY}),R=!0)),p("vmouseout",e,r),O=!1,d()}}function x(t){var i,r=e.data(t,T);if(r)for(i in r)if(r[i])return!0;return!1}function w(){}function C(t){var i=t.substr(1);return{setup:function(){x(this)||e.data(this,T,{});var r=e.data(this,T);r[t]=!0,D[t]=(D[t]||0)+1,1===D[t]&&B.bind(i,v),e(this).bind(i,w),j&&(D.touchstart=(D.touchstart||0)+1,1===D.touchstart&&B.bind("touchstart",m).bind("touchend",b).bind("touchmove",y).bind("scroll",g))},teardown:function(){--D[t],D[t]||B.unbind(i,v),j&&(--D.touchstart,D.touchstart||B.unbind("touchstart",m).unbind("touchmove",y).unbind("touchend",b).unbind("scroll",g));var r=e(this),n=e.data(this,T);n&&(n[t]=!1),r.unbind(i,w),x(this)||r.removeData(T)}}}var S,A,T="virtualMouseBindings",z="virtualTouchID",M="vmouseover vmousedown vmousemove vmouseup vclick vmouseout vmousecancel".split(" "),_="clientX clientY pageX pageY screenX screenY".split(" "),E=e.event.mouseHooks?e.event.mouseHooks.props:[],k=e.event.props.concat(E),D={},L=0,I=0,N=0,O=!1,P=[],R=!1,F=!1,j="addEventListener"in i,B=e(i),q=1,$=0;for(e.vmouse={moveDistanceThreshold:10,clickDistanceThreshold:10,resetTimerDuration:1500},A=0;A<M.length;A++)e.event.special[M[A]]=C(M[A]);j&&i.addEventListener("click",function(t){var i,r,n,o,a,s,l=P.length,c=t.target;if(l)for(i=t.clientX,r=t.clientY,S=e.vmouse.clickDistanceThreshold,n=c;n;){for(o=0;l>o;o++)if(a=P[o],s=0,n===c&&Math.abs(a.x-i)<S&&Math.abs(a.y-r)<S||e.data(n,z)===a.touchID)return t.preventDefault(),void t.stopPropagation();n=n.parentNode}},!0)}(e,t,i),function(e){e.mobile={}}(e),function(e,t){var r={touch:"ontouchend"in i};e.mobile.support=e.mobile.support||{},e.extend(e.support,r),e.extend(e.mobile.support,r)}(e),function(e,t,r){function n(t,i,n,o){var a=n.type;n.type=i,o?e.event.trigger(n,r,t):e.event.dispatch.call(t,n),n.type=a}var o=e(i),a=e.mobile.support.touch,s="touchmove scroll",l=a?"touchstart":"mousedown",c=a?"touchend":"mouseup",u=a?"touchmove":"mousemove";e.each("touchstart touchmove touchend tap taphold swipe swipeleft swiperight scrollstart scrollstop".split(" "),function(t,i){e.fn[i]=function(e){return e?this.bind(i,e):this.trigger(i)},e.attrFn&&(e.attrFn[i]=!0)}),e.event.special.scrollstart={enabled:!0,setup:function(){function t(e,t){i=t,n(o,i?"scrollstart":"scrollstop",e)}var i,r,o=this,a=e(o);a.bind(s,function(n){e.event.special.scrollstart.enabled&&(i||t(n,!0),clearTimeout(r),r=setTimeout(function(){t(n,!1)},50))})},teardown:function(){e(this).unbind(s)}},e.event.special.tap={tapholdThreshold:750,emitTapOnTaphold:!0,setup:function(){var t=this,i=e(t),r=!1;i.bind("vmousedown",function(a){function s(){clearTimeout(u)}function l(){s(),i.unbind("vclick",c).unbind("vmouseup",s),o.unbind("vmousecancel",l)}function c(e){l(),r||h!==e.target?r&&e.preventDefault():n(t,"tap",e)}if(r=!1,a.which&&1!==a.which)return!1;var u,h=a.target;i.bind("vmouseup",s).bind("vclick",c),o.bind("vmousecancel",l),u=setTimeout(function(){e.event.special.tap.emitTapOnTaphold||(r=!0),n(t,"taphold",e.Event("taphold",{target:h}))},e.event.special.tap.tapholdThreshold)})},teardown:function(){e(this).unbind("vmousedown").unbind("vclick").unbind("vmouseup"),o.unbind("vmousecancel")}},e.event.special.swipe={scrollSupressionThreshold:30,durationThreshold:1e3,horizontalDistanceThreshold:30,verticalDistanceThreshold:30,getLocation:function(e){var i=t.pageXOffset,r=t.pageYOffset,n=e.clientX,o=e.clientY;return 0===e.pageY&&Math.floor(o)>Math.floor(e.pageY)||0===e.pageX&&Math.floor(n)>Math.floor(e.pageX)?(n-=i,o-=r):(o<e.pageY-r||n<e.pageX-i)&&(n=e.pageX-i,o=e.pageY-r),{x:n,y:o}},start:function(t){var i=t.originalEvent.touches?t.originalEvent.touches[0]:t,r=e.event.special.swipe.getLocation(i);return{time:(new Date).getTime(),coords:[r.x,r.y],origin:e(t.target)}},stop:function(t){var i=t.originalEvent.touches?t.originalEvent.touches[0]:t,r=e.event.special.swipe.getLocation(i);return{time:(new Date).getTime(),coords:[r.x,r.y]}},handleSwipe:function(t,i,r,o){if(i.time-t.time<e.event.special.swipe.durationThreshold&&Math.abs(t.coords[0]-i.coords[0])>e.event.special.swipe.horizontalDistanceThreshold&&Math.abs(t.coords[1]-i.coords[1])<e.event.special.swipe.verticalDistanceThreshold){var a=t.coords[0]>i.coords[0]?"swipeleft":"swiperight";return n(r,"swipe",e.Event("swipe",{target:o,swipestart:t,swipestop:i}),!0),n(r,a,e.Event(a,{target:o,swipestart:t,swipestop:i}),!0),!0}return!1},eventInProgress:!1,setup:function(){var t,i=this,r=e(i),n={};t=e.data(this,"mobile-events"),t||(t={length:0},e.data(this,"mobile-events",t)),t.length++,t.swipe=n,n.start=function(t){if(!e.event.special.swipe.eventInProgress){e.event.special.swipe.eventInProgress=!0;var r,a=e.event.special.swipe.start(t),s=t.target,l=!1;n.move=function(t){a&&!t.isDefaultPrevented()&&(r=e.event.special.swipe.stop(t),l||(l=e.event.special.swipe.handleSwipe(a,r,i,s),l&&(e.event.special.swipe.eventInProgress=!1)),Math.abs(a.coords[0]-r.coords[0])>e.event.special.swipe.scrollSupressionThreshold&&t.preventDefault())},n.stop=function(){l=!0,e.event.special.swipe.eventInProgress=!1,o.off(u,n.move),n.move=null},o.on(u,n.move).one(c,n.stop)}},r.on(l,n.start)},teardown:function(){var t,i;t=e.data(this,"mobile-events"),t&&(i=t.swipe,delete t.swipe,t.length--,0===t.length&&e.removeData(this,"mobile-events")),i&&(i.start&&e(this).off(l,i.start),i.move&&o.off(u,i.move),i.stop&&o.off(c,i.stop))}},e.each({scrollstop:"scrollstart",taphold:"tap",swipeleft:"swipe.left",swiperight:"swipe.right"},function(t,i){e.event.special[t]={setup:function(){e(this).bind(i,e.noop)},teardown:function(){e(this).unbind(i)}}})}(e,this),function(e,t,i){e.extend(e.mobile,{version:"1.4.5",subPageUrlKey:"ui-page",hideUrlBar:!0,keepNative:":jqmData(role='none'), :jqmData(role='nojs')",activePageClass:"ui-page-active",activeBtnClass:"ui-btn-active",focusClass:"ui-focus",ajaxEnabled:!0,hashListeningEnabled:!0,linkBindingEnabled:!0,defaultPageTransition:"fade",maxTransitionWidth:!1,minScrollBack:0,defaultDialogTransition:"pop",pageLoadErrorMessage:"Error Loading Page",pageLoadErrorMessageTheme:"a",phonegapNavigationEnabled:!1,autoInitializePage:!0,pushStateEnabled:!0,ignoreContentEnabled:!1,buttonMarkup:{hoverDelay:200},dynamicBaseEnabled:!0,pageContainer:e(),allowCrossDomainPages:!1,dialogHashKey:"&ui-state=dialog"})}(e,this),function(e,t,i){var r={},n=e.find,o=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,a=/:jqmData\(([^)]*)\)/g;e.extend(e.mobile,{ns:"",getAttribute:function(t,i){var r;t=t.jquery?t[0]:t,t&&t.getAttribute&&(r=t.getAttribute("data-"+e.mobile.ns+i));try{r="true"===r?!0:"false"===r?!1:"null"===r?null:+r+""===r?+r:o.test(r)?JSON.parse(r):r}catch(n){}return r},nsNormalizeDict:r,nsNormalize:function(t){return r[t]||(r[t]=e.camelCase(e.mobile.ns+t))},closestPageData:function(e){return e.closest(":jqmData(role='page'), :jqmData(role='dialog')").data("mobile-page")}}),e.fn.jqmData=function(t,r){var n;return"undefined"!=typeof t&&(t&&(t=e.mobile.nsNormalize(t)),n=arguments.length<2||r===i?this.data(t):this.data(t,r)),n},e.jqmData=function(t,i,r){var n;return"undefined"!=typeof i&&(n=e.data(t,i?e.mobile.nsNormalize(i):i,r)),n},e.fn.jqmRemoveData=function(t){return this.removeData(e.mobile.nsNormalize(t))},e.jqmRemoveData=function(t,i){return e.removeData(t,e.mobile.nsNormalize(i))},e.find=function(t,i,r,o){return t.indexOf(":jqmData")>-1&&(t=t.replace(a,"[data-"+(e.mobile.ns||"")+"$1]")),n.call(this,t,i,r,o)},e.extend(e.find,n)}(e,this),function(e,t){function r(t,i){var r,o,a,s=t.nodeName.toLowerCase();return"area"===s?(r=t.parentNode,o=r.name,t.href&&o&&"map"===r.nodeName.toLowerCase()?(a=e("img[usemap=#"+o+"]")[0],!!a&&n(a)):!1):(/input|select|textarea|button|object/.test(s)?!t.disabled:"a"===s?t.href||i:i)&&n(t)}function n(t){return e.expr.filters.visible(t)&&!e(t).parents().addBack().filter(function(){return"hidden"===e.css(this,"visibility")}).length}var o=0,a=/^ui-id-\d+$/;e.ui=e.ui||{},e.extend(e.ui,{version:"c0ab71056b936627e8a7821f03c044aec6280a40",keyCode:{BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38}}),e.fn.extend({focus:function(t){return function(i,r){return"number"==typeof i?this.each(function(){var t=this;setTimeout(function(){e(t).focus(),r&&r.call(t)},i)}):t.apply(this,arguments)}}(e.fn.focus),scrollParent:function(){var t;return t=e.ui.ie&&/(static|relative)/.test(this.css("position"))||/absolute/.test(this.css("position"))?this.parents().filter(function(){return/(relative|absolute|fixed)/.test(e.css(this,"position"))&&/(auto|scroll)/.test(e.css(this,"overflow")+e.css(this,"overflow-y")+e.css(this,"overflow-x"))}).eq(0):this.parents().filter(function(){return/(auto|scroll)/.test(e.css(this,"overflow")+e.css(this,"overflow-y")+e.css(this,"overflow-x"))}).eq(0),/fixed/.test(this.css("position"))||!t.length?e(this[0].ownerDocument||i):t},uniqueId:function(){return this.each(function(){this.id||(this.id="ui-id-"+ ++o)})},removeUniqueId:function(){return this.each(function(){a.test(this.id)&&e(this).removeAttr("id")})}}),e.extend(e.expr[":"],{data:e.expr.createPseudo?e.expr.createPseudo(function(t){return function(i){return!!e.data(i,t)}}):function(t,i,r){return!!e.data(t,r[3])},focusable:function(t){return r(t,!isNaN(e.attr(t,"tabindex")))},tabbable:function(t){var i=e.attr(t,"tabindex"),n=isNaN(i);return(n||i>=0)&&r(t,!n)}}),e("<a>").outerWidth(1).jquery||e.each(["Width","Height"],function(i,r){function n(t,i,r,n){return e.each(o,function(){i-=parseFloat(e.css(t,"padding"+this))||0,r&&(i-=parseFloat(e.css(t,"border"+this+"Width"))||0),n&&(i-=parseFloat(e.css(t,"margin"+this))||0)}),i}var o="Width"===r?["Left","Right"]:["Top","Bottom"],a=r.toLowerCase(),s={innerWidth:e.fn.innerWidth,innerHeight:e.fn.innerHeight,outerWidth:e.fn.outerWidth,outerHeight:e.fn.outerHeight};e.fn["inner"+r]=function(i){return i===t?s["inner"+r].call(this):this.each(function(){e(this).css(a,n(this,i)+"px")})},e.fn["outer"+r]=function(t,i){return"number"!=typeof t?s["outer"+r].call(this,t):this.each(function(){e(this).css(a,n(this,t,!0,i)+"px")})}}),e.fn.addBack||(e.fn.addBack=function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}),e("<a>").data("a-b","a").removeData("a-b").data("a-b")&&(e.fn.removeData=function(t){return function(i){return arguments.length?t.call(this,e.camelCase(i)):t.call(this)}}(e.fn.removeData)),e.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()),e.support.selectstart="onselectstart"in i.createElement("div"),e.fn.extend({disableSelection:function(){return this.bind((e.support.selectstart?"selectstart":"mousedown")+".ui-disableSelection",function(e){e.preventDefault()})},enableSelection:function(){return this.unbind(".ui-disableSelection")},zIndex:function(r){if(r!==t)return this.css("zIndex",r);if(this.length)for(var n,o,a=e(this[0]);a.length&&a[0]!==i;){if(n=a.css("position"),("absolute"===n||"relative"===n||"fixed"===n)&&(o=parseInt(a.css("zIndex"),10),!isNaN(o)&&0!==o))return o;a=a.parent()}return 0}}),e.ui.plugin={add:function(t,i,r){var n,o=e.ui[t].prototype;for(n in r)o.plugins[n]=o.plugins[n]||[],o.plugins[n].push([i,r[n]])},call:function(e,t,i,r){var n,o=e.plugins[t];if(o&&(r||e.element[0].parentNode&&11!==e.element[0].parentNode.nodeType))for(n=0;n<o.length;n++)e.options[o[n][0]]&&o[n][1].apply(e.element,i)}}}(e),function(e,t,r){var n=function(t,i){var r=t.parent(),n=[],o=function(){var t=e(this),i=e.mobile.toolbar&&t.data("mobile-toolbar")?t.toolbar("option"):{position:t.attr("data-"+e.mobile.ns+"position"),updatePagePadding:t.attr("data-"+e.mobile.ns+"update-page-padding")!==!1};return"fixed"!==i.position||i.updatePagePadding!==!0},a=r.children(":jqmData(role='header')").filter(o),s=t.children(":jqmData(role='header')"),l=r.children(":jqmData(role='footer')").filter(o),c=t.children(":jqmData(role='footer')");return 0===s.length&&a.length>0&&(n=n.concat(a.toArray())),0===c.length&&l.length>0&&(n=n.concat(l.toArray())),e.each(n,function(t,r){i-=e(r).outerHeight()}),Math.max(0,i)};e.extend(e.mobile,{window:e(t),document:e(i),keyCode:e.ui.keyCode,behaviors:{},silentScroll:function(i){"number"!==e.type(i)&&(i=e.mobile.defaultHomeScroll),e.event.special.scrollstart.enabled=!1,setTimeout(function(){t.scrollTo(0,i),e.mobile.document.trigger("silentscroll",{x:0,y:i})},20),setTimeout(function(){e.event.special.scrollstart.enabled=!0},150)},getClosestBaseUrl:function(t){var i=e(t).closest(".ui-page").jqmData("url"),r=e.mobile.path.documentBase.hrefNoHash;return e.mobile.dynamicBaseEnabled&&i&&e.mobile.path.isPath(i)||(i=r),e.mobile.path.makeUrlAbsolute(i,r)},removeActiveLinkClass:function(t){!!e.mobile.activeClickedLink&&(!e.mobile.activeClickedLink.closest("."+e.mobile.activePageClass).length||t)&&e.mobile.activeClickedLink.removeClass(e.mobile.activeBtnClass),e.mobile.activeClickedLink=null},getInheritedTheme:function(e,t){for(var i,r,n=e[0],o="",a=/ui-(bar|body|overlay)-([a-z])\b/;n&&(i=n.className||"",!(i&&(r=a.exec(i))&&(o=r[2])));)n=n.parentNode;return o||t||"a"},enhanceable:function(e){return this.haveParents(e,"enhance")},hijackable:function(e){return this.haveParents(e,"ajax")},haveParents:function(t,i){if(!e.mobile.ignoreContentEnabled)return t;var r,n,o,a,s,l=t.length,c=e();for(a=0;l>a;a++){for(n=t.eq(a),o=!1,r=t[a];r;){if(s=r.getAttribute?r.getAttribute("data-"+e.mobile.ns+i):"","false"===s){o=!0;break}r=r.parentNode}o||(c=c.add(n))}return c},getScreenHeight:function(){return t.innerHeight||e.mobile.window.height()},resetActivePageHeight:function(t){var i=e("."+e.mobile.activePageClass),r=i.height(),o=i.outerHeight(!0);t=n(i,"number"==typeof t?t:e.mobile.getScreenHeight()),i.css("min-height",""),i.height()<t&&i.css("min-height",t-(o-r))},loading:function(){var t=this.loading._widget||e(e.mobile.loader.prototype.defaultHtml).loader(),i=t.loader.apply(t,arguments);return this.loading._widget=t,i}}),e.addDependents=function(t,i){var r=e(t),n=r.jqmData("dependents")||e();r.jqmData("dependents",e(n).add(i))},e.fn.extend({removeWithDependents:function(){e.removeWithDependents(this)},enhanceWithin:function(){var t,i={},r=e.mobile.page.prototype.keepNativeSelector(),n=this;e.mobile.nojs&&e.mobile.nojs(this),e.mobile.links&&e.mobile.links(this),e.mobile.degradeInputsWithin&&e.mobile.degradeInputsWithin(this),e.fn.buttonMarkup&&this.find(e.fn.buttonMarkup.initSelector).not(r).jqmEnhanceable().buttonMarkup(),e.fn.fieldcontain&&this.find(":jqmData(role='fieldcontain')").not(r).jqmEnhanceable().fieldcontain(),e.each(e.mobile.widgets,function(t,o){if(o.initSelector){var a=e.mobile.enhanceable(n.find(o.initSelector));a.length>0&&(a=a.not(r)),a.length>0&&(i[o.prototype.widgetName]=a)}});for(t in i)i[t][t]();return this},addDependents:function(t){e.addDependents(this,t)},getEncodedText:function(){return e("<a>").text(this.text()).html()},jqmEnhanceable:function(){return e.mobile.enhanceable(this)},jqmHijackable:function(){return e.mobile.hijackable(this)}}),e.removeWithDependents=function(t){var i=e(t);(i.jqmData("dependents")||e()).remove(),i.remove()},e.addDependents=function(t,i){var r=e(t),n=r.jqmData("dependents")||e();r.jqmData("dependents",e(n).add(i))},e.find.matches=function(t,i){return e.find(t,null,null,i)},e.find.matchesSelector=function(t,i){return e.find(i,null,null,[t]).length>0}}(e,this),function(e,r){t.matchMedia=t.matchMedia||function(e,t){var i,r=e.documentElement,n=r.firstElementChild||r.firstChild,o=e.createElement("body"),a=e.createElement("div");return a.id="mq-test-1",a.style.cssText="position:absolute;top:-100em",o.style.background="none",o.appendChild(a),function(e){return a.innerHTML='&shy;<style media="'+e+'"> #mq-test-1 { width: 42px; }</style>',r.insertBefore(o,n),i=42===a.offsetWidth,r.removeChild(o),{matches:i,media:e}}}(i),e.mobile.media=function(e){return t.matchMedia(e).matches}}(e)})},{}],9:[function(e,t,i){!function(e){var t,i,r,n;return n="quickfit",r={min:8,max:12,tolerance:.02,truncate:!1,width:null,sampleNumberOfLetters:10,sampleFontSize:12},i=function(){function t(t){this.options=t,this.item=e('<span id="meassure"></span>'),this.item.css({position:"absolute",left:"-1000px",top:"-1000px","font-size":""+this.options.sampleFontSize+"px"}),e("body").append(this.item),this.meassures={}}var i=null;return t.instance=function(e){return i||(i=new t(e)),i},t.prototype.getMeassure=function(e){var t;return t=this.meassures[e],t||(t=this.setMeassure(e)),t},t.prototype.setMeassure=function(e){var t,i,r,n,o;for(n="",r=" "===e?"&nbsp;":e,i=0,o=this.options.sampleNumberOfLetters-1;o>=0?o>=i:i>=o;o>=0?i++:i--)n+=r;return this.item.html(n),t=this.item.width()/this.options.sampleNumberOfLetters/this.options.sampleFontSize,this.meassures[e]=t,t},t}(),t=function(){function t(t,o){this.$element=t,this.options=e.extend({},r,o),this.$element=e(this.$element),this._defaults=r,this._name=n,this.quickfitHelper=i.instance(this.options)}return t.prototype.fit=function(){var e;return this.options.width||(e=this.$element.width(),this.options.width=e-this.options.tolerance*e),(this.text=this.$element.attr("data-quickfit"))?this.previouslyTruncated=!0:this.text=this.$element.text(),this.calculateFontSize(),this.options.truncate&&this.truncate(),{$element:this.$element,size:this.fontSize}},t.prototype.calculateFontSize=function(){var e,t,i;for(t=0,i=0;i<this.text.length;++i)e=this.text.charAt(i),t+=this.quickfitHelper.getMeassure(e);return this.targetFontSize=parseInt(this.options.width/t),this.fontSize=Math.max(this.options.min,Math.min(this.options.max,this.targetFontSize))},t.prototype.truncate=function(){var e,t,i,r,n;if(this.fontSize>this.targetFontSize){for(r="",n=3*this.quickfitHelper.getMeassure(".")*this.fontSize,e=0;n<this.options.width&&e<this.text.length;)i=this.text[e++],t&&(r+=t),n+=this.fontSize*this.quickfitHelper.getMeassure(i),t=i;return r.length+1===this.text.length?r=this.text:r+="...",this.textWasTruncated=!0,this.$element.attr("data-quickfit",this.text).html(r)}return this.previouslyTruncated?this.$element.html(this.text):void 0},t}(),e.fn.quickfit=function(e){for(var i=[],r=this.each(function(){var r=new t(this,e).fit();return i.push(r),r.$element}),n=0;n<i.length;n++){var o=i[n];o.$element.css({fontSize:o.size+"px"})}return r}}(jQuery,window)},{}],10:[function(e,t,i){"use strict";console.log("hi"),console.log("test"),console.log("not here")},{}],11:[function(e,t,i){window.Modernizr=function(e,t,i){function r(e){b.cssText=e}function n(e,t){return r(S.join(e+";")+(t||""))}function o(e,t){return typeof e===t}function a(e,t){return!!~(""+e).indexOf(t)}function s(e,t){for(var r in e){var n=e[r];if(!a(n,"-")&&b[n]!==i)return"pfx"==t?n:!0}return!1}function l(e,t,r){for(var n in e){var a=t[e[n]];if(a!==i)return r===!1?e[n]:o(a,"function")?a.bind(r||t):a}return!1}function c(e,t,i){var r=e.charAt(0).toUpperCase()+e.slice(1),n=(e+" "+T.join(r+" ")+r).split(" ");return o(t,"string")||o(t,"undefined")?s(n,t):(n=(e+" "+z.join(r+" ")+r).split(" "),l(n,t,i))}function u(){p.input=function(i){for(var r=0,n=i.length;n>r;r++)k[i[r]]=!!(i[r]in x);return k.list&&(k.list=!(!t.createElement("datalist")||!e.HTMLDataListElement)),k}("autocomplete autofocus list placeholder max min multiple pattern required step".split(" ")),p.inputtypes=function(e){for(var r,n,o,a=0,s=e.length;s>a;a++)x.setAttribute("type",n=e[a]),r="text"!==x.type,r&&(x.value=w,x.style.cssText="position:absolute;visibility:hidden;",/^range$/.test(n)&&x.style.WebkitAppearance!==i?(m.appendChild(x),o=t.defaultView,r=o.getComputedStyle&&"textfield"!==o.getComputedStyle(x,null).WebkitAppearance&&0!==x.offsetHeight,m.removeChild(x)):/^(search|tel)$/.test(n)||(r=/^(url|email)$/.test(n)?x.checkValidity&&x.checkValidity()===!1:x.value!=w)),
E[e[a]]=!!r;return E}("search tel url email datetime date month week time datetime-local number range color".split(" "))}var h,d,f="2.8.3",p={},v=!0,m=t.documentElement,g="modernizr",y=t.createElement(g),b=y.style,x=t.createElement("input"),w=":)",C={}.toString,S=" -webkit- -moz- -o- -ms- ".split(" "),A="Webkit Moz O ms",T=A.split(" "),z=A.toLowerCase().split(" "),M={svg:"http://www.w3.org/2000/svg"},_={},E={},k={},D=[],L=D.slice,I=function(e,i,r,n){var o,a,s,l,c=t.createElement("div"),u=t.body,h=u||t.createElement("body");if(parseInt(r,10))for(;r--;)s=t.createElement("div"),s.id=n?n[r]:g+(r+1),c.appendChild(s);return o=["&#173;",'<style id="s',g,'">',e,"</style>"].join(""),c.id=g,(u?c:h).innerHTML+=o,h.appendChild(c),u||(h.style.background="",h.style.overflow="hidden",l=m.style.overflow,m.style.overflow="hidden",m.appendChild(h)),a=i(c,e),u?c.parentNode.removeChild(c):(h.parentNode.removeChild(h),m.style.overflow=l),!!a},N=function(t){var i=e.matchMedia||e.msMatchMedia;if(i)return i(t)&&i(t).matches||!1;var r;return I("@media "+t+" { #"+g+" { position: absolute; } }",function(t){r="absolute"==(e.getComputedStyle?getComputedStyle(t,null):t.currentStyle).position}),r},O=function(){function e(e,n){n=n||t.createElement(r[e]||"div"),e="on"+e;var a=e in n;return a||(n.setAttribute||(n=t.createElement("div")),n.setAttribute&&n.removeAttribute&&(n.setAttribute(e,""),a=o(n[e],"function"),o(n[e],"undefined")||(n[e]=i),n.removeAttribute(e))),n=null,a}var r={select:"input",change:"input",submit:"form",reset:"form",error:"img",load:"img",abort:"img"};return e}(),P={}.hasOwnProperty;d=o(P,"undefined")||o(P.call,"undefined")?function(e,t){return t in e&&o(e.constructor.prototype[t],"undefined")}:function(e,t){return P.call(e,t)},Function.prototype.bind||(Function.prototype.bind=function(e){var t=this;if("function"!=typeof t)throw new TypeError;var i=L.call(arguments,1),r=function(){if(this instanceof r){var n=function(){};n.prototype=t.prototype;var o=new n,a=t.apply(o,i.concat(L.call(arguments)));return Object(a)===a?a:o}return t.apply(e,i.concat(L.call(arguments)))};return r}),_.flexbox=function(){return c("flexWrap")},_.flexboxlegacy=function(){return c("boxDirection")},_.canvas=function(){var e=t.createElement("canvas");return!(!e.getContext||!e.getContext("2d"))},_.canvastext=function(){return!(!p.canvas||!o(t.createElement("canvas").getContext("2d").fillText,"function"))},_.webgl=function(){return!!e.WebGLRenderingContext},_.touch=function(){var i;return"ontouchstart"in e||e.DocumentTouch&&t instanceof DocumentTouch?i=!0:I(["@media (",S.join("touch-enabled),("),g,")","{#modernizr{top:9px;position:absolute}}"].join(""),function(e){i=9===e.offsetTop}),i},_.geolocation=function(){return"geolocation"in navigator},_.postmessage=function(){return!!e.postMessage},_.websqldatabase=function(){return!!e.openDatabase},_.indexedDB=function(){return!!c("indexedDB",e)},_.hashchange=function(){return O("hashchange",e)&&(t.documentMode===i||t.documentMode>7)},_.history=function(){return!(!e.history||!history.pushState)},_.draganddrop=function(){var e=t.createElement("div");return"draggable"in e||"ondragstart"in e&&"ondrop"in e},_.websockets=function(){return"WebSocket"in e||"MozWebSocket"in e},_.rgba=function(){return r("background-color:rgba(150,255,150,.5)"),a(b.backgroundColor,"rgba")},_.hsla=function(){return r("background-color:hsla(120,40%,100%,.5)"),a(b.backgroundColor,"rgba")||a(b.backgroundColor,"hsla")},_.multiplebgs=function(){return r("background:url(https://),url(https://),red url(https://)"),/(url\s*\(.*?){3}/.test(b.background)},_.backgroundsize=function(){return c("backgroundSize")},_.borderimage=function(){return c("borderImage")},_.borderradius=function(){return c("borderRadius")},_.boxshadow=function(){return c("boxShadow")},_.textshadow=function(){return""===t.createElement("div").style.textShadow},_.opacity=function(){return n("opacity:.55"),/^0.55$/.test(b.opacity)},_.cssanimations=function(){return c("animationName")},_.csscolumns=function(){return c("columnCount")},_.cssgradients=function(){var e="background-image:",t="gradient(linear,left top,right bottom,from(#9f9),to(white));",i="linear-gradient(left top,#9f9, white);";return r((e+"-webkit- ".split(" ").join(t+e)+S.join(i+e)).slice(0,-e.length)),a(b.backgroundImage,"gradient")},_.cssreflections=function(){return c("boxReflect")},_.csstransforms=function(){return!!c("transform")},_.csstransforms3d=function(){var e=!!c("perspective");return e&&"webkitPerspective"in m.style&&I("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}",function(t){e=9===t.offsetLeft&&3===t.offsetHeight}),e},_.csstransitions=function(){return c("transition")},_.fontface=function(){var e;return I('@font-face {font-family:"font";src:url("https://")}',function(i,r){var n=t.getElementById("smodernizr"),o=n.sheet||n.styleSheet,a=o?o.cssRules&&o.cssRules[0]?o.cssRules[0].cssText:o.cssText||"":"";e=/src/i.test(a)&&0===a.indexOf(r.split(" ")[0])}),e},_.generatedcontent=function(){var e;return I(["#",g,"{font:0/0 a}#",g,':after{content:"',w,'";visibility:hidden;font:3px/1 a}'].join(""),function(t){e=t.offsetHeight>=3}),e},_.video=function(){var e=t.createElement("video"),i=!1;try{(i=!!e.canPlayType)&&(i=new Boolean(i),i.ogg=e.canPlayType('video/ogg; codecs="theora"').replace(/^no$/,""),i.h264=e.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/,""),i.webm=e.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/,""))}catch(r){}return i},_.audio=function(){var e=t.createElement("audio"),i=!1;try{(i=!!e.canPlayType)&&(i=new Boolean(i),i.ogg=e.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),i.mp3=e.canPlayType("audio/mpeg;").replace(/^no$/,""),i.wav=e.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),i.m4a=(e.canPlayType("audio/x-m4a;")||e.canPlayType("audio/aac;")).replace(/^no$/,""))}catch(r){}return i},_.localstorage=function(){try{return localStorage.setItem(g,g),localStorage.removeItem(g),!0}catch(e){return!1}},_.sessionstorage=function(){try{return sessionStorage.setItem(g,g),sessionStorage.removeItem(g),!0}catch(e){return!1}},_.webworkers=function(){return!!e.Worker},_.applicationcache=function(){return!!e.applicationCache},_.svg=function(){return!!t.createElementNS&&!!t.createElementNS(M.svg,"svg").createSVGRect},_.inlinesvg=function(){var e=t.createElement("div");return e.innerHTML="<svg/>",(e.firstChild&&e.firstChild.namespaceURI)==M.svg},_.smil=function(){return!!t.createElementNS&&/SVGAnimate/.test(C.call(t.createElementNS(M.svg,"animate")))},_.svgclippaths=function(){return!!t.createElementNS&&/SVGClipPath/.test(C.call(t.createElementNS(M.svg,"clipPath")))};for(var R in _)d(_,R)&&(h=R.toLowerCase(),p[h]=_[R](),D.push((p[h]?"":"no-")+h));return p.input||u(),p.addTest=function(e,t){if("object"==typeof e)for(var r in e)d(e,r)&&p.addTest(r,e[r]);else{if(e=e.toLowerCase(),p[e]!==i)return p;t="function"==typeof t?t():t,"undefined"!=typeof v&&v&&(m.className+=" "+(t?"":"no-")+e),p[e]=t}return p},r(""),y=x=null,function(e,t){function i(e,t){var i=e.createElement("p"),r=e.getElementsByTagName("head")[0]||e.documentElement;return i.innerHTML="x<style>"+t+"</style>",r.insertBefore(i.lastChild,r.firstChild)}function r(){var e=y.elements;return"string"==typeof e?e.split(" "):e}function n(e){var t=g[e[v]];return t||(t={},m++,e[v]=m,g[m]=t),t}function o(e,i,r){if(i||(i=t),u)return i.createElement(e);r||(r=n(i));var o;return o=r.cache[e]?r.cache[e].cloneNode():p.test(e)?(r.cache[e]=r.createElem(e)).cloneNode():r.createElem(e),!o.canHaveChildren||f.test(e)||o.tagUrn?o:r.frag.appendChild(o)}function a(e,i){if(e||(e=t),u)return e.createDocumentFragment();i=i||n(e);for(var o=i.frag.cloneNode(),a=0,s=r(),l=s.length;l>a;a++)o.createElement(s[a]);return o}function s(e,t){t.cache||(t.cache={},t.createElem=e.createElement,t.createFrag=e.createDocumentFragment,t.frag=t.createFrag()),e.createElement=function(i){return y.shivMethods?o(i,e,t):t.createElem(i)},e.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+r().join().replace(/[\w\-]+/g,function(e){return t.createElem(e),t.frag.createElement(e),'c("'+e+'")'})+");return n}")(y,t.frag)}function l(e){e||(e=t);var r=n(e);return!y.shivCSS||c||r.hasCSS||(r.hasCSS=!!i(e,"article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")),u||s(e,r),e}var c,u,h="3.7.0",d=e.html5||{},f=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,p=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,v="_html5shiv",m=0,g={};!function(){try{var e=t.createElement("a");e.innerHTML="<xyz></xyz>",c="hidden"in e,u=1==e.childNodes.length||function(){t.createElement("a");var e=t.createDocumentFragment();return"undefined"==typeof e.cloneNode||"undefined"==typeof e.createDocumentFragment||"undefined"==typeof e.createElement}()}catch(i){c=!0,u=!0}}();var y={elements:d.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",version:h,shivCSS:d.shivCSS!==!1,supportsUnknownElements:u,shivMethods:d.shivMethods!==!1,type:"default",shivDocument:l,createElement:o,createDocumentFragment:a};e.html5=y,l(t)}(this,t),p._version=f,p._prefixes=S,p._domPrefixes=z,p._cssomPrefixes=T,p.mq=N,p.hasEvent=O,p.testProp=function(e){return s([e])},p.testAllProps=c,p.testStyles=I,p.prefixed=function(e,t,i){return t?c(e,t,i):c(e,"pfx")},m.className=m.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+(v?" js "+D.join(" "):""),p}(this,this.document)},{}],12:[function(e,t,i){!function(e){"use strict";function t(){var t=s.clientHeight,i=e.innerHeight;return i>t?i:t}function i(){return e.pageYOffset||s.scrollTop}function r(e){var t=0,i=0;do isNaN(e.offsetTop)||(t+=e.offsetTop),isNaN(e.offsetLeft)||(i+=e.offsetLeft);while(e=e.offsetParent);return{top:t,left:i}}function n(e,n){var o=e.offsetHeight,a=i(),s=a+t(),l=r(e).top,c=l+o,n=n||0;return s>=l+o*n&&c-o*n>=a}function o(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i]);return e}function a(e,t){this.el=e,this.options=o(this.defaults,t),this._init()}var s=e.document.documentElement;a.prototype={defaults:{minDuration:0,maxDuration:0,viewportFactor:0},_init:function(){this.items=Array.prototype.slice.call(document.querySelectorAll("#"+this.el.id+" > li")),this.itemsCount=this.items.length,this.itemsRenderedCount=0,this.didScroll=!1;var t=this;imagesLoaded(this.el,function(){new Masonry(t.el,{itemSelector:"li",transitionDuration:0}),Modernizr.cssanimations&&(t.items.forEach(function(e,i){n(e)&&(t._checkTotalRendered(),classie.add(e,"shown"))}),e.addEventListener("scroll",function(){t._onScrollFn()},!1),e.addEventListener("resize",function(){t._resizeHandler()},!1))})},_onScrollFn:function(){var e=this;this.didScroll||(this.didScroll=!0,setTimeout(function(){e._scrollPage()},60))},_scrollPage:function(){var e=this;this.items.forEach(function(r,o){classie.has(r,"shown")||classie.has(r,"animate")||!n(r,e.options.viewportFactor)||setTimeout(function(){var n=i()+t()/2;if(e.el.style.WebkitPerspectiveOrigin="50% "+n+"px",e.el.style.MozPerspectiveOrigin="50% "+n+"px",e.el.style.perspectiveOrigin="50% "+n+"px",e._checkTotalRendered(),e.options.minDuration&&e.options.maxDuration){var o=Math.random()*(e.options.maxDuration-e.options.minDuration)+e.options.minDuration+"s";r.style.WebkitAnimationDuration=o,r.style.MozAnimationDuration=o,r.style.animationDuration=o}classie.add(r,"animate")},25)}),this.didScroll=!1},_resizeHandler:function(){function e(){t._scrollPage(),t.resizeTimeout=null}var t=this;this.resizeTimeout&&clearTimeout(this.resizeTimeout),this.resizeTimeout=setTimeout(e,1e3)},_checkTotalRendered:function(){++this.itemsRenderedCount,this.itemsRenderedCount===this.itemsCount&&e.removeEventListener("scroll",this._onScrollFn)}},e.AnimOnScroll=a}(window)},{}],13:[function(e,t,i){pqr.autocomplete={debug:!0,input_selector:"#search-bar-auto",results_selector:".autocomplete-results",results_size_max:10,database:[]},pqr.autocomplete.init=function(e){$(this.results_selector).slideUp(),this.typeahead(),this.isFormula=pqr.htmlUtilities.isFormula,this.isINCHI=pqr.htmlUtilities.isINCHI},pqr.autocomplete.formulaTokenizer=function(e){e=e.toLowerCase();var t=e.replace(/([a-z])/g," $1").trim(),i=t?t.split(/\s+/):[];return i.push(e),i},pqr.autocomplete.suggestionSorter=function(e,t){var i=this.isFormula(t),r=(this.isINCHI(t),null==t.match(/\d+/g));e=this.filter(e,t);var n=[],o=[];return e=$.map(e,function(e,o){return t.length>2&&(r||!i)&&t==e.name.substring(0,t.length).toLowerCase()?(n.push(e),null):(t.length>2&&i&&t==e.formula.substring(0,t.length).toLowerCase(),e)}),n.length&&(n.sort(function(e,t){return t.name.length-e.name.length}),$.each(n,function(t,i){e.unshift(i)})),o.length&&(o.sort(function(e,t){return t.formula.length-e.formula.length}),$.each(o,function(t,i){e.unshift(i)})),e.slice(0,this.results_size_max)},pqr.autocomplete.filter=function(e,t){var i=this.isFormula(t),r=this.isINCHI(t),n=(null==t.match(/\d+/g),[]);return e=$.map(e,function(e,t){return n.indexOf(e.inchikey)<0?(n.push(e.inchikey),!r&&!i&&e.name.length>20?null:(e.name.length>20||null==e.name.match(/[,-]/g),e)):null})},pqr.autocomplete.typeahead=function(){auto_complete;this.engine=new Bloodhound({datumTokenizer:function(e){var t=Bloodhound.tokenizers.whitespace(e.name),i=pqr.autocomplete.formulaTokenizer(e.formula),r=e.synonyms,n=e.tags,o=e.inchikey;return n=[],t.concat(i).concat(r).concat(n).concat(o)},queryTokenizer:Bloodhound.tokenizers.whitespace,local:auto_complete,remote:{url:"/suggestions?partial=%QUERY",wildcard:"%QUERY"},cache:!0,identify:function(e){return e.inchikey}}),this.lowRank=new Bloodhound({datumTokenizer:function(e){var t=e.synonyms,i=e.tags;return t=[],i=[],t.concat(i)},queryTokenizer:Bloodhound.tokenizers.whitespace,local:auto_complete,identify:function(e){return e.inchikey}}),this.TypeAhead=$(this.input_selector).typeahead({hint:!1,minLength:1,classNames:{dataset:"autocomplete-results",suggestion:"suggestion"}},{name:"name",display:"name",limit:1e3,source:function(e,t,i){pqr.autocomplete.engine.search(e,function(i){t(pqr.autocomplete.suggestionSorter(i,e.toLowerCase()))},function(t){i(pqr.autocomplete.suggestionSorter(t,e.toLowerCase()))})},templates:{empty:function(e){return"<div><a href='#'><div class='suggestion col-xs-12'><h3>Zero results. Search for <samp class='font-red'>"+e.query+"</samp></h3></div></a> </div>"},suggestion:function(e){return pqr.autocomplete.renderHTML(e)},pending:"<div><a href='#'><div class='suggestion col-xs-12'><h3 class='text-center'><i class='fa fa-spinner fa-pulse'></i></h3></div></a> </div>"}}),this.TypeAhead.bind("typeahead:select",function(e,t){var i=$('.autocomplete-results [data-inchi="'+t.inchikey+'"] a');i.length&&i[0].click()})},pqr.autocomplete.getData=function(){return this.placeholder_database},pqr.autocomplete.renderHTML=function(e){var t=e.formula.replace(/(\d+)/g,"<sub>$1</sub>"),i='<div data-inchi="'+e.inchikey+'"><a href="/mol/'+e.inchikey+'"><div class="col-md-2"><img class="img-responsive" src="/static/data/svg/'+e.inchikey.substring(0,2)+"/"+e.inchikey+'.svg" alt="preview"></div> <div class="col-md-10"><h3>'+e.name.substring(0,36).toProperCase()+"</h3><h4>"+t+"</h4></div></a></div> ";return i}},{}],14:[function(e,t,i){pqr.bindevents.bindFontSwitchers=function(){var e="#increasefont",t="#reducefont",i="#defaultfont";$(e).on("vclick",function(e){e.preventDefault(),pqr.htmlUtilities.updateFont(1)}),$(t).on("vclick",function(e){e.preventDefault(),pqr.htmlUtilities.updateFont(-1)}),$(i).on("vclick",function(e){e.preventDefault(),pqr.htmlUtilities.updateFont(0)})},pqr.bindevents.moleculeReset=function(e){$(e).length&&$(e).on("vclick",function(e){e.preventDefault(),pqr.threeDMole.resetView(),htmlutilities.bootstrapFeedback("Molecule viewer reset","feedback","fa-crosshairs")})},pqr.bindevents.moleculeToggleRotation=function(e){$(e).length&&$(e).on("vclick",function(e){e.preventDefault(),pqr.threeDMole.toggleRotation();var t=$(this).children();t.hasClass("fa-toggle-on")?(t.removeClass("fa-toggle-on"),t.addClass("fa-toggle-off"),htmlutilities.bootstrapFeedback("Rotation deactivated","feedback","fa-refresh")):(t.removeClass("fa-toggle-off"),t.addClass("fa-toggle-on"),htmlutilities.bootstrapFeedback("Rotation activated","feedback","fa-refresh"))})},pqr.bindevents.propertiesViewerHandler=function(){$("#simpleView").on("vclick",function(e){e.preventDefault(),$("#molecule-details table .detailed").fadeOut("fast"),pqr.features.localstorage&&localStorage.setItem("moleculeLayout","simple"),htmlutilities.bootstrapFeedback("Switched to simple view","feedback","fa-desktop")}),$("#detailedView").on("vclick",function(e){e.preventDefault(),$("#molecule-details table .detailed").removeClass("hidden"),$("#molecule-details table .detailed").fadeIn("fast"),pqr.features.localstorage&&localStorage.setItem("moleculeLayout","detailed"),htmlutilities.bootstrapFeedback("Switched to detailed view ","feedback","fa-desktop")})},pqr.bindevents.moleculeStyleChanger=function(){$(".changeStyleSphere").length&&$(".changeStyleSphere").on("vclick",function(e){e.preventDefault(),pqr.threeDMole.changeStyle("sphere"),htmlutilities.bootstrapFeedback("Switched to sphere display ","feedback","fa-desktop")}),$(".changeStyleLine").length&&$(".changeStyleLine").on("vclick",function(e){e.preventDefault(),pqr.threeDMole.changeStyle("line"),htmlutilities.bootstrapFeedback("Switched to line display ","feedback","fa-desktop")}),$(".changeStyleCross").length&&$(".changeStyleCross").on("vclick",function(e){e.preventDefault(),pqr.threeDMole.changeStyle("cross"),htmlutilities.bootstrapFeedback("Switched to cross display ","feedback","fa-desktop")}),$(".changeStyleStick").length&&$(".changeStyleStick").on("vclick",function(e){e.preventDefault(),pqr.threeDMole.changeStyle("stick"),htmlutilities.bootstrapFeedback("Switched to stick display ","feedback","fa-desktop")})},pqr.bindevents.moleculeToggleSurface=function(e){$(e).length&&$(e).on("vclick",function(e){e.preventDefault(),pqr.threeDMole.toggleSurface(),$(this).addClass("disabled btn-success"),$(this).removeClass("btn-danger"),$(this).html("Surface Removed"),htmlutilities.bootstrapFeedback("Surface removed. Reload to add surface ","feedback","fa-desktop")})},pqr.bindevents.printButton=function(e){$(e).length&&$(e).on("vclick",function(e){e.preventDefault(),window.print(),htmlutilities.bootstrapFeedback("Printing molecule data","feedback","fa-print")})},pqr.bindevents.ajax_load_button=function(){$("#molecule-ajax-loader").on("click",function(){pqr.molecules.ajax_search()})},pqr.bindevents.on_scoll_load_molecules=function(){$(".pagination, footer").waypoint({handler:function(e){pqr.molecules.request_to_load()&&pqr.molecules.ajax_search(),pqr.molecules.show_results(10)},offset:"bottom-in-view"})},pqr.bindevents.ajax_timer=function(){pqr.molecules.ajax_search();var e=setInterval(function(){pqr.molecules.request_to_load()&&(pqr.molecules.ajax_search()||clearInterval(e))},1e3)},pqr.bindevents.result_touch_helper=function(){$(".result").length&&$(".result").on("tap",function(){console.log($(this))})},pqr.bindevents.check_autocomplete=function(e){$(e).on("keyup",function(e){var t=$.trim($(this).val());setTimeout(function(){pqr.autocomplete.findMatches(t),setTimeout(function(){pqr.autocomplete.findMatches(t)},250)},50)})}},{}],15:[function(e,t,i){!function(e){"use strict";function t(e){return new RegExp("(^|\\s+)"+e+"(\\s+|$)")}function i(e,t){var i=r(e,t)?o:n;i(e,t)}var r,n,o;"classList"in document.documentElement?(r=function(e,t){return e.classList.contains(t)},n=function(e,t){e.classList.add(t)},o=function(e,t){e.classList.remove(t)}):(r=function(e,i){return t(i).test(e.className)},n=function(e,t){r(e,t)||(e.className=e.className+" "+t)},o=function(e,i){e.className=e.className.replace(t(i)," ")});var a={hasClass:r,addClass:n,removeClass:o,toggleClass:i,has:r,add:n,remove:o,toggle:i};"function"==typeof define&&define.amd?define(a):e.classie=a}(window)},{}],16:[function(e,t,i){pqr.init=function(){$(document).ready(function(){pqr.debug&&console.log("Loading PQR Web App...."),pqr.checkFeatures(),bootstrapUtilities.FullToolTipOptIn(),pqr.htmlUtilities.initFontSize(),pqr.bindevents.bindFontSwitchers(),loadCSS("//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css"),$("#main").hasClass("page-home")?(pqr.threeDMole.initViewers(),pqr.bindevents.moleculeReset("#reset-molecule"),pqr.bindevents.moleculeToggleRotation("#rotationSwitch"),pqr.autocomplete.init()):$("#main").hasClass("page-molecule")?(pqr.threeDMole.initViewers(),pqr.htmlUtilities.updatePropertiesViewer(),pqr.htmlUtilities.initQuickFit("#molecule-name",{min:12,max:36}),pqr.bindevents.propertiesViewerHandler(),pqr.bindevents.moleculeStyleChanger(),pqr.bindevents.moleculeReset("#reset-molecule"),pqr.bindevents.moleculeToggleRotation("#rotationSwitch"),pqr.bindevents.moleculeToggleSurface(".surfaceSwitch"),pqr.bindevents.printButton("#print-molecule"),pqr.qrgen.addQRCode("#qrcode",pqr.htmlUtilities.getQRURL()),pqr.qrgen.addQRCode("#qr-print-wrapper",pqr.htmlUtilities.getQRURL())):$("#main").hasClass("page-browse")&&(pqr.autocomplete.init(),"true"===$("#molecule-browser").attr("data-has-results")?(pqr.masonary.init(),pqr.molecules.init_ajax_search(),$(".molecule-results-masonary").removeClass("translucent"),pqr.bindevents.ajax_timer(),pqr.bindevents.on_scoll_load_molecules(),pqr.bindevents.ajax_load_button(),pqr.bindevents.result_touch_helper()):pqr.debug&&console.log("Search Resulted in no results")),pqr.debug&&console.log("Finished loading PQR Web App!")})}()},{}],17:[function(e,t,i){pqr.masonary={grid:null,default_options:{itemSelector:".grid-item",columnWidth:".grid-sizer",container:".grid"}},pqr.masonary.init=function(e,t,i){this.animateOnScroll()},pqr.masonary.imagesLoadedInit=function(){this.grid.imagesLoaded().progress(function(){pqr.masonary.grid.masonry("layout")})},pqr.masonary.animateOnScroll=function(){new AnimOnScroll(document.getElementById("grid"),{minDuration:.4,maxDuration:.7,viewportFactor:.2})}},{}],18:[function(e,t,i){pqr.molecules={debug:!1,next_page_num:2,max_page_num:-1,max_num_results:-1,results_visible:100,active_requests:0,max_active_requests:5,results:[],max_loaded_results:5,query:null,scrollLimit:5e3,total_requests:0},pqr.molecules.init_ajax_search=function(){-1===this.max_page_num&&(this.max_page_num=parseInt($(".meta-data").attr("data-max-pages"))),-1===this.max_num_results&&(this.max_num_results=parseInt($(".meta-data").attr("data-total-results"))),$("#molecule-ajax-loader").show(300),$(".pagination .cogs").hide(300)},pqr.molecules.ajax_search=function(){return this.results_visible<this.max_num_results?(query_object=this.getQuery(),this.active_requests++,this.total_requests++,$("#molecule-ajax-loader").hide(300),$(".pagination .cogs").show(300),(pqr.debug||pqr.molecules.debug)&&console.log("Making Request"),$.ajax({method:"GET",url:"/browse/"+this.next_page_num+"/",data:query_object}).done(function(e){(pqr.debug||pqr.molecules.debug)&&console.log("Trying to add Items"),pqr.molecules.results.push(e),pqr.molecules.active_requests--,pqr.molecules.results_visible+=100,0===pqr.molecules.active_requests&&($("#molecule-ajax-loader").show(300),$(".pagination .cogs").hide(300)),pqr.molecules.show_results(1)}).fail(function(){return console.log("Search Results Failed"),!1}),this.next_page_num++,!0):((pqr.debug||pqr.molecules.debug)&&console.log("No More"),$("#molecule-ajax-loader").addClass("disabled").html("No More Results!"),$(".pagination .cogs").hide(),!1)},pqr.molecules.show_results=function(e){this.results.length>0?$.each(this.results.splice(0,e),function(e,t){$("#grid").append(t),pqr.masonary.animateOnScroll(),pqr.bindevents.result_touch_helper()}):(pqr.debug||pqr.molecules.debug)&&console.log("No More Results")},pqr.molecules.getQuery=function(){if(null==this.query){var e=$("#molecule-browser");this.query={ajax:!0,query:e.attr("data-query"),type:e.attr("data-type")}}return(pqr.debug||pqr.molecules.debug)&&console.log(this.query),this.query},pqr.molecules.request_to_load=function(){return $("body").height()-$(window).scrollTop()>this.scrollLimit?((pqr.debug||pqr.molecules.debug)&&console.log("Not Scrolled Enough"),!1):this.active_requests>this.max_active_requests?((pqr.debug||pqr.molecules.debug)&&console.log("Too many requests!"),!1):this.results.length>this.max_loaded_results?((pqr.debug||pqr.molecules.debug)&&console.log("Backlog of results"),!1):!0},pqr.molecules.determine_search_type=function(){}},{}],19:[function(e,t,i){var r=r||{debug:!1};r.features={localstorage:!1,webGL:!1},r.bindevents=r.bindevents||{},r.threeDMole=r.threeDMole||{},r.utilities=r.utilities||{},r.qrgen=r.qrgen||{},r.checkFeatures=function(){Modernizr.localstorage?this.features.localstorage=!0:(this.debug&&console.log("Local storage is not avaiable!"),r.redirectNoWebGL()),Modernizr.webgl?this.features.webGL=!0:this.debug&&console.log("Web GL is not avaiable!")}},{}],20:[function(e,t,i){pqr.qrgen={element:null,default_options:{render:"image",minVersion:1,maxVersion:5,ecLevel:"M",fill:"#000",mode:2,label:"PQR",fontname:'"Source Sans Pro","Helvetica Neue",Helvetica, Arial,sans-serif',fontcolor:"#f16b1d"}},pqr.qrgen.addQRCode=function(e,t){$(e).length?(this.default_options.text=t,$(e).qrcode(this.default_options)):console.log("Couldn't find the selector",e)}},{}],21:[function(e,t,i){pqr.threeDMole={all_viewers:[],rotation_timers:[],data_type:"mol2",default_style:"stick",backgroundColor:16777215,backgroundOpacity:1,rotationTime:9,rotationXDegree:1,rotationYDegree:1,showSurface:!0},pqr.threeDMole.initViewers=function(e){this.all_viewers=$3Dmol.viewers,$.each(this.all_viewers,function(e,t){pqr.threeDMole.clearBackgrounds(t)})},pqr.threeDMole.clearBackgrounds=function(e){e.setBackgroundColor(this.backgroundColor,0),e.resize(),e.render(),pqr.debug&&console.log("Clearing Background: ",e)},pqr.threeDMole.rotate=function(e){var t=window.setInterval(function(){e.rotate(pqr.threeDMole.rotationYDegree,"y"),e.rotate(pqr.threeDMole.rotationXDegree,"x"),e.render()},this.rotationTime,e);this.rotation_timers.push(t),pqr.debug&&console.log("Adding Rotation: ",e)},pqr.threeDMole.toggleRotation=function(e){var t=this.rotation_timers.pop();pqr.debug&&console.log("The rotation time is: ",t),void 0!==t?(pqr.debug&&console.log("Rotation timer not null. Clearing interval"),clearInterval(t)):(pqr.debug&&console.log("Rotation timer is null. Restarting rotation"),this.rotate(this.all_viewers[0]))},pqr.threeDMole.setSurfaceColor=function(e){},pqr.threeDMole.toggleSurface=function(e){e="undefined"!=typeof e?e:this.all_viewers[0],pqr.debug&&console.log("Toggling the surface of ",e),this.removeSurface(e)},pqr.threeDMole.removeSurface=function(e){e.removeAllSurfaces(),e.render(),pqr.debug&&console.log("Surface Removed")},pqr.threeDMole.resetView=function(e){pqr.threeDMole.all_viewers[0].zoomTo()},pqr.threeDMole.changeStyle=function(e){var t=this.all_viewers[0];t&&("sphere"==e?t.setStyle({},{sphere:{}}):"stick"==e?t.setStyle({},{stick:{}}):"cross"==e?t.setStyle({},{cross:{}}):"line"==e&&t.setStyle({},{line:{}}),t.render())}},{}],22:[function(e,t,i){pqr.htmlUtilities={element_symbols:["h","he","li","be","b","c","n","o","f","ne","na","mg","al","si","p","s","cl","ar","k","ca","sc","ti","v","cr","mn","fe","co","ni","cu","zn","ga","ge","as","se","br","kr","rb","sr","y","zr","nb","mo","tc","ru","rh","pd","ag","cd","in","sn","sb","te","i","xe","cs","ba","la","ce","pr","nd","pm","sm","eu","gd","tb","dy","ho","er","tm","yb","lu","hf","ta","w","re","os","ir","pt","au","hg","tl","pb","bi","po","at","rn","fr","ra","ac","th","pa","u","np","pu","am","cm","bk","cf","es","fm","md","no","lr","rf","db","sg","bh","hs","mt","ds","rg","cp","uut","uuq","uup","uuh","uus","uuo"]},pqr.htmlUtilities.getINCHIKey=function(){var e="";if(!$(".molecule-inchikey").length)return!1;var e=$(".molecule-inchikey").children().next().html();return $.trim(e)},pqr.htmlUtilities.getQRURL=function(){var e="http://doi.org/";if($(".molecule-doi-short").length)var t=e+$(".molecule-doi-short").text();else if($(".molecule-doi-long").length)var t=e+$(".molecule-doi-long").text();else{if(!this.getINCHIKey())return htmlutilities.getRootURL();var t=htmlutilities.getRootURL();t+="/mol/"+this.getINCHIKey()}return $.trim(t)},pqr.htmlUtilities.initFontSize=function(){accessibility.changeFontSize(pqr.htmlUtilities.getCurrentFontSize())},pqr.htmlUtilities.updateFont=function(e){if(-1===e){var t=accessibility.fontSizeChanger(-1,pqr.htmlUtilities.getCurrentFontSize());htmlutilities.bootstrapFeedback("Decrease Font Size to "+t,"feedback","fa-font")}else if(0===e){var t=accessibility.changeFontSize(accessibility.defaultFontSize);htmlutilities.bootstrapFeedback("Reset Font Size to "+t,"feedback","fa-font")}else if(1===e){var t=accessibility.fontSizeChanger(1,pqr.htmlUtilities.getCurrentFontSize());htmlutilities.bootstrapFeedback("Increased Font Size to "+t,"feedback","fa-font")}pqr.features.localstorage&&localStorage.setItem("baseFontSize",t)},pqr.htmlUtilities.getCurrentFontSize=function(){if(pqr.features.localstorage){var e=localStorage.getItem("baseFontSize");return null!==e?e:(localStorage.setItem("baseFontSize",accessibility.defaultFontSize),accessibility.defaultFontSize)}return accessibility.defaultFontSize},pqr.htmlUtilities.redirectNoWebGL=function(){if(pqr.features.webGL)pqr.debug&&console.log("WebGL Supported");else{var e="<div class='alert alert-danger' role='alert'> <strong> <a href='http://get.webgl.org/'>WebGL</a> </strong> is not supported on your device! </div";$("#main").prepend(e),window.location.replace("https://get.webgl.org/")}},pqr.htmlUtilities.updatePropertiesViewer=function(){pqr.features.localstorage&&("detailed"==localStorage.getItem("moleculeLayout")?$("#molecule-details table .detailed").removeClass("hidden"):$("#molecule-details table .detailed").addClass("hidden"))},pqr.htmlUtilities.initQuickFit=function(e,t){$(e).quickfit(t),$(window).resize(function(){$(e).quickfit(t)})},pqr.htmlUtilities.formStyleHelper=function(){function e(e){classie.add(e.target.parentNode.parentNode,"input--filled")}function t(e){""===e.target.value.trim()&&(classie.remove(e.target.parentNode.parentNode,"input--filled"),classie.remove(e.target.parentNode,"input--filled"))}[].slice.call(document.querySelectorAll(".input-field")).forEach(function(i){""!==i.value.trim()&&classie.add(i.parentNode,"input--filled"),i.addEventListener("focus",e),i.addEventListener("blur",t)})}(),pqr.htmlUtilities.isINCHI=function(e){return e=$.trim(e).toLowerCase(),27===e.length&&"-"===e[14]&&"-"===e[25]&&!!e.match(/^([0-9A-Za-z\-]+)$/)},pqr.htmlUtilities.isFormula=function(e){e=$.trim(e).toLowerCase();var t=e.match(/\d+/g),i=e.match(/[a-zA-Z]+/g),r=!0;return null==t?null!=i?($.each(i,function(e,t){return pqr.htmlUtilities.isSymbol(t)?void 0:(r=!1,!1)}),r):!1:null==i?!1:($.each(i,function(e,t){return pqr.htmlUtilities.isSymbol(t)?void 0:(r=!1,!1)}),r)},pqr.htmlUtilities.isSymbol=function(e){return e=$.trim(e).toLowerCase(),-1!==$.inArray(e,this.element_symbols)}},{}],23:[function(e,t,i){!function(e){"use strict";function t(){var t=s.clientHeight,i=e.innerHeight;return i>t?i:t}function i(){return e.pageYOffset||s.scrollTop}function r(e){var t=0,i=0;do isNaN(e.offsetTop)||(t+=e.offsetTop),isNaN(e.offsetLeft)||(i+=e.offsetLeft);while(e=e.offsetParent);return{top:t,left:i}}function n(e,n){var o=e.offsetHeight,a=i(),s=a+t(),l=r(e).top,c=l+o,n=n||0;return s>=l+o*n&&c-o*n>=a}function o(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i]);return e}function a(e,t){this.el=e,this.options=o(this.defaults,t),this._init()}var s=e.document.documentElement;a.prototype={defaults:{minDuration:0,maxDuration:0,viewportFactor:0},_init:function(){this.items=Array.prototype.slice.call(document.querySelectorAll("#"+this.el.id+" > li")),
this.itemsCount=this.items.length,this.itemsRenderedCount=0,this.didScroll=!1;var t=this;imagesLoaded(this.el,function(){new Masonry(t.el,{itemSelector:"li",transitionDuration:0}),Modernizr.cssanimations&&(t.items.forEach(function(e,i){n(e)&&(t._checkTotalRendered(),classie.add(e,"shown"))}),e.addEventListener("scroll",function(){t._onScrollFn()},!1),e.addEventListener("resize",function(){t._resizeHandler()},!1))})},_onScrollFn:function(){var e=this;this.didScroll||(this.didScroll=!0,setTimeout(function(){e._scrollPage()},60))},_scrollPage:function(){var e=this;this.items.forEach(function(r,o){classie.has(r,"shown")||classie.has(r,"animate")||!n(r,e.options.viewportFactor)||setTimeout(function(){var n=i()+t()/2;if(e.el.style.WebkitPerspectiveOrigin="50% "+n+"px",e.el.style.MozPerspectiveOrigin="50% "+n+"px",e.el.style.perspectiveOrigin="50% "+n+"px",e._checkTotalRendered(),e.options.minDuration&&e.options.maxDuration){var o=Math.random()*(e.options.maxDuration-e.options.minDuration)+e.options.minDuration+"s";r.style.WebkitAnimationDuration=o,r.style.MozAnimationDuration=o,r.style.animationDuration=o}classie.add(r,"animate")},25)}),this.didScroll=!1},_resizeHandler:function(){function e(){t._scrollPage(),t.resizeTimeout=null}var t=this;this.resizeTimeout&&clearTimeout(this.resizeTimeout),this.resizeTimeout=setTimeout(e,1e3)},_checkTotalRendered:function(){++this.itemsRenderedCount,this.itemsRenderedCount===this.itemsCount&&e.removeEventListener("scroll",this._onScrollFn)}},e.AnimOnScroll=a}(window)},{}],24:[function(e,t,i){!function(e){var t=function(t,r){if(this.$element=e(t),this.$note=e('<div class="alert"></div>'),this.options=e.extend(!0,{},e.fn.notify.defaults,r),this.options.transition?"fade"==this.options.transition?this.$note.addClass("in").addClass(this.options.transition):this.$note.addClass(this.options.transition):this.$note.addClass("fade").addClass("in"),this.options.type?this.$note.addClass("alert-"+this.options.type):this.$note.addClass("alert-success"),this.options.message||""===this.$element.data("message")?"object"==typeof this.options.message?this.options.message.html?this.$note.html(this.options.message.html):this.options.message.text&&this.$note.text(this.options.message.text):this.$note.html(this.options.message):this.$note.html(this.$element.data("message")),this.options.closable){var n=e('<a class="close pull-right" href="#"><i class="fa fa-times"></i></a>');e(n).on("click",e.proxy(i,this)),this.$note.prepend(n)}return this},i=function(){return this.options.onClose(),e(this.$note).remove(),this.options.onClosed(),!1};t.prototype.show=function(){this.options.fadeOut.enabled&&this.$note.delay(this.options.fadeOut.delay||3e3).fadeOut("slow",e.proxy(i,this)),this.$element.append(this.$note),this.$note.alert()},t.prototype.hide=function(){this.options.fadeOut.enabled?this.$note.delay(this.options.fadeOut.delay||3e3).fadeOut("slow",e.proxy(i,this)):i.call(this)},e.fn.notify=function(e){return new t(this,e)},e.fn.notify.defaults={type:"success",closable:!0,transition:"fade",fadeOut:{enabled:!0,delay:3e3},message:null,onClose:function(){},onClosed:function(){}}}(window.jQuery)},{}],25:[function(e,t,i){},{}],26:[function(e,t,i){!function(e){"use strict";e.loadCSS=function(t,i,r){var n,o=e.document.createElement("link");if(i)n=i;else if(e.document.querySelectorAll){var a=e.document.querySelectorAll("style,link[rel=stylesheet],script");n=a[a.length-1]}else n=e.document.getElementsByTagName("script")[0];var s=e.document.styleSheets;return o.rel="stylesheet",o.href=t,o.media="only x",n.parentNode.insertBefore(o,i?n:n.nextSibling),o.onloadcssdefined=function(e){for(var t,i=0;i<s.length;i++)s[i].href&&s[i].href===o.href&&(t=!0);t?e():setTimeout(function(){o.onloadcssdefined(e)})},o.onloadcssdefined(function(){o.media=r||"all"}),o}}(this)},{}],27:[function(e,t,i){!function(){"use strict";function e(r){if(!r)throw new Error("No options passed to Waypoint constructor");if(!r.element)throw new Error("No element option passed to Waypoint constructor");if(!r.handler)throw new Error("No handler option passed to Waypoint constructor");this.key="waypoint-"+t,this.options=e.Adapter.extend({},e.defaults,r),this.element=this.options.element,this.adapter=new e.Adapter(this.element),this.callback=r.handler,this.axis=this.options.horizontal?"horizontal":"vertical",this.enabled=this.options.enabled,this.triggerPoint=null,this.group=e.Group.findOrCreate({name:this.options.group,axis:this.axis}),this.context=e.Context.findOrCreateByElement(this.options.context),e.offsetAliases[this.options.offset]&&(this.options.offset=e.offsetAliases[this.options.offset]),this.group.add(this),this.context.add(this),i[this.key]=this,t+=1}var t=0,i={};e.prototype.queueTrigger=function(e){this.group.queueTrigger(this,e)},e.prototype.trigger=function(e){this.enabled&&this.callback&&this.callback.apply(this,e)},e.prototype.destroy=function(){this.context.remove(this),this.group.remove(this),delete i[this.key]},e.prototype.disable=function(){return this.enabled=!1,this},e.prototype.enable=function(){return this.context.refresh(),this.enabled=!0,this},e.prototype.next=function(){return this.group.next(this)},e.prototype.previous=function(){return this.group.previous(this)},e.invokeAll=function(e){var t=[];for(var r in i)t.push(i[r]);for(var n=0,o=t.length;o>n;n++)t[n][e]()},e.destroyAll=function(){e.invokeAll("destroy")},e.disableAll=function(){e.invokeAll("disable")},e.enableAll=function(){e.invokeAll("enable")},e.refreshAll=function(){e.Context.refreshAll()},e.viewportHeight=function(){return window.innerHeight||document.documentElement.clientHeight},e.viewportWidth=function(){return document.documentElement.clientWidth},e.adapters=[],e.defaults={context:window,continuous:!0,enabled:!0,group:"default",horizontal:!1,offset:0},e.offsetAliases={"bottom-in-view":function(){return this.context.innerHeight()-this.adapter.outerHeight()},"right-in-view":function(){return this.context.innerWidth()-this.adapter.outerWidth()}},window.Waypoint=e}(),function(){"use strict";function e(e){window.setTimeout(e,1e3/60)}function t(e){this.element=e,this.Adapter=n.Adapter,this.adapter=new this.Adapter(e),this.key="waypoint-context-"+i,this.didScroll=!1,this.didResize=!1,this.oldScroll={x:this.adapter.scrollLeft(),y:this.adapter.scrollTop()},this.waypoints={vertical:{},horizontal:{}},e.waypointContextKey=this.key,r[e.waypointContextKey]=this,i+=1,this.createThrottledScrollHandler(),this.createThrottledResizeHandler()}var i=0,r={},n=window.Waypoint,o=window.onload;t.prototype.add=function(e){var t=e.options.horizontal?"horizontal":"vertical";this.waypoints[t][e.key]=e,this.refresh()},t.prototype.checkEmpty=function(){var e=this.Adapter.isEmptyObject(this.waypoints.horizontal),t=this.Adapter.isEmptyObject(this.waypoints.vertical);e&&t&&(this.adapter.off(".waypoints"),delete r[this.key])},t.prototype.createThrottledResizeHandler=function(){function e(){t.handleResize(),t.didResize=!1}var t=this;this.adapter.on("resize.waypoints",function(){t.didResize||(t.didResize=!0,n.requestAnimationFrame(e))})},t.prototype.createThrottledScrollHandler=function(){function e(){t.handleScroll(),t.didScroll=!1}var t=this;this.adapter.on("scroll.waypoints",function(){(!t.didScroll||n.isTouch)&&(t.didScroll=!0,n.requestAnimationFrame(e))})},t.prototype.handleResize=function(){n.Context.refreshAll()},t.prototype.handleScroll=function(){var e={},t={horizontal:{newScroll:this.adapter.scrollLeft(),oldScroll:this.oldScroll.x,forward:"right",backward:"left"},vertical:{newScroll:this.adapter.scrollTop(),oldScroll:this.oldScroll.y,forward:"down",backward:"up"}};for(var i in t){var r=t[i],n=r.newScroll>r.oldScroll,o=n?r.forward:r.backward;for(var a in this.waypoints[i]){var s=this.waypoints[i][a],l=r.oldScroll<s.triggerPoint,c=r.newScroll>=s.triggerPoint,u=l&&c,h=!l&&!c;(u||h)&&(s.queueTrigger(o),e[s.group.id]=s.group)}}for(var d in e)e[d].flushTriggers();this.oldScroll={x:t.horizontal.newScroll,y:t.vertical.newScroll}},t.prototype.innerHeight=function(){return this.element==this.element.window?n.viewportHeight():this.adapter.innerHeight()},t.prototype.remove=function(e){delete this.waypoints[e.axis][e.key],this.checkEmpty()},t.prototype.innerWidth=function(){return this.element==this.element.window?n.viewportWidth():this.adapter.innerWidth()},t.prototype.destroy=function(){var e=[];for(var t in this.waypoints)for(var i in this.waypoints[t])e.push(this.waypoints[t][i]);for(var r=0,n=e.length;n>r;r++)e[r].destroy()},t.prototype.refresh=function(){var e,t=this.element==this.element.window,i=t?void 0:this.adapter.offset(),r={};this.handleScroll(),e={horizontal:{contextOffset:t?0:i.left,contextScroll:t?0:this.oldScroll.x,contextDimension:this.innerWidth(),oldScroll:this.oldScroll.x,forward:"right",backward:"left",offsetProp:"left"},vertical:{contextOffset:t?0:i.top,contextScroll:t?0:this.oldScroll.y,contextDimension:this.innerHeight(),oldScroll:this.oldScroll.y,forward:"down",backward:"up",offsetProp:"top"}};for(var o in e){var a=e[o];for(var s in this.waypoints[o]){var l,c,u,h,d,f=this.waypoints[o][s],p=f.options.offset,v=f.triggerPoint,m=0,g=null==v;f.element!==f.element.window&&(m=f.adapter.offset()[a.offsetProp]),"function"==typeof p?p=p.apply(f):"string"==typeof p&&(p=parseFloat(p),f.options.offset.indexOf("%")>-1&&(p=Math.ceil(a.contextDimension*p/100))),l=a.contextScroll-a.contextOffset,f.triggerPoint=m+l-p,c=v<a.oldScroll,u=f.triggerPoint>=a.oldScroll,h=c&&u,d=!c&&!u,!g&&h?(f.queueTrigger(a.backward),r[f.group.id]=f.group):!g&&d?(f.queueTrigger(a.forward),r[f.group.id]=f.group):g&&a.oldScroll>=f.triggerPoint&&(f.queueTrigger(a.forward),r[f.group.id]=f.group)}}return n.requestAnimationFrame(function(){for(var e in r)r[e].flushTriggers()}),this},t.findOrCreateByElement=function(e){return t.findByElement(e)||new t(e)},t.refreshAll=function(){for(var e in r)r[e].refresh()},t.findByElement=function(e){return r[e.waypointContextKey]},window.onload=function(){o&&o(),t.refreshAll()},n.requestAnimationFrame=function(t){var i=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||e;i.call(window,t)},n.Context=t}(),function(){"use strict";function e(e,t){return e.triggerPoint-t.triggerPoint}function t(e,t){return t.triggerPoint-e.triggerPoint}function i(e){this.name=e.name,this.axis=e.axis,this.id=this.name+"-"+this.axis,this.waypoints=[],this.clearTriggerQueues(),r[this.axis][this.name]=this}var r={vertical:{},horizontal:{}},n=window.Waypoint;i.prototype.add=function(e){this.waypoints.push(e)},i.prototype.clearTriggerQueues=function(){this.triggerQueues={up:[],down:[],left:[],right:[]}},i.prototype.flushTriggers=function(){for(var i in this.triggerQueues){var r=this.triggerQueues[i],n="up"===i||"left"===i;r.sort(n?t:e);for(var o=0,a=r.length;a>o;o+=1){var s=r[o];(s.options.continuous||o===r.length-1)&&s.trigger([i])}}this.clearTriggerQueues()},i.prototype.next=function(t){this.waypoints.sort(e);var i=n.Adapter.inArray(t,this.waypoints),r=i===this.waypoints.length-1;return r?null:this.waypoints[i+1]},i.prototype.previous=function(t){this.waypoints.sort(e);var i=n.Adapter.inArray(t,this.waypoints);return i?this.waypoints[i-1]:null},i.prototype.queueTrigger=function(e,t){this.triggerQueues[t].push(e)},i.prototype.remove=function(e){var t=n.Adapter.inArray(e,this.waypoints);t>-1&&this.waypoints.splice(t,1)},i.prototype.first=function(){return this.waypoints[0]},i.prototype.last=function(){return this.waypoints[this.waypoints.length-1]},i.findOrCreate=function(e){return r[e.axis][e.name]||new i(e)},n.Group=i}(),function(){"use strict";function e(e){this.$element=t(e)}var t=window.jQuery,i=window.Waypoint;t.each(["innerHeight","innerWidth","off","offset","on","outerHeight","outerWidth","scrollLeft","scrollTop"],function(t,i){e.prototype[i]=function(){var e=Array.prototype.slice.call(arguments);return this.$element[i].apply(this.$element,e)}}),t.each(["extend","inArray","isEmptyObject"],function(i,r){e[r]=t[r]}),i.adapters.push({name:"jquery",Adapter:e}),i.Adapter=e}(),function(){"use strict";function e(e){return function(){var i=[],r=arguments[0];return e.isFunction(arguments[0])&&(r=e.extend({},arguments[1]),r.handler=arguments[0]),this.each(function(){var n=e.extend({},r,{element:this});"string"==typeof n.context&&(n.context=e(this).closest(n.context)[0]),i.push(new t(n))}),i}}var t=window.Waypoint;window.jQuery&&(window.jQuery.fn.waypoint=e(window.jQuery)),window.Zepto&&(window.Zepto.fn.waypoint=e(window.Zepto))}()},{}]},{},[1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,2,23,24,25,26,27]);
//# sourceMappingURL=data:application/json;base64,
