!function t(e,n,o){function i(s,a){if(!n[s]){if(!e[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(r)return r(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var u=n[s]={exports:{}};e[s][0].call(u.exports,function(t){var n=e[s][1][t];return i(n?n:t)},u,u.exports,t,e,n,o)}return n[s].exports}for(var r="function"==typeof require&&require,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(t,e,n){"use strict";e.exports=function(){var t={fontSizeChangerIndex:2,defaultFontSize:16};return t.fontSizeChanger=function(t,e){return-1===t?this.changeFontSize(parseInt(e)-this.fontSizeChangerIndex):0===t?this.changeFontSize(this.defaultFontSize):1===t?this.changeFontSize(parseInt(e)+this.fontSizeChangerIndex):void 0},t.changeFontSize=function(t){return $("body").css("font-size",t.toString()+"px"),t},t}()},{}],2:[function(t,e,n){"use strict";e.exports=function(){var e=(t("./util"),{debug:!0,inputSelector:"#search-bar-auto",resultsSelector:".autocomplete-results",resultsSizeMax:10,database:[]});return e}()},{"./util":10}],3:[function(t,e,n){"use strict";e.exports=function(){t("browsernizr/test/webgl"),t("browsernizr/test/storage/localstorage");var e=t("./util"),n=t("./threeDMole"),o=t("browsernizr"),i=t("./molecule"),r=t("./autocomplete"),s={};return s.bindFontSwitchers=function(){var t="#increasefont",n="#reducefont",o="#defaultfont";$(t).on("click vclick",function(t){t.preventDefault(),e.updateFont(1)}),$(n).on("click vclick",function(t){t.preventDefault(),e.updateFont(-1)}),$(o).on("click vclick",function(t){t.preventDefault(),e.updateFont(0)})},s.moleculeReset=function(t){$(t).length&&$(t).on("click vclick",function(t){t.preventDefault(),n.resetView(),e.bootstrapFeedback("Molecule viewer reset","feedback","fa-crosshairs")})},s.moleculeToggleRotation=function(t){$(t).length&&$(t).on("click vclick",function(t){t.preventDefault(),n.toggleRotation();var o=$(this).children();o.hasClass("fa-toggle-on")?(o.removeClass("fa-toggle-on"),o.addClass("fa-toggle-off"),e.bootstrapFeedback("Rotation deactivated","fa-refresh")):(o.removeClass("fa-toggle-off"),o.addClass("fa-toggle-on"),e.bootstrapFeedback("Rotation activated","fa-refresh"))})},s.propertiesViewerHandler=function(){$("#simpleView").on("click vclick",function(t){t.preventDefault(),$("#molecule-details table .detailed").fadeOut("fast"),o.localstorage&&(localStorage.setItem("moleculeLayout","simple"),localStorage.setItem("moleculeLayout","simple")),e.bootstrapFeedback("Switched to simple view","feedback","fa-desktop")}),$("#detailedView").on("click vclick",function(t){t.preventDefault(),$("#molecule-details table .detailed").removeClass("hidden"),$("#molecule-details table .detailed").fadeIn("fast"),o.localstorage&&localStorage.setItem("moleculeLayout","detailed"),e.bootstrapFeedback("Switched to detailed view ","feedback","fa-desktop")})},s.moleculeStyleChanger=function(){$(".changeStyleSphere").length&&$(".changeStyleSphere").on("click vclick",function(t){t.preventDefault(),n.changeStyle("sphere"),e.bootstrapFeedback("Switched to sphere display ","feedback","fa-desktop")}),$(".changeStyleLine").length&&$(".changeStyleLine").on("click vclick",function(t){t.preventDefault(),n.changeStyle("line"),e.bootstrapFeedback("Switched to line display ","feedback","fa-desktop")}),$(".changeStyleCross").length&&$(".changeStyleCross").on("click vclick",function(t){t.preventDefault(),n.changeStyle("cross"),e.bootstrapFeedback("Switched to cross display ","feedback","fa-desktop")}),$(".changeStyleStick").length&&$(".changeStyleStick").on("click vclick",function(t){t.preventDefault(),n.changeStyle("stick"),o.localstorage&&localStorage.setItem("moleculeViewerlayout","sticks"),e.bootstrapFeedback("Switched to stick display ","feedback","fa-desktop")})},s.moleculeToggleSurface=function(t){$(t).length&&$(t).on("click vclick",function(t){t.preventDefault(),n.toggleSurface(),$(this).addClass("disabled btn-success"),$(this).removeClass("btn-danger"),$(this).html("Surface Removed")})},s.printButton=function(t){$(t).length&&$(t).on("click vclick",function(t){t.preventDefault(),window.print(),e.bootstrapFeedback("Printing molecule data","feedback","fa-print")})},s.ajaxLoadButton=function(){$("#molecule-ajax-loader").on("click",function(){i.ajaxSearch()})},s.ajaxTimer=function(){i.ajaxSearch();var t=setInterval(function(){i.requestToLoad()&&(i.ajaxSearch()||clearInterval(t))},1e3)},s.checkAutocomplete=function(t){$(t).on("keyup",function(){var t=$.trim($(this).val());setTimeout(function(){r.findMatches(t),setTimeout(function(){r.findMatches(t)},250)},50)})},s}()},{"./autocomplete":2,"./molecule":5,"./threeDMole":9,"./util":10,browsernizr:24,"browsernizr/test/storage/localstorage":52,"browsernizr/test/webgl":53}],4:[function(t,e,n){"use strict";function o(){c.FullToolTipOptIn(),c.initFontSize(),r.bindFontSwitchers(),$("#main").hasClass("page-home")?(u.initViewers(),c.updatePropertiesViewer(),c.initQuickFit("#molecule-name",{min:12,max:36}),r.propertiesViewerHandler(),r.moleculeStyleChanger(),r.moleculeReset("#reset-molecule"),r.moleculeToggleRotation("#rotationSwitch"),r.moleculeToggleSurface(".surfaceSwitch"),r.printButton("#print-molecule")):$("#main").hasClass("page-molecule")?(u.initViewers(),c.updatePropertiesViewer(),c.initQuickFit("#molecule-name",{min:12,max:36}),r.propertiesViewerHandler(),r.moleculeStyleChanger(),r.moleculeReset("#reset-molecule"),r.moleculeToggleRotation("#rotationSwitch"),r.moleculeToggleSurface(".surfaceSwitch"),r.printButton("#print-molecule"),s.addQRCode("qrcode",c.getQRURL()),s.addQRCode("qr-print-wrapper",c.getQRURL())):$("#main").hasClass("page-browse")&&"true"===$("#molecule-browser").attr("data-has-results")&&(a.init(),l.initAjaxSearch(),$(".molecule-results-masonary").removeClass("translucent"),r.ajaxTimer(),r.ajaxLoadButton())}t("./polyfill"),t("browsernizr/test/webgl"),t("browsernizr/test/storage/localstorage"),t("browsernizr/test/css/animations");var i=t("browsernizr"),r=t("./bindevents"),s=(t("./autocomplete"),t("./qrgen")),a=t("./scrollload"),l=t("./molecule"),c=t("./util"),u=t("./threeDMole");$(document).ready(function(){i.localstorage&&i.webgl?o():c.redirectNoWebGL()})},{"./autocomplete":2,"./bindevents":3,"./molecule":5,"./polyfill":6,"./qrgen":7,"./scrollload":8,"./threeDMole":9,"./util":10,browsernizr:24,"browsernizr/test/css/animations":51,"browsernizr/test/storage/localstorage":52,"browsernizr/test/webgl":53}],5:[function(t,e,n){"use strict";e.exports=function(){var e=t("./scrollload"),n={debug:!1,nextPageNum:2,maxPageNum:-1,maxNumResults:-1,resultsVisible:100,activeRequests:0,maxActiveRequests:5,results:[],maxLoadedResults:5,query:null,scrollLimit:5e3,totalRequests:0};return n.initAjaxSearch=function(){-1===this.maxPageNum&&(this.maxPageNum=parseInt($(".meta-data").attr("data-max-pages"))),-1===this.maxNumResults&&(this.maxNumResults=parseInt($(".meta-data").attr("data-total-results"))),$("#molecule-ajax-loader").show(300),$(".pagination .cogs").hide(300)},n.ajaxSearch=function(){if(this.resultsVisible<this.maxNumResults){var t=this.getQuery();return this.activeRequests++,this.totalRequests++,$("#molecule-ajax-loader").hide(300),$(".pagination .cogs").show(300),$.ajax({method:"GET",url:"/browse/"+this.nextPageNum+"/",data:t}).done(function(t){n.results.push(t),n.activeRequests--,n.resultsVisible+=100,0===n.activeRequests&&($("#molecule-ajax-loader").show(300),$(".pagination .cogs").hide(300)),n.showResults(1)}).fail(function(){return console.log("Search Results Failed"),!1}),this.nextPageNum++,!0}return $("#molecule-ajax-loader").addClass("disabled").html("No More Results!"),$(".pagination .cogs").hide(),!1},n.showResults=function(t){this.results.length>0&&$.each(this.results.splice(0,t),function(t,n){$("#grid").append(n),e.init()})},n.getQuery=function(){if(null===this.query){var t=$("#molecule-browser");this.query={ajax:!0,query:t.attr("data-query"),type:t.attr("data-type")}}return this.query},n.requestToLoad=function(){return $("body").height()-$(window).scrollTop()>this.scrollLimit?!1:this.activeRequests>this.maxActiveRequests?!1:!(this.results.length>this.maxLoadedResults)},n.determineSearchType=function(){},n}()},{"./scrollload":8}],6:[function(t,e,n){"use strict";e.exports=function(){var t=t||{};if(!String.prototype.trim){var e=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;String.prototype.trim=function(){return this.replace(e,"")}}return t}()},{}],7:[function(t,e,n){"use strict";e.exports=function(){var e=t("qrcode-npm"),n={};return n.addQRCode=function(t,n){var o=document.getElementById(t);if(o){var i=e.qrcode(6,"M");i.addData(n),i.make();var r=i.createImgTag(6);o.innerHTML=r}else console.log("Couldn't find the selector",selector)},n}()},{"qrcode-npm":54}],8:[function(t,e,n){"use strict";e.exports=function(){function e(){var t=a.clientHeight,e=window.innerHeight;return e>t?e:t}function n(){return window.pageYOffset||a.scrollTop}function o(t){var e=0,n=0;do isNaN(t.offsetTop)||(e+=t.offsetTop),isNaN(t.offsetLeft)||(n+=t.offsetLeft);while(t=t.offsetParent);return{top:e,left:n}}function i(t,i){var r=t.offsetHeight,s=n(),a=s+e(),l=o(t).top,c=l+r,i=i||0;return a>=l+r*i&&c-r*i>=s}function r(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}function s(t,e){this.el=t,this.options=r(this.defaults,e),this._init()}var a=(t("browsernizr"),window.document.documentElement);s.prototype={defaults:{minDuration:0,maxDuration:0,viewportFactor:0},_init:function(){this.items=Array.prototype.slice.call(document.querySelectorAll("#"+this.el.id+" > li")),this.itemsCount=this.items.length,this.itemsRenderedCount=0,this.didScroll=!1;var t=this;t.items.forEach(function(e,n){i(e)&&(t._checkTotalRendered(),e.className+=" shown")}),window.addEventListener("scroll",function(){t._onScrollFn()},!1),window.addEventListener("resize",function(){t._resizeHandler()},!1)},_onScrollFn:function(){var t=this;this.didScroll||(this.didScroll=!0,setTimeout(function(){t._scrollPage()},60))},_scrollPage:function(){var t=this;this.items.forEach(function(o,r){var s=(" "+o.className+" ").indexOf(" shown ")>-1,a=(" "+o.className+" ").indexOf(" animate ")>-1;s||a||!i(o,t.options.viewportFactor)||setTimeout(function(){var i=n()+e()/2;if(t.el.style.WebkitPerspectiveOrigin="50% "+i+"px",t.el.style.MozPerspectiveOrigin="50% "+i+"px",t.el.style.perspectiveOrigin="50% "+i+"px",t._checkTotalRendered(),t.options.minDuration&&t.options.maxDuration){var r=Math.random()*(t.options.maxDuration-t.options.minDuration)+t.options.minDuration+"s";o.style.WebkitAnimationDuration=r,o.style.MozAnimationDuration=r,o.style.animationDuration=r}o.className+=" animate"},25)}),this.didScroll=!1},_resizeHandler:function(){function t(){e._scrollPage(),e.resizeTimeout=null}var e=this;this.resizeTimeout&&clearTimeout(this.resizeTimeout),this.resizeTimeout=setTimeout(t,1e3)},_checkTotalRendered:function(){++this.itemsRenderedCount,this.itemsRenderedCount===this.itemsCount&&window.removeEventListener("scroll",this._onScrollFn)}};var l={};return l.init=function(){new s(document.getElementById("grid"),{minDuration:.4,maxDuration:.7,viewportFactor:.2})},l}()},{browsernizr:24}],9:[function(t,e,n){"use strict";e.exports=function(){var t={allViewers:[],rotationTimers:[],dataType:"mol2",defaultStyle:"stick",backgroundColor:16777215,backgroundOpacity:1,rotationTime:9,rotationXDegree:1,rotationYDegree:1,showSurface:!0};return t.initViewers=function(){t.allViewers=$3Dmol.viewers,$.each(t.allViewers,function(e,n){t.clearBackgrounds(n)})},t.clearBackgrounds=function(e){e.setBackgroundColor(t.backgroundColor,0),e.resize(),e.render()},t.rotate=function(e){var n=window.setInterval(function(){e.rotate(t.rotationYDegree,"y"),e.rotate(t.rotationXDegree,"x"),e.render()},t.rotationTime,e);t.rotationTimers.push(n)},t.toggleRotation=function(){var e=t.rotationTimers.pop();void 0!==e?clearInterval(e):t.rotate(t.allViewers[0])},t.setSurfaceColor=function(t){},t.toggleSurface=function(e){e="undefined"!=typeof e?e:t.allViewers[0],t.removeSurface(e)},t.removeSurface=function(t){t.removeAllSurfaces(),t.render()},t.resetView=function(){t.allViewers[0].zoomTo()},t.addArrow=function(e,n,o,i){t.allViewers[0].addArrow({end:new $3Dmol.Vector3(n,o,i),color:"black",wireframe:!1}),t.allViewers[0].render()},t.changeStyle=function(e){var n=t.allViewers[0];n&&("sphere"===e?n.setStyle({},{sphere:{}}):"stick"===e?n.setStyle({},{stick:{}}):"cross"===e?n.setStyle({},{cross:{}}):"line"===e?n.setStyle({},{line:{}}):"ballstick"===e&&n.setStyle({},{stick:{radius:.15},sphere:{radius:.4}}),n.render())},t}()},{}],10:[function(t,e,n){"use strict";e.exports=function(){t("bootstrap");var e=t("./accessibility"),n=t("browsernizr"),o={elementSymbols:["h","he","li","be","b","c","n","o","f","ne","na","mg","al","si","p","s","cl","ar","k","ca","sc","ti","v","cr","mn","fe","co","ni","cu","zn","ga","ge","as","se","br","kr","rb","sr","y","zr","nb","mo","tc","ru","rh","pd","ag","cd","in","sn","sb","te","i","xe","cs","ba","la","ce","pr","nd","pm","sm","eu","gd","tb","dy","ho","er","tm","yb","lu","hf","ta","w","re","os","ir","pt","au","hg","tl","pb","bi","po","at","rn","fr","ra","ac","th","pa","u","np","pu","am","cm","bk","cf","es","fm","md","no","lr","rf","db","sg","bh","hs","mt","ds","rg","cp","uut","uuq","uup","uuh","uus","uuo"]};return o.getINCHIKey=function(){var t="";return $(".molecule-inchikey").length?(t=$(".molecule-inchikey").children().next().html(),$.trim(t)):!1},o.getQRURL=function(){var t="http://doi.org/",e=null;if($(".molecule-doi-short").length)e=t+$(".molecule-doi-short").text();else if($(".molecule-doi-long").length)e=t+$(".molecule-doi-long").text();else{if(!this.getINCHIKey())return o.getRootURL();e=o.getRootURL(),e+="/mol/"+this.getINCHIKey()}return $.trim(e)},o.initFontSize=function(){e.changeFontSize(o.getCurrentFontSize())},o.updateFont=function(t){var i=null;-1===t?(i=e.fontSizeChanger(-1,o.getCurrentFontSize()),o.bootstrapFeedback("Decrease Font Size to "+i,"fa-font")):0===t?(i=e.changeFontSize(e.defaultFontSize),o.bootstrapFeedback("Reset Font Size to "+i,"fa-font")):1===t&&(i=e.fontSizeChanger(1,o.getCurrentFontSize()),o.bootstrapFeedback("Increased Font Size to "+i,"fa-font")),n.localstorage&&localStorage.setItem("baseFontSize",i)},o.getCurrentFontSize=function(){if(n.localstorage){var t=localStorage.getItem("baseFontSize");return null!==t?t:(localStorage.setItem("baseFontSize",e.defaultFontSize),e.defaultFontSize)}return e.defaultFontSize},o.redirectNoWebGL=function(){if(!n.webGL){var t="<div class='alert alert-danger' role='alert'> <strong> <a href='http://get.webgl.org/'>WebGL</a> </strong> is not supported on your device! </div";$("#main").prepend(t),window.location.replace("https://get.webgl.org/")}},o.updatePropertiesViewer=function(){n.localstorage&&("detailed"===localStorage.getItem("moleculeLayout")?$("#molecule-details table .detailed").removeClass("hidden"):$("#molecule-details table .detailed").addClass("hidden"))},o.initQuickFit=function(t,e){},o.formStyleHelper=function(){function t(t){t.target.parentNode.parentNode.className+=" input--filled"}function e(t){if(""===t.target.value.trim()){var e=new RegExp("(\\s|^)input--filled(\\s|$)");t.target.parentNode.parentNode.className=t.target.parentNode.parentNode.className.replace(e," "),t.target.parentNode.className=t.target.parentNode.className.replace(e," ")}}[].slice.call(document.querySelectorAll(".input-field")).forEach(function(n){""!==n.value.trim()&&(n.parentNode.className+=" input--filled"),n.addEventListener("focus",t),n.addEventListener("blur",e)})}(),o.isINCHI=function(t){return t=$.trim(t).toLowerCase(),27===t.length&&"-"===t[14]&&"-"===t[25]&&!!t.match(/^([0-9A-Za-z\-]+)$/)},o.isFormula=function(t){t=$.trim(t).toLowerCase();var e=t.match(/\d+/g),n=t.match(/[a-zA-Z]+/g),i=!0;return null===e?null!==n?($.each(n,function(t,e){return o.isSymbol(e)?void 0:(i=!1,!1)}),i):!1:null===n?!1:($.each(n,function(t,e){return o.isSymbol(e)?void 0:(i=!1,!1)}),i)},o.isSymbol=function(t){return t=$.trim(t).toLowerCase(),-1!==$.inArray(t,this.elementSymbols)},o.feedbackNum=0,o.feedbackTimeout=1500,o.activeFeedbackCloser=!1,o.debug=!0,o.getRootURL=function(){return location.origin||(location.origin=location.protocol+"//"+location.host),location.origin},o.smoothScrollingAnchors=function(){$('a[href^="#"]').on("click",function(t){t.preventDefault();var e=this.hash,n=$(e);$("html, body").stop().animate({scrollTop:n.offset().top},900,"swing",function(){window.location.hash=e})})},o.bootstrapFeedback=function(t,e){var n=document.createElement("div");n.className="alert alert-success",n.innerHTML='<i class="fa '+e+'"></i> '+t;var i=document.body.getElementsByClassName("top-right")[0];i.appendChild(n),setTimeout(function(){i.removeChild(n)},o.feedbackTimeout)},o.footerToBottom=function(t,e){$(t).length&&$(e).length&&(this.updateFooterHeight(t,e),setInterval(function(){o.updateFooterHeight(t,e)},200))},o.updateFooterHeight=function(t){var e=$(window).height(),n=$(t).height(),o=$(t).position().top+n;e>o?$(t).css("margin-top",10+(e-o)+"px"):$(t).css("margin-top","10px")},o.toProperCase=function(){String.prototype.toProperCase=function(){return this.replace(/\w\S*/g,function(t){return t.charAt(0).toUpperCase()+t.substr(1).toLowerCase()})}}(),o.FullToolTipOptIn=function(){$('[data-toggle="tooltip"]').on("click",function(t){t.preventDefault()}),$(function(){$('[data-toggle="tooltip"]').tooltip()})},o}()},{"./accessibility":1,bootstrap:11,browsernizr:24}],11:[function(t,e,n){t("../../js/transition.js"),t("../../js/alert.js"),t("../../js/button.js"),t("../../js/carousel.js"),t("../../js/collapse.js"),t("../../js/dropdown.js"),t("../../js/modal.js"),t("../../js/tooltip.js"),t("../../js/popover.js"),t("../../js/scrollspy.js"),t("../../js/tab.js"),t("../../js/affix.js")},{"../../js/affix.js":12,"../../js/alert.js":13,"../../js/button.js":14,"../../js/carousel.js":15,"../../js/collapse.js":16,"../../js/dropdown.js":17,"../../js/modal.js":18,"../../js/popover.js":19,"../../js/scrollspy.js":20,"../../js/tab.js":21,"../../js/tooltip.js":22,"../../js/transition.js":23}],12:[function(t,e,n){+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),i=o.data("bs.affix"),r="object"==typeof e&&e;i||o.data("bs.affix",i=new n(this,r)),"string"==typeof e&&i[e]()})}var n=function(e,o){this.options=t.extend({},n.DEFAULTS,o),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};n.VERSION="3.3.6",n.RESET="affix affix-top affix-bottom",n.DEFAULTS={offset:0,target:window},n.prototype.getState=function(t,e,n,o){var i=this.$target.scrollTop(),r=this.$element.offset(),s=this.$target.height();if(null!=n&&"top"==this.affixed)return n>i?"top":!1;if("bottom"==this.affixed)return null!=n?i+this.unpin<=r.top?!1:"bottom":t-o>=i+s?!1:"bottom";var a=null==this.affixed,l=a?i:r.top,c=a?s:e;return null!=n&&n>=i?"top":null!=o&&l+c>=t-o?"bottom":!1},n.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(n.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},n.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},n.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=this.$element.height(),o=this.options.offset,i=o.top,r=o.bottom,s=Math.max(t(document).height(),t(document.body).height());"object"!=typeof o&&(r=i=o),"function"==typeof i&&(i=o.top(this.$element)),"function"==typeof r&&(r=o.bottom(this.$element));var a=this.getState(s,e,i,r);if(this.affixed!=a){null!=this.unpin&&this.$element.css("top","");var l="affix"+(a?"-"+a:""),c=t.Event(l+".bs.affix");if(this.$element.trigger(c),c.isDefaultPrevented())return;this.affixed=a,this.unpin="bottom"==a?this.getPinnedOffset():null,this.$element.removeClass(n.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}"bottom"==a&&this.$element.offset({top:s-e-r})}};var o=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=n,t.fn.affix.noConflict=function(){return t.fn.affix=o,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var n=t(this),o=n.data();o.offset=o.offset||{},null!=o.offsetBottom&&(o.offset.bottom=o.offsetBottom),null!=o.offsetTop&&(o.offset.top=o.offsetTop),e.call(n,o)})})}(jQuery)},{}],13:[function(t,e,n){+function(t){"use strict";function e(e){return this.each(function(){var n=t(this),i=n.data("bs.alert");i||n.data("bs.alert",i=new o(this)),"string"==typeof e&&i[e].call(n)})}var n='[data-dismiss="alert"]',o=function(e){t(e).on("click",n,this.close)};o.VERSION="3.3.6",o.TRANSITION_DURATION=150,o.prototype.close=function(e){function n(){s.detach().trigger("closed.bs.alert").remove()}var i=t(this),r=i.attr("data-target");r||(r=i.attr("href"),r=r&&r.replace(/.*(?=#[^\s]*$)/,""));var s=t(r);e&&e.preventDefault(),s.length||(s=i.closest(".alert")),s.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(s.removeClass("in"),t.support.transition&&s.hasClass("fade")?s.one("bsTransitionEnd",n).emulateTransitionEnd(o.TRANSITION_DURATION):n())};var i=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=o,t.fn.alert.noConflict=function(){return t.fn.alert=i,this},t(document).on("click.bs.alert.data-api",n,o.prototype.close)}(jQuery)},{}],14:[function(t,e,n){+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),i=o.data("bs.button"),r="object"==typeof e&&e;i||o.data("bs.button",i=new n(this,r)),"toggle"==e?i.toggle():e&&i.setState(e)})}var n=function(e,o){this.$element=t(e),this.options=t.extend({},n.DEFAULTS,o),this.isLoading=!1};n.VERSION="3.3.6",n.DEFAULTS={loadingText:"loading..."},n.prototype.setState=function(e){var n="disabled",o=this.$element,i=o.is("input")?"val":"html",r=o.data();e+="Text",null==r.resetText&&o.data("resetText",o[i]()),setTimeout(t.proxy(function(){o[i](null==r[e]?this.options[e]:r[e]),"loadingText"==e?(this.isLoading=!0,o.addClass(n).attr(n,n)):this.isLoading&&(this.isLoading=!1,o.removeClass(n).removeAttr(n))},this),0)},n.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var n=this.$element.find("input");"radio"==n.prop("type")?(n.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==n.prop("type")&&(n.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),n.prop("checked",this.$element.hasClass("active")),t&&n.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var o=t.fn.button;t.fn.button=e,t.fn.button.Constructor=n,t.fn.button.noConflict=function(){return t.fn.button=o,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(n){var o=t(n.target);o.hasClass("btn")||(o=o.closest(".btn")),e.call(o,"toggle"),t(n.target).is('input[type="radio"]')||t(n.target).is('input[type="checkbox"]')||n.preventDefault()}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(jQuery)},{}],15:[function(t,e,n){+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),i=o.data("bs.carousel"),r=t.extend({},n.DEFAULTS,o.data(),"object"==typeof e&&e),s="string"==typeof e?e:r.slide;i||o.data("bs.carousel",i=new n(this,r)),"number"==typeof e?i.to(e):s?i[s]():r.interval&&i.pause().cycle()})}var n=function(e,n){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=n,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};n.VERSION="3.3.6",n.TRANSITION_DURATION=600,n.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},n.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},n.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},n.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},n.prototype.getItemForDirection=function(t,e){var n=this.getItemIndex(e),o="prev"==t&&0===n||"next"==t&&n==this.$items.length-1;if(o&&!this.options.wrap)return e;var i="prev"==t?-1:1,r=(n+i)%this.$items.length;return this.$items.eq(r)},n.prototype.to=function(t){var e=this,n=this.getItemIndex(this.$active=this.$element.find(".item.active"));return t>this.$items.length-1||0>t?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):n==t?this.pause().cycle():this.slide(t>n?"next":"prev",this.$items.eq(t))},n.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},n.prototype.next=function(){return this.sliding?void 0:this.slide("next")},n.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},n.prototype.slide=function(e,o){var i=this.$element.find(".item.active"),r=o||this.getItemForDirection(e,i),s=this.interval,a="next"==e?"left":"right",l=this;if(r.hasClass("active"))return this.sliding=!1;var c=r[0],u=t.Event("slide.bs.carousel",{relatedTarget:c,direction:a});if(this.$element.trigger(u),!u.isDefaultPrevented()){if(this.sliding=!0,s&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var d=t(this.$indicators.children()[this.getItemIndex(r)]);d&&d.addClass("active")}var f=t.Event("slid.bs.carousel",{relatedTarget:c,direction:a});return t.support.transition&&this.$element.hasClass("slide")?(r.addClass(e),r[0].offsetWidth,i.addClass(a),r.addClass(a),i.one("bsTransitionEnd",function(){r.removeClass([e,a].join(" ")).addClass("active"),i.removeClass(["active",a].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(f)},0)}).emulateTransitionEnd(n.TRANSITION_DURATION)):(i.removeClass("active"),r.addClass("active"),this.sliding=!1,this.$element.trigger(f)),s&&this.cycle(),this}};var o=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=n,t.fn.carousel.noConflict=function(){return t.fn.carousel=o,this};var i=function(n){var o,i=t(this),r=t(i.attr("data-target")||(o=i.attr("href"))&&o.replace(/.*(?=#[^\s]+$)/,""));if(r.hasClass("carousel")){var s=t.extend({},r.data(),i.data()),a=i.attr("data-slide-to");a&&(s.interval=!1),e.call(r,s),a&&r.data("bs.carousel").to(a),n.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",i).on("click.bs.carousel.data-api","[data-slide-to]",i),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var n=t(this);e.call(n,n.data())})})}(jQuery)},{}],16:[function(t,e,n){+function(t){"use strict";function e(e){var n,o=e.attr("data-target")||(n=e.attr("href"))&&n.replace(/.*(?=#[^\s]+$)/,"");return t(o)}function n(e){return this.each(function(){var n=t(this),i=n.data("bs.collapse"),r=t.extend({},o.DEFAULTS,n.data(),"object"==typeof e&&e);!i&&r.toggle&&/show|hide/.test(e)&&(r.toggle=!1),i||n.data("bs.collapse",i=new o(this,r)),"string"==typeof e&&i[e]()})}var o=function(e,n){this.$element=t(e),this.options=t.extend({},o.DEFAULTS,n),this.$trigger=t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};o.VERSION="3.3.6",o.TRANSITION_DURATION=350,o.DEFAULTS={toggle:!0},o.prototype.dimension=function(){var t=this.$element.hasClass("width");return t?"width":"height"},o.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var e,i=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(i&&i.length&&(e=i.data("bs.collapse"),e&&e.transitioning))){var r=t.Event("show.bs.collapse");if(this.$element.trigger(r),!r.isDefaultPrevented()){i&&i.length&&(n.call(i,"hide"),e||i.data("bs.collapse",null));var s=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[s](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var a=function(){this.$element.removeClass("collapsing").addClass("collapse in")[s](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return a.call(this);var l=t.camelCase(["scroll",s].join("-"));this.$element.one("bsTransitionEnd",t.proxy(a,this)).emulateTransitionEnd(o.TRANSITION_DURATION)[s](this.$element[0][l])}}}},o.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var n=this.dimension();this.$element[n](this.$element[n]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var i=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return t.support.transition?void this.$element[n](0).one("bsTransitionEnd",t.proxy(i,this)).emulateTransitionEnd(o.TRANSITION_DURATION):i.call(this)}}},o.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},o.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(n,o){var i=t(o);this.addAriaAndCollapsedClass(e(i),i)},this)).end()},o.prototype.addAriaAndCollapsedClass=function(t,e){var n=t.hasClass("in");t.attr("aria-expanded",n),e.toggleClass("collapsed",!n).attr("aria-expanded",n)};var i=t.fn.collapse;t.fn.collapse=n,t.fn.collapse.Constructor=o,t.fn.collapse.noConflict=function(){return t.fn.collapse=i,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(o){var i=t(this);i.attr("data-target")||o.preventDefault();var r=e(i),s=r.data("bs.collapse"),a=s?"toggle":i.data();n.call(r,a)})}(jQuery)},{}],17:[function(t,e,n){+function(t){"use strict";function e(e){var n=e.attr("data-target");n||(n=e.attr("href"),n=n&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,""));var o=n&&t(n);return o&&o.length?o:e.parent()}function n(n){n&&3===n.which||(t(i).remove(),t(r).each(function(){var o=t(this),i=e(o),r={relatedTarget:this};i.hasClass("open")&&(n&&"click"==n.type&&/input|textarea/i.test(n.target.tagName)&&t.contains(i[0],n.target)||(i.trigger(n=t.Event("hide.bs.dropdown",r)),n.isDefaultPrevented()||(o.attr("aria-expanded","false"),i.removeClass("open").trigger(t.Event("hidden.bs.dropdown",r)))))}))}function o(e){return this.each(function(){var n=t(this),o=n.data("bs.dropdown");o||n.data("bs.dropdown",o=new s(this)),"string"==typeof e&&o[e].call(n)})}var i=".dropdown-backdrop",r='[data-toggle="dropdown"]',s=function(e){t(e).on("click.bs.dropdown",this.toggle)};s.VERSION="3.3.6",s.prototype.toggle=function(o){var i=t(this);if(!i.is(".disabled, :disabled")){var r=e(i),s=r.hasClass("open");if(n(),!s){"ontouchstart"in document.documentElement&&!r.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",n);var a={relatedTarget:this
};if(r.trigger(o=t.Event("show.bs.dropdown",a)),o.isDefaultPrevented())return;i.trigger("focus").attr("aria-expanded","true"),r.toggleClass("open").trigger(t.Event("shown.bs.dropdown",a))}return!1}},s.prototype.keydown=function(n){if(/(38|40|27|32)/.test(n.which)&&!/input|textarea/i.test(n.target.tagName)){var o=t(this);if(n.preventDefault(),n.stopPropagation(),!o.is(".disabled, :disabled")){var i=e(o),s=i.hasClass("open");if(!s&&27!=n.which||s&&27==n.which)return 27==n.which&&i.find(r).trigger("focus"),o.trigger("click");var a=" li:not(.disabled):visible a",l=i.find(".dropdown-menu"+a);if(l.length){var c=l.index(n.target);38==n.which&&c>0&&c--,40==n.which&&c<l.length-1&&c++,~c||(c=0),l.eq(c).trigger("focus")}}}};var a=t.fn.dropdown;t.fn.dropdown=o,t.fn.dropdown.Constructor=s,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=a,this},t(document).on("click.bs.dropdown.data-api",n).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",r,s.prototype.toggle).on("keydown.bs.dropdown.data-api",r,s.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",s.prototype.keydown)}(jQuery)},{}],18:[function(t,e,n){+function(t){"use strict";function e(e,o){return this.each(function(){var i=t(this),r=i.data("bs.modal"),s=t.extend({},n.DEFAULTS,i.data(),"object"==typeof e&&e);r||i.data("bs.modal",r=new n(this,s)),"string"==typeof e?r[e](o):s.show&&r.show(o)})}var n=function(e,n){this.options=n,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};n.VERSION="3.3.6",n.TRANSITION_DURATION=300,n.BACKDROP_TRANSITION_DURATION=150,n.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},n.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},n.prototype.show=function(e){var o=this,i=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(i),this.isShown||i.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){o.$element.one("mouseup.dismiss.bs.modal",function(e){t(e.target).is(o.$element)&&(o.ignoreBackdropClick=!0)})}),this.backdrop(function(){var i=t.support.transition&&o.$element.hasClass("fade");o.$element.parent().length||o.$element.appendTo(o.$body),o.$element.show().scrollTop(0),o.adjustDialog(),i&&o.$element[0].offsetWidth,o.$element.addClass("in"),o.enforceFocus();var r=t.Event("shown.bs.modal",{relatedTarget:e});i?o.$dialog.one("bsTransitionEnd",function(){o.$element.trigger("focus").trigger(r)}).emulateTransitionEnd(n.TRANSITION_DURATION):o.$element.trigger("focus").trigger(r)}))},n.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(n.TRANSITION_DURATION):this.hideModal())},n.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},n.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},n.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},n.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},n.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},n.prototype.backdrop=function(e){var o=this,i=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var r=t.support.transition&&i;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+i).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){return this.ignoreBackdropClick?void(this.ignoreBackdropClick=!1):void(t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide()))},this)),r&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;r?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var s=function(){o.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",s).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):s()}else e&&e()},n.prototype.handleUpdate=function(){this.adjustDialog()},n.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},n.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},n.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},n.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},n.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},n.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var o=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=n,t.fn.modal.noConflict=function(){return t.fn.modal=o,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(n){var o=t(this),i=o.attr("href"),r=t(o.attr("data-target")||i&&i.replace(/.*(?=#[^\s]+$)/,"")),s=r.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(i)&&i},r.data(),o.data());o.is("a")&&n.preventDefault(),r.one("show.bs.modal",function(t){t.isDefaultPrevented()||r.one("hidden.bs.modal",function(){o.is(":visible")&&o.trigger("focus")})}),e.call(r,s,this)})}(jQuery)},{}],19:[function(t,e,n){+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),i=o.data("bs.popover"),r="object"==typeof e&&e;!i&&/destroy|hide/.test(e)||(i||o.data("bs.popover",i=new n(this,r)),"string"==typeof e&&i[e]())})}var n=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");n.VERSION="3.3.6",n.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),n.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),n.prototype.constructor=n,n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),n=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof n?"html":"append":"text"](n),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},n.prototype.hasContent=function(){return this.getTitle()||this.getContent()},n.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var o=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=n,t.fn.popover.noConflict=function(){return t.fn.popover=o,this}}(jQuery)},{}],20:[function(t,e,n){+function(t){"use strict";function e(n,o){this.$body=t(document.body),this.$scrollElement=t(t(n).is(document.body)?window:n),this.options=t.extend({},e.DEFAULTS,o),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this)),this.refresh(),this.process()}function n(n){return this.each(function(){var o=t(this),i=o.data("bs.scrollspy"),r="object"==typeof n&&n;i||o.data("bs.scrollspy",i=new e(this,r)),"string"==typeof n&&i[n]()})}e.VERSION="3.3.6",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e=this,n="offset",o=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),t.isWindow(this.$scrollElement[0])||(n="position",o=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var e=t(this),i=e.data("target")||e.attr("href"),r=/^#./.test(i)&&t(i);return r&&r.length&&r.is(":visible")&&[[r[n]().top+o,i]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){e.offsets.push(this[0]),e.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),o=this.options.offset+n-this.$scrollElement.height(),i=this.offsets,r=this.targets,s=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),e>=o)return s!=(t=r[r.length-1])&&this.activate(t);if(s&&e<i[0])return this.activeTarget=null,this.clear();for(t=i.length;t--;)s!=r[t]&&e>=i[t]&&(void 0===i[t+1]||e<i[t+1])&&this.activate(r[t])},e.prototype.activate=function(e){this.activeTarget=e,this.clear();var n=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',o=t(n).parents("li").addClass("active");o.parent(".dropdown-menu").length&&(o=o.closest("li.dropdown").addClass("active")),o.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var o=t.fn.scrollspy;t.fn.scrollspy=n,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=o,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);n.call(e,e.data())})})}(jQuery)},{}],21:[function(t,e,n){+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),i=o.data("bs.tab");i||o.data("bs.tab",i=new n(this)),"string"==typeof e&&i[e]()})}var n=function(e){this.element=t(e)};n.VERSION="3.3.6",n.TRANSITION_DURATION=150,n.prototype.show=function(){var e=this.element,n=e.closest("ul:not(.dropdown-menu)"),o=e.data("target");if(o||(o=e.attr("href"),o=o&&o.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var i=n.find(".active:last a"),r=t.Event("hide.bs.tab",{relatedTarget:e[0]}),s=t.Event("show.bs.tab",{relatedTarget:i[0]});if(i.trigger(r),e.trigger(s),!s.isDefaultPrevented()&&!r.isDefaultPrevented()){var a=t(o);this.activate(e.closest("li"),n),this.activate(a,a.parent(),function(){i.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:i[0]})})}}},n.prototype.activate=function(e,o,i){function r(){s.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),e.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),a?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu").length&&e.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),i&&i()}var s=o.find("> .active"),a=i&&t.support.transition&&(s.length&&s.hasClass("fade")||!!o.find("> .fade").length);s.length&&a?s.one("bsTransitionEnd",r).emulateTransitionEnd(n.TRANSITION_DURATION):r(),s.removeClass("in")};var o=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=n,t.fn.tab.noConflict=function(){return t.fn.tab=o,this};var i=function(n){n.preventDefault(),e.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',i).on("click.bs.tab.data-api",'[data-toggle="pill"]',i)}(jQuery)},{}],22:[function(t,e,n){+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),i=o.data("bs.tooltip"),r="object"==typeof e&&e;!i&&/destroy|hide/.test(e)||(i||o.data("bs.tooltip",i=new n(this,r)),"string"==typeof e&&i[e]())})}var n=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};n.VERSION="3.3.6",n.TRANSITION_DURATION=150,n.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},n.prototype.init=function(e,n,o){if(this.enabled=!0,this.type=e,this.$element=t(n),this.options=this.getOptions(o),this.$viewport=this.options.viewport&&t(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var i=this.options.trigger.split(" "),r=i.length;r--;){var s=i[r];if("click"==s)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=s){var a="hover"==s?"mouseenter":"focusin",l="hover"==s?"mouseleave":"focusout";this.$element.on(a+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},n.prototype.getDelegateOptions=function(){var e={},n=this.getDefaults();return this._options&&t.each(this._options,function(t,o){n[t]!=o&&(e[t]=o)}),e},n.prototype.enter=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),e instanceof t.Event&&(n.inState["focusin"==e.type?"focus":"hover"]=!0),n.tip().hasClass("in")||"in"==n.hoverState?void(n.hoverState="in"):(clearTimeout(n.timeout),n.hoverState="in",n.options.delay&&n.options.delay.show?void(n.timeout=setTimeout(function(){"in"==n.hoverState&&n.show()},n.options.delay.show)):n.show())},n.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},n.prototype.leave=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),e instanceof t.Event&&(n.inState["focusout"==e.type?"focus":"hover"]=!1),n.isInStateTrue()?void 0:(clearTimeout(n.timeout),n.hoverState="out",n.options.delay&&n.options.delay.hide?void(n.timeout=setTimeout(function(){"out"==n.hoverState&&n.hide()},n.options.delay.hide)):n.hide())},n.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var o=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!o)return;var i=this,r=this.tip(),s=this.getUID(this.type);this.setContent(),r.attr("id",s),this.$element.attr("aria-describedby",s),this.options.animation&&r.addClass("fade");var a="function"==typeof this.options.placement?this.options.placement.call(this,r[0],this.$element[0]):this.options.placement,l=/\s?auto?\s?/i,c=l.test(a);c&&(a=a.replace(l,"")||"top"),r.detach().css({top:0,left:0,display:"block"}).addClass(a).data("bs."+this.type,this),this.options.container?r.appendTo(this.options.container):r.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var u=this.getPosition(),d=r[0].offsetWidth,f=r[0].offsetHeight;if(c){var h=a,p=this.getPosition(this.$viewport);a="bottom"==a&&u.bottom+f>p.bottom?"top":"top"==a&&u.top-f<p.top?"bottom":"right"==a&&u.right+d>p.width?"left":"left"==a&&u.left-d<p.left?"right":a,r.removeClass(h).addClass(a)}var g=this.getCalculatedOffset(a,u,d,f);this.applyPlacement(g,a);var m=function(){var t=i.hoverState;i.$element.trigger("shown.bs."+i.type),i.hoverState=null,"out"==t&&i.leave(i)};t.support.transition&&this.$tip.hasClass("fade")?r.one("bsTransitionEnd",m).emulateTransitionEnd(n.TRANSITION_DURATION):m()}},n.prototype.applyPlacement=function(e,n){var o=this.tip(),i=o[0].offsetWidth,r=o[0].offsetHeight,s=parseInt(o.css("margin-top"),10),a=parseInt(o.css("margin-left"),10);isNaN(s)&&(s=0),isNaN(a)&&(a=0),e.top+=s,e.left+=a,t.offset.setOffset(o[0],t.extend({using:function(t){o.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),o.addClass("in");var l=o[0].offsetWidth,c=o[0].offsetHeight;"top"==n&&c!=r&&(e.top=e.top+r-c);var u=this.getViewportAdjustedDelta(n,e,l,c);u.left?e.left+=u.left:e.top+=u.top;var d=/top|bottom/.test(n),f=d?2*u.left-i+l:2*u.top-r+c,h=d?"offsetWidth":"offsetHeight";o.offset(e),this.replaceArrow(f,o[0][h],d)},n.prototype.replaceArrow=function(t,e,n){this.arrow().css(n?"left":"top",50*(1-t/e)+"%").css(n?"top":"left","")},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},n.prototype.hide=function(e){function o(){"in"!=i.hoverState&&r.detach(),i.$element.removeAttr("aria-describedby").trigger("hidden.bs."+i.type),e&&e()}var i=this,r=t(this.$tip),s=t.Event("hide.bs."+this.type);return this.$element.trigger(s),s.isDefaultPrevented()?void 0:(r.removeClass("in"),t.support.transition&&r.hasClass("fade")?r.one("bsTransitionEnd",o).emulateTransitionEnd(n.TRANSITION_DURATION):o(),this.hoverState=null,this)},n.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},n.prototype.hasContent=function(){return this.getTitle()},n.prototype.getPosition=function(e){e=e||this.$element;var n=e[0],o="BODY"==n.tagName,i=n.getBoundingClientRect();null==i.width&&(i=t.extend({},i,{width:i.right-i.left,height:i.bottom-i.top}));var r=o?{top:0,left:0}:e.offset(),s={scroll:o?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},a=o?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},i,s,a,r)},n.prototype.getCalculatedOffset=function(t,e,n,o){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-n/2}:"top"==t?{top:e.top-o,left:e.left+e.width/2-n/2}:"left"==t?{top:e.top+e.height/2-o/2,left:e.left-n}:{top:e.top+e.height/2-o/2,left:e.left+e.width}},n.prototype.getViewportAdjustedDelta=function(t,e,n,o){var i={top:0,left:0};if(!this.$viewport)return i;var r=this.options.viewport&&this.options.viewport.padding||0,s=this.getPosition(this.$viewport);if(/right|left/.test(t)){var a=e.top-r-s.scroll,l=e.top+r-s.scroll+o;a<s.top?i.top=s.top-a:l>s.top+s.height&&(i.top=s.top+s.height-l)}else{var c=e.left-r,u=e.left+r+n;c<s.left?i.left=s.left-c:u>s.right&&(i.left=s.left+s.width-u)}return i},n.prototype.getTitle=function(){var t,e=this.$element,n=this.options;return t=e.attr("data-original-title")||("function"==typeof n.title?n.title.call(e[0]):n.title)},n.prototype.getUID=function(t){do t+=~~(1e6*Math.random());while(document.getElementById(t));return t},n.prototype.tip=function(){if(!this.$tip&&(this.$tip=t(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},n.prototype.enable=function(){this.enabled=!0},n.prototype.disable=function(){this.enabled=!1},n.prototype.toggleEnabled=function(){this.enabled=!this.enabled},n.prototype.toggle=function(e){var n=this;e&&(n=t(e.currentTarget).data("bs."+this.type),n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n))),e?(n.inState.click=!n.inState.click,n.isInStateTrue()?n.enter(n):n.leave(n)):n.tip().hasClass("in")?n.leave(n):n.enter(n)},n.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null})};var o=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=n,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=o,this}}(jQuery)},{}],23:[function(t,e,n){+function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in e)if(void 0!==t.style[n])return{end:e[n]};return!1}t.fn.emulateTransitionEnd=function(e){var n=!1,o=this;t(this).one("bsTransitionEnd",function(){n=!0});var i=function(){n||t(o).trigger(t.support.transition.end)};return setTimeout(i,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){return t(e.target).is(this)?e.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery)},{}],24:[function(t,e,n){var o=t("./lib/Modernizr"),i=t("./lib/ModernizrProto"),r=t("./lib/classes"),s=t("./lib/testRunner"),a=t("./lib/setClasses");s(),a(r),delete i.addTest,delete i.addAsyncTest;for(var l=0;l<o._q.length;l++)o._q[l]();e.exports=o},{"./lib/Modernizr":25,"./lib/ModernizrProto":26,"./lib/classes":27,"./lib/setClasses":44,"./lib/testRunner":49}],25:[function(t,e,n){var o=t("./ModernizrProto.js"),i=function(){};i.prototype=o,i=new i,e.exports=i},{"./ModernizrProto.js":26}],26:[function(t,e,n){var o=t("./tests.js"),i={_version:"3.3.1 (browsernizr 2.1.0)",_config:{classPrefix:"",enableClasses:!0,enableJSClass:!0,usePrefixes:!0},_q:[],on:function(t,e){var n=this;setTimeout(function(){e(n[t])},0)},addTest:function(t,e,n){o.push({name:t,fn:e,options:n})},addAsyncTest:function(t){o.push({name:null,fn:t})}};e.exports=i},{"./tests.js":50}],27:[function(t,e,n){var o=[];e.exports=o},{}],28:[function(t,e,n){function o(t,e){return!!~(""+t).indexOf(e)}e.exports=o},{}],29:[function(t,e,n){function o(){return"function"!=typeof document.createElement?document.createElement(arguments[0]):i?document.createElementNS.call(document,"http://www.w3.org/2000/svg",arguments[0]):document.createElement.apply(document,arguments)}var i=t("./isSVG.js");e.exports=o},{"./isSVG.js":39}],30:[function(t,e,n){function o(t){return t.replace(/([a-z])-([a-z])/g,function(t,e,n){return e+n.toUpperCase()}).replace(/^-/,"")}e.exports=o},{}],31:[function(t,e,n){var o=t("./ModernizrProto.js"),i=t("./omPrefixes.js"),r=o._config.usePrefixes?i.split(" "):[];o._cssomPrefixes=r,e.exports=r},{"./ModernizrProto.js":26,"./omPrefixes.js":43}],32:[function(t,e,n){var o=document.documentElement;e.exports=o},{}],33:[function(t,e,n){var o=t("./ModernizrProto.js"),i=t("./omPrefixes.js"),r=o._config.usePrefixes?i.toLowerCase().split(" "):[];o._domPrefixes=r,e.exports=r},{"./ModernizrProto.js":26,"./omPrefixes.js":43}],34:[function(t,e,n){function o(t){return t.replace(/([A-Z])/g,function(t,e){return"-"+e.toLowerCase()}).replace(/^ms-/,"-ms-")}e.exports=o},{}],35:[function(t,e,n){function o(t,e){return function(){return t.apply(e,arguments)}}e.exports=o},{}],36:[function(t,e,n){function o(){var t=document.body;return t||(t=i(r?"svg":"body"),t.fake=!0),t}var i=t("./createElement.js"),r=t("./isSVG.js");e.exports=o},{"./createElement.js":29,"./isSVG.js":39}],37:[function(t,e,n){function o(t,e,n,o){var a,l,c,u,d="modernizr",f=r("div"),h=s();if(parseInt(n,10))for(;n--;)c=r("div"),c.id=o?o[n]:d+(n+1),f.appendChild(c);return a=r("style"),a.type="text/css",a.id="s"+d,(h.fake?h:f).appendChild(a),h.appendChild(f),a.styleSheet?a.styleSheet.cssText=t:a.appendChild(document.createTextNode(t)),f.id=d,h.fake&&(h.style.background="",h.style.overflow="hidden",u=i.style.overflow,i.style.overflow="hidden",i.appendChild(h)),l=e(f,t),h.fake?(h.parentNode.removeChild(h),i.style.overflow=u,i.offsetHeight):f.parentNode.removeChild(f),!!l}var i=(t("./ModernizrProto.js"),t("./docElement.js")),r=t("./createElement.js"),s=t("./getBody.js");e.exports=o},{"./ModernizrProto.js":26,"./createElement.js":29,"./docElement.js":32,"./getBody.js":36}],38:[function(t,e,n){function o(t,e){return typeof t===e}e.exports=o},{}],39:[function(t,e,n){var o=t("./docElement.js"),i="svg"===o.nodeName.toLowerCase();e.exports=i},{"./docElement.js":32}],40:[function(t,e,n){var o=t("./Modernizr.js"),i=t("./modElem.js"),r={style:i.elem.style};o._q.unshift(function(){delete r.style}),e.exports=r},{"./Modernizr.js":25,"./modElem.js":41}],41:[function(t,e,n){var o=t("./Modernizr.js"),i=t("./createElement.js"),r={elem:i("modernizr")};o._q.push(function(){delete r.elem}),e.exports=r},{"./Modernizr.js":25,"./createElement.js":29}],42:[function(t,e,n){function o(t,e){var n=t.length;if("CSS"in window&&"supports"in window.CSS){for(;n--;)if(window.CSS.supports(r(t[n]),e))return!0;return!1}if("CSSSupportsRule"in window){for(var o=[];n--;)o.push("("+r(t[n])+":"+e+")");return o=o.join(" or "),i("@supports ("+o+") { #modernizr { position: absolute; } }",function(t){return"absolute"==getComputedStyle(t,null).position})}}var i=t("./injectElementWithStyles.js"),r=t("./domToCSS.js");e.exports=o},{"./domToCSS.js":34,"./injectElementWithStyles.js":37}],43:[function(t,e,n){var o="Moz O ms Webkit";e.exports=o},{}],44:[function(t,e,n){function o(t){var e=r.className,n=i._config.classPrefix||"";if(s&&(e=e.baseVal),i._config.enableJSClass){var o=new RegExp("(^|\\s)"+n+"no-js(\\s|$)");e=e.replace(o,"$1"+n+"js$2")}i._config.enableClasses&&(e+=" "+n+t.join(" "+n),s?r.className.baseVal=e:r.className=e)}var i=t("./Modernizr.js"),r=t("./docElement.js"),s=t("./isSVG.js");e.exports=o},{"./Modernizr.js":25,"./docElement.js":32,"./isSVG.js":39}],45:[function(t,e,n){function o(t,e,n){return r(t,void 0,void 0,e,n)}var i=t("./ModernizrProto.js"),r=t("./testPropsAll.js");i.testAllProps=o,e.exports=o},{"./ModernizrProto.js":26,"./testPropsAll.js":48}],46:[function(t,e,n){function o(t,e,n){var o;for(var s in t)if(t[s]in e)return n===!1?t[s]:(o=e[t[s]],i(o,"function")?r(o,n||e):o);return!1}var i=t("./is.js"),r=t("./fnBind.js");e.exports=o},{"./fnBind.js":35,"./is.js":38}],47:[function(t,e,n){function o(t,e,n,o){function u(){f&&(delete r.style,delete r.modElem)}if(o=l(o,"undefined")?!1:o,!l(n,"undefined")){var d=a(t,n);if(!l(d,"undefined"))return d}for(var f,h,p,g,m,v=["modernizr","tspan"];!r.style;)f=!0,r.modElem=s(v.shift()),r.style=r.modElem.style;for(p=t.length,h=0;p>h;h++)if(g=t[h],m=r.style[g],i(g,"-")&&(g=c(g)),void 0!==r.style[g]){if(o||l(n,"undefined"))return u(),"pfx"==e?g:!0;try{r.style[g]=n}catch(b){}if(r.style[g]!=m)return u(),"pfx"==e?g:!0}return u(),!1}var i=t("./contains.js"),r=t("./mStyle.js"),s=t("./createElement.js"),a=t("./nativeTestProps.js"),l=t("./is.js"),c=t("./cssToDOM.js");e.exports=o},{"./contains.js":28,"./createElement.js":29,"./cssToDOM.js":30,"./is.js":38,"./mStyle.js":40,"./nativeTestProps.js":42}],48:[function(t,e,n){function o(t,e,n,o,i){var u=t.charAt(0).toUpperCase()+t.slice(1),d=(t+" "+r.join(u+" ")+u).split(" ");return s(e,"string")||s(e,"undefined")?a(d,e,o,i):(d=(t+" "+l.join(u+" ")+u).split(" "),c(d,e,n))}var i=t("./ModernizrProto.js"),r=t("./cssomPrefixes.js"),s=t("./is.js"),a=t("./testProps.js"),l=t("./domPrefixes.js"),c=t("./testDOMProps.js");i.testAllProps=o,e.exports=o},{"./ModernizrProto.js":26,"./cssomPrefixes.js":31,"./domPrefixes.js":33,"./is.js":38,"./testDOMProps.js":46,"./testProps.js":47}],49:[function(t,e,n){function o(){var t,e,n,o,l,c,u;for(var d in i)if(i.hasOwnProperty(d)){if(t=[],e=i[d],e.name&&(t.push(e.name.toLowerCase()),e.options&&e.options.aliases&&e.options.aliases.length))for(n=0;n<e.options.aliases.length;n++)t.push(e.options.aliases[n].toLowerCase());for(o=a(e.fn,"function")?e.fn():e.fn,l=0;l<t.length;l++)c=t[l],u=c.split("."),1===u.length?r[u[0]]=o:(!r[u[0]]||r[u[0]]instanceof Boolean||(r[u[0]]=new Boolean(r[u[0]])),r[u[0]][u[1]]=o),s.push((o?"":"no-")+u.join("-"))}}var i=t("./tests.js"),r=t("./Modernizr.js"),s=t("./classes.js"),a=t("./is.js");e.exports=o},{"./Modernizr.js":25,"./classes.js":27,"./is.js":38,"./tests.js":50}],50:[function(t,e,n){var o=[];e.exports=o},{}],51:[function(t,e,n){var o=t("./../../lib/Modernizr.js"),i=t("./../../lib/testAllProps.js");o.addTest("cssanimations",i("animationName","a",!0))},{"./../../lib/Modernizr.js":25,"./../../lib/testAllProps.js":45}],52:[function(t,e,n){var o=t("./../../lib/Modernizr.js");o.addTest("localstorage",function(){var t="modernizr";try{return localStorage.setItem(t,t),localStorage.removeItem(t),!0}catch(e){return!1}})},{"./../../lib/Modernizr.js":25}],53:[function(t,e,n){var o=t("./../lib/Modernizr.js"),i=t("./../lib/createElement.js");o.addTest("webgl",function(){var t=i("canvas"),e="probablySupportsContext"in t?"probablySupportsContext":"supportsContext";return e in t?t[e]("webgl")||t[e]("experimental-webgl"):"WebGLRenderingContext"in window})},{"./../lib/Modernizr.js":25,"./../lib/createElement.js":29}],54:[function(t,e,n){n.qrcode=function(){function t(e,n){if("undefined"==typeof e.length)throw new Error(e.length+"/"+n);var o=function(){for(var t=0;t<e.length&&0==e[t];)t+=1;for(var o=new Array(e.length-t+n),i=0;i<e.length-t;i+=1)o[i]=e[i+t];return o}(),i={};return i.get=function(t){return o[t]},i.getLength=function(){return o.length},i.multiply=function(e){for(var n=new Array(i.getLength()+e.getLength()-1),o=0;o<i.getLength();o+=1)for(var r=0;r<e.getLength();r+=1)n[o+r]^=s.gexp(s.glog(i.get(o))+s.glog(e.get(r)));return t(n,0)},i.mod=function(e){if(i.getLength()-e.getLength()<0)return i;for(var n=s.glog(i.get(0))-s.glog(e.get(0)),o=new Array(i.getLength()),r=0;r<i.getLength();r+=1)o[r]=i.get(r);for(var r=0;r<e.getLength();r+=1)o[r]^=s.gexp(s.glog(e.get(r))+n);return t(o,0).mod(e)},i}var e=function(e,n){var i=236,s=17,u=e,d=o[n],f=null,h=0,g=null,m=new Array,v={},b=function(t,e){h=4*u+17,f=function(t){for(var e=new Array(t),n=0;t>n;n+=1){e[n]=new Array(t);for(var o=0;t>o;o+=1)e[n][o]=null}return e}(h),y(0,0),y(h-7,0),y(0,h-7),T(),$(),C(t,e),u>=7&&S(t),null==g&&(g=E(u,d,m)),x(g,e)},y=function(t,e){for(var n=-1;7>=n;n+=1)if(!(-1>=t+n||t+n>=h))for(var o=-1;7>=o;o+=1)-1>=e+o||e+o>=h||(n>=0&&6>=n&&(0==o||6==o)||o>=0&&6>=o&&(0==n||6==n)||n>=2&&4>=n&&o>=2&&4>=o?f[t+n][e+o]=!0:f[t+n][e+o]=!1)},w=function(){
for(var t=0,e=0,n=0;8>n;n+=1){b(!0,n);var o=r.getLostPoint(v);(0==n||t>o)&&(t=o,e=n)}return e},$=function(){for(var t=8;h-8>t;t+=1)null==f[t][6]&&(f[t][6]=t%2==0);for(var e=8;h-8>e;e+=1)null==f[6][e]&&(f[6][e]=e%2==0)},T=function(){for(var t=r.getPatternPosition(u),e=0;e<t.length;e+=1)for(var n=0;n<t.length;n+=1){var o=t[e],i=t[n];if(null==f[o][i])for(var s=-2;2>=s;s+=1)for(var a=-2;2>=a;a+=1)-2==s||2==s||-2==a||2==a||0==s&&0==a?f[o+s][i+a]=!0:f[o+s][i+a]=!1}},S=function(t){for(var e=r.getBCHTypeNumber(u),n=0;18>n;n+=1){var o=!t&&1==(e>>n&1);f[Math.floor(n/3)][n%3+h-8-3]=o}for(var n=0;18>n;n+=1){var o=!t&&1==(e>>n&1);f[n%3+h-8-3][Math.floor(n/3)]=o}},C=function(t,e){for(var n=d<<3|e,o=r.getBCHTypeInfo(n),i=0;15>i;i+=1){var s=!t&&1==(o>>i&1);6>i?f[i][8]=s:8>i?f[i+1][8]=s:f[h-15+i][8]=s}for(var i=0;15>i;i+=1){var s=!t&&1==(o>>i&1);8>i?f[8][h-i-1]=s:9>i?f[8][15-i-1+1]=s:f[8][15-i-1]=s}f[h-8][8]=!t},x=function(t,e){for(var n=-1,o=h-1,i=7,s=0,a=r.getMaskFunction(e),l=h-1;l>0;l-=2)for(6==l&&(l-=1);;){for(var c=0;2>c;c+=1)if(null==f[o][l-c]){var u=!1;s<t.length&&(u=1==(t[s]>>>i&1));var d=a(o,l-c);d&&(u=!u),f[o][l-c]=u,i-=1,-1==i&&(s+=1,i=7)}if(o+=n,0>o||o>=h){o-=n,n=-n;break}}},k=function(e,n){for(var o=0,i=0,s=0,a=new Array(n.length),l=new Array(n.length),c=0;c<n.length;c+=1){var u=n[c].dataCount,d=n[c].totalCount-u;i=Math.max(i,u),s=Math.max(s,d),a[c]=new Array(u);for(var f=0;f<a[c].length;f+=1)a[c][f]=255&e.getBuffer()[f+o];o+=u;var h=r.getErrorCorrectPolynomial(d),p=t(a[c],h.getLength()-1),g=p.mod(h);l[c]=new Array(h.getLength()-1);for(var f=0;f<l[c].length;f+=1){var m=f+g.getLength()-l[c].length;l[c][f]=m>=0?g.get(m):0}}for(var v=0,f=0;f<n.length;f+=1)v+=n[f].totalCount;for(var b=new Array(v),y=0,f=0;i>f;f+=1)for(var c=0;c<n.length;c+=1)f<a[c].length&&(b[y]=a[c][f],y+=1);for(var f=0;s>f;f+=1)for(var c=0;c<n.length;c+=1)f<l[c].length&&(b[y]=l[c][f],y+=1);return b},E=function(t,e,n){for(var o=a.getRSBlocks(t,e),c=l(),u=0;u<n.length;u+=1){var d=n[u];c.put(d.getMode(),4),c.put(d.getLength(),r.getLengthInBits(d.getMode(),t)),d.write(c)}for(var f=0,u=0;u<o.length;u+=1)f+=o[u].dataCount;if(c.getLengthInBits()>8*f)throw new Error("code length overflow. ("+c.getLengthInBits()+">"+8*f+")");for(c.getLengthInBits()+4<=8*f&&c.put(0,4);c.getLengthInBits()%8!=0;)c.putBit(!1);for(;;){if(c.getLengthInBits()>=8*f)break;if(c.put(i,8),c.getLengthInBits()>=8*f)break;c.put(s,8)}return k(c,o)};return v.addData=function(t){var e=c(t);m.push(e),g=null},v.isDark=function(t,e){if(0>t||t>=h||0>e||e>=h)throw new Error(t+","+e);return f[t][e]},v.getModuleCount=function(){return h},v.make=function(){b(!1,w())},v.createTableTag=function(t,e){t=t||2,e="undefined"==typeof e?4*t:e;var n="";n+='<table style="',n+=" border-width: 0px; border-style: none;",n+=" border-collapse: collapse;",n+=" padding: 0px; margin: "+e+"px;",n+='">',n+="<tbody>";for(var o=0;o<v.getModuleCount();o+=1){n+="<tr>";for(var i=0;i<v.getModuleCount();i+=1)n+='<td style="',n+=" border-width: 0px; border-style: none;",n+=" border-collapse: collapse;",n+=" padding: 0px; margin: 0px;",n+=" width: "+t+"px;",n+=" height: "+t+"px;",n+=" background-color: ",n+=v.isDark(o,i)?"#000000":"#ffffff",n+=";",n+='"/>';n+="</tr>"}return n+="</tbody>",n+="</table>"},v.createImgTag=function(t,e){t=t||2,e="undefined"==typeof e?4*t:e;var n=v.getModuleCount()*t+2*e,o=e,i=n-e;return p(n,n,function(e,n){if(e>=o&&i>e&&n>=o&&i>n){var r=Math.floor((e-o)/t),s=Math.floor((n-o)/t);return v.isDark(s,r)?0:1}return 1})},v};e.stringToBytes=function(t){for(var e=new Array,n=0;n<t.length;n+=1){var o=t.charCodeAt(n);e.push(255&o)}return e},e.createStringToBytes=function(t,e){var n=function(){for(var n=f(t),o=function(){var t=n.read();if(-1==t)throw new Error;return t},i=0,r={};;){var s=n.read();if(-1==s)break;var a=o(),l=o(),c=o(),u=String.fromCharCode(s<<8|a),d=l<<8|c;r[u]=d,i+=1}if(i!=e)throw new Error(i+" != "+e);return r}(),o="?".charCodeAt(0);return function(t){for(var e=new Array,i=0;i<t.length;i+=1){var r=t.charCodeAt(i);if(128>r)e.push(r);else{var s=n[t.charAt(i)];"number"==typeof s?(255&s)==s?e.push(s):(e.push(s>>>8),e.push(255&s)):e.push(o)}}return e}};var n={MODE_NUMBER:1,MODE_ALPHA_NUM:2,MODE_8BIT_BYTE:4,MODE_KANJI:8},o={L:1,M:0,Q:3,H:2},i={PATTERN000:0,PATTERN001:1,PATTERN010:2,PATTERN011:3,PATTERN100:4,PATTERN101:5,PATTERN110:6,PATTERN111:7},r=function(){var e=[[],[6,18],[6,22],[6,26],[6,30],[6,34],[6,22,38],[6,24,42],[6,26,46],[6,28,50],[6,30,54],[6,32,58],[6,34,62],[6,26,46,66],[6,26,48,70],[6,26,50,74],[6,30,54,78],[6,30,56,82],[6,30,58,86],[6,34,62,90],[6,28,50,72,94],[6,26,50,74,98],[6,30,54,78,102],[6,28,54,80,106],[6,32,58,84,110],[6,30,58,86,114],[6,34,62,90,118],[6,26,50,74,98,122],[6,30,54,78,102,126],[6,26,52,78,104,130],[6,30,56,82,108,134],[6,34,60,86,112,138],[6,30,58,86,114,142],[6,34,62,90,118,146],[6,30,54,78,102,126,150],[6,24,50,76,102,128,154],[6,28,54,80,106,132,158],[6,32,58,84,110,136,162],[6,26,54,82,110,138,166],[6,30,58,86,114,142,170]],o=1335,r=7973,a=21522,l={},c=function(t){for(var e=0;0!=t;)e+=1,t>>>=1;return e};return l.getBCHTypeInfo=function(t){for(var e=t<<10;c(e)-c(o)>=0;)e^=o<<c(e)-c(o);return(t<<10|e)^a},l.getBCHTypeNumber=function(t){for(var e=t<<12;c(e)-c(r)>=0;)e^=r<<c(e)-c(r);return t<<12|e},l.getPatternPosition=function(t){return e[t-1]},l.getMaskFunction=function(t){switch(t){case i.PATTERN000:return function(t,e){return(t+e)%2==0};case i.PATTERN001:return function(t,e){return t%2==0};case i.PATTERN010:return function(t,e){return e%3==0};case i.PATTERN011:return function(t,e){return(t+e)%3==0};case i.PATTERN100:return function(t,e){return(Math.floor(t/2)+Math.floor(e/3))%2==0};case i.PATTERN101:return function(t,e){return t*e%2+t*e%3==0};case i.PATTERN110:return function(t,e){return(t*e%2+t*e%3)%2==0};case i.PATTERN111:return function(t,e){return(t*e%3+(t+e)%2)%2==0};default:throw new Error("bad maskPattern:"+t)}},l.getErrorCorrectPolynomial=function(e){for(var n=t([1],0),o=0;e>o;o+=1)n=n.multiply(t([1,s.gexp(o)],0));return n},l.getLengthInBits=function(t,e){if(e>=1&&10>e)switch(t){case n.MODE_NUMBER:return 10;case n.MODE_ALPHA_NUM:return 9;case n.MODE_8BIT_BYTE:return 8;case n.MODE_KANJI:return 8;default:throw new Error("mode:"+t)}else if(27>e)switch(t){case n.MODE_NUMBER:return 12;case n.MODE_ALPHA_NUM:return 11;case n.MODE_8BIT_BYTE:return 16;case n.MODE_KANJI:return 10;default:throw new Error("mode:"+t)}else{if(!(41>e))throw new Error("type:"+e);switch(t){case n.MODE_NUMBER:return 14;case n.MODE_ALPHA_NUM:return 13;case n.MODE_8BIT_BYTE:return 16;case n.MODE_KANJI:return 12;default:throw new Error("mode:"+t)}}},l.getLostPoint=function(t){for(var e=t.getModuleCount(),n=0,o=0;e>o;o+=1)for(var i=0;e>i;i+=1){for(var r=0,s=t.isDark(o,i),a=-1;1>=a;a+=1)if(!(0>o+a||o+a>=e))for(var l=-1;1>=l;l+=1)0>i+l||i+l>=e||0==a&&0==l||s==t.isDark(o+a,i+l)&&(r+=1);r>5&&(n+=3+r-5)}for(var o=0;e-1>o;o+=1)for(var i=0;e-1>i;i+=1){var c=0;t.isDark(o,i)&&(c+=1),t.isDark(o+1,i)&&(c+=1),t.isDark(o,i+1)&&(c+=1),t.isDark(o+1,i+1)&&(c+=1),0!=c&&4!=c||(n+=3)}for(var o=0;e>o;o+=1)for(var i=0;e-6>i;i+=1)t.isDark(o,i)&&!t.isDark(o,i+1)&&t.isDark(o,i+2)&&t.isDark(o,i+3)&&t.isDark(o,i+4)&&!t.isDark(o,i+5)&&t.isDark(o,i+6)&&(n+=40);for(var i=0;e>i;i+=1)for(var o=0;e-6>o;o+=1)t.isDark(o,i)&&!t.isDark(o+1,i)&&t.isDark(o+2,i)&&t.isDark(o+3,i)&&t.isDark(o+4,i)&&!t.isDark(o+5,i)&&t.isDark(o+6,i)&&(n+=40);for(var u=0,i=0;e>i;i+=1)for(var o=0;e>o;o+=1)t.isDark(o,i)&&(u+=1);var d=Math.abs(100*u/e/e-50)/5;return n+=10*d},l}(),s=function(){for(var t=new Array(256),e=new Array(256),n=0;8>n;n+=1)t[n]=1<<n;for(var n=8;256>n;n+=1)t[n]=t[n-4]^t[n-5]^t[n-6]^t[n-8];for(var n=0;255>n;n+=1)e[t[n]]=n;var o={};return o.glog=function(t){if(1>t)throw new Error("glog("+t+")");return e[t]},o.gexp=function(e){for(;0>e;)e+=255;for(;e>=256;)e-=255;return t[e]},o}(),a=function(){var t=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16]],e=function(t,e){var n={};return n.totalCount=t,n.dataCount=e,n},n={},i=function(e,n){switch(n){case o.L:return t[4*(e-1)+0];case o.M:return t[4*(e-1)+1];case o.Q:return t[4*(e-1)+2];case o.H:return t[4*(e-1)+3];default:return}};return n.getRSBlocks=function(t,n){var o=i(t,n);if("undefined"==typeof o)throw new Error("bad rs block @ typeNumber:"+t+"/errorCorrectLevel:"+n);for(var r=o.length/3,s=new Array,a=0;r>a;a+=1)for(var l=o[3*a+0],c=o[3*a+1],u=o[3*a+2],d=0;l>d;d+=1)s.push(e(c,u));return s},n}(),l=function(){var t=new Array,e=0,n={};return n.getBuffer=function(){return t},n.get=function(e){var n=Math.floor(e/8);return 1==(t[n]>>>7-e%8&1)},n.put=function(t,e){for(var o=0;e>o;o+=1)n.putBit(1==(t>>>e-o-1&1))},n.getLengthInBits=function(){return e},n.putBit=function(n){var o=Math.floor(e/8);t.length<=o&&t.push(0),n&&(t[o]|=128>>>e%8),e+=1},n},c=function(t){var o=n.MODE_8BIT_BYTE,i=e.stringToBytes(t),r={};return r.getMode=function(){return o},r.getLength=function(t){return i.length},r.write=function(t){for(var e=0;e<i.length;e+=1)t.put(i[e],8)},r},u=function(){var t=new Array,e={};return e.writeByte=function(e){t.push(255&e)},e.writeShort=function(t){e.writeByte(t),e.writeByte(t>>>8)},e.writeBytes=function(t,n,o){n=n||0,o=o||t.length;for(var i=0;o>i;i+=1)e.writeByte(t[i+n])},e.writeString=function(t){for(var n=0;n<t.length;n+=1)e.writeByte(t.charCodeAt(n))},e.toByteArray=function(){return t},e.toString=function(){var e="";e+="[";for(var n=0;n<t.length;n+=1)n>0&&(e+=","),e+=t[n];return e+="]"},e},d=function(){var t=0,e=0,n=0,o="",i={},r=function(t){o+=String.fromCharCode(s(63&t))},s=function(t){if(0>t);else{if(26>t)return 65+t;if(52>t)return 97+(t-26);if(62>t)return 48+(t-52);if(62==t)return 43;if(63==t)return 47}throw new Error("n:"+t)};return i.writeByte=function(o){for(t=t<<8|255&o,e+=8,n+=1;e>=6;)r(t>>>e-6),e-=6},i.flush=function(){if(e>0&&(r(t<<6-e),t=0,e=0),n%3!=0)for(var i=3-n%3,s=0;i>s;s+=1)o+="="},i.toString=function(){return o},i},f=function(t){var e=t,n=0,o=0,i=0,r={};r.read=function(){for(;8>i;){if(n>=e.length){if(0==i)return-1;throw new Error("unexpected end of file./"+i)}var t=e.charAt(n);if(n+=1,"="==t)return i=0,-1;t.match(/^\s$/)||(o=o<<6|s(t.charCodeAt(0)),i+=6)}var r=o>>>i-8&255;return i-=8,r};var s=function(t){if(t>=65&&90>=t)return t-65;if(t>=97&&122>=t)return t-97+26;if(t>=48&&57>=t)return t-48+52;if(43==t)return 62;if(47==t)return 63;throw new Error("c:"+t)};return r},h=function(t,e){var n=t,o=e,i=new Array(t*e),r={};r.setPixel=function(t,e,o){i[e*n+t]=o},r.write=function(t){t.writeString("GIF87a"),t.writeShort(n),t.writeShort(o),t.writeByte(128),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(255),t.writeByte(255),t.writeByte(255),t.writeString(","),t.writeShort(0),t.writeShort(0),t.writeShort(n),t.writeShort(o),t.writeByte(0);var e=2,i=a(e);t.writeByte(e);for(var r=0;i.length-r>255;)t.writeByte(255),t.writeBytes(i,r,255),r+=255;t.writeByte(i.length-r),t.writeBytes(i,r,i.length-r),t.writeByte(0),t.writeString(";")};var s=function(t){var e=t,n=0,o=0,i={};return i.write=function(t,i){if(t>>>i!=0)throw new Error("length over");for(;n+i>=8;)e.writeByte(255&(t<<n|o)),i-=8-n,t>>>=8-n,o=0,n=0;o=t<<n|o,n+=i},i.flush=function(){n>0&&e.writeByte(o)},i},a=function(t){for(var e=1<<t,n=(1<<t)+1,o=t+1,r=l(),a=0;e>a;a+=1)r.add(String.fromCharCode(a));r.add(String.fromCharCode(e)),r.add(String.fromCharCode(n));var c=u(),d=s(c);d.write(e,o);var f=0,h=String.fromCharCode(i[f]);for(f+=1;f<i.length;){var p=String.fromCharCode(i[f]);f+=1,r.contains(h+p)?h+=p:(d.write(r.indexOf(h),o),r.size()<4095&&(r.size()==1<<o&&(o+=1),r.add(h+p)),h=p)}return d.write(r.indexOf(h),o),d.write(n,o),d.flush(),c.toByteArray()},l=function(){var t={},e=0,n={};return n.add=function(o){if(n.contains(o))throw new Error("dup key:"+o);t[o]=e,e+=1},n.size=function(){return e},n.indexOf=function(e){return t[e]},n.contains=function(e){return"undefined"!=typeof t[e]},n};return r},p=function(t,e,n,o){for(var i=h(t,e),r=0;e>r;r+=1)for(var s=0;t>s;s+=1)i.setPixel(s,r,n(s,r));var a=u();i.write(a);for(var l=d(),c=a.toByteArray(),f=0;f<c.length;f+=1)l.writeByte(c[f]);l.flush();var p="";return p+="<img",p+=' src="',p+="data:image/gif;base64,",p+=l,p+='"',p+=' width="',p+=t,p+='"',p+=' height="',p+=e,p+='"',o&&(p+=' alt="',p+=o,p+='"'),p+="/>"};return e}()},{}]},{},[4]);
//# sourceMappingURL=data:application/json;base64,
