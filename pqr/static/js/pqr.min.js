(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

/**
 * @fileoverview Various web accessibility functions
 * @author JoshJRogan@gmail.com (Josh Rogan)
 * @author ritwikg2004@live.com (Ritwik Gupta)
 * @author jjnaughton93@gmail.com (JJ Naughton)
 */

module.exports = function () {
    var accessibility = {
        fontSizeChangerIndex: 2,
        defaultFontSize: 16
    };

    /**
     * Increases the body font size by some units multiplied by the fontSizeChangerIndex
     * @param  {String} current Current size of the font or false if not set
     * @param  {int} type    default 0, increase 1, decrease -1,
     * @return {String}      the value of the new font size
     */
    accessibility.fontSizeChanger = function (type, current) {
        if (type === -1) {
            return this.changeFontSize(parseInt(current) - this.fontSizeChangerIndex);
        } else if (type === 0) {
            return this.changeFontSize(this.defaultFontSize);
        } else if (type === 1) {
            return this.changeFontSize(parseInt(current) + this.fontSizeChangerIndex);
        }
    };

    /**
     * Changes the body font size to the size passed.
     * @param  {int} size The newly calculated size of the body font, in a valid font size.
     * @return {int} The value of the new font size
     */
    accessibility.changeFontSize = function (size) {
        $("body").css("font-size", size.toString() + "px");
        return size;
    };
    return accessibility;
}();

},{}],2:[function(require,module,exports){
'use strict';

//TODO: wth is Bloodhound
//TODO: this is especially messy

/**
 * @fileoverview Autocomplete search related functions 
 * @author JoshJRogan@gmail.com (Josh Rogan)
 * @author ritwikg2004@live.com (Ritwik Gupta)
 * @author jjnaughton93@gmail.com (JJ Naughton)
 */

module.exports = function () {
    var util = require('./util');
    //$ = require('jquery');

    var autocomplete = {
        debug: true,
        inputSelector: '#search-bar-auto',
        resultsSelector: '.autocomplete-results',
        resultsSizeMax: 10, //The limit of how many results to show in the list
        database: []
    };

    /**
     * @return {[type]} [description]
     */
    /*
    autocomplete.init = function() {
        $(autocomplete.resultsSelector).slideUp();
        this.typeahead();
        this.isFormula = util.isFormula;
        this.isINCHI = util.isINCHI;
    };
     */

    /**
     * Tokenize a formula by breaking into it's molecular components
     * @param  {String} formula string representing a formula
     * @return {ARray}         tokenized results
     */
    /*
    autocomplete.formulaTokenizer = function(formula) {
        formula = formula.toLowerCase();
        var splitFormula = formula.replace(/([a-z])/g, ' $1').trim();
        var tokens = splitFormula ? splitFormula.split(/\s+/) : [];
        tokens.push(formula); //Add the full string
        return tokens;
    };
     */

    /**
     * Sort all of the items this happens in search and after filter
     * @param  {[type]} a [description]
     * @param  {[type]} b [description]
     * @return {[type]}   [description]
     */
    /*
    autocomplete.suggestionSorter = function(suggestions, query){
        var isFormula = this.isFormula(query);
        var noNumbers = query.match(/\d+/g) === null;
        suggestions = this.filter(suggestions, query);
        var topSuggestions = [];
        var topFormulas = [];
        suggestions = $.map(suggestions, function(value){
            //Difficult to tell before 3
            if(query.length > 2){
                //Prioritize Name
                if(noNumbers || !isFormula){
                    if(query === value.name.substring(0,query.length)
                        .toLowerCase()){
                        topSuggestions.push(value); 
                        return null; 
                    }
                }
            }
            //Prioritieze formulas by length
            if(query.length > 2 && isFormula){
                if(query === value.formula.substring(0,query.length)
                    .toLowerCase()){
                    // top_formulas.push(value); 
                    // return null; 
                }
            }
            return value;
        });
         //Add top name suggestions by closest match
        if(topSuggestions.length){
            topSuggestions.sort(function(a,b) {
                return b.name.length - a.name.length;
            });
            $.each(topSuggestions, function(index, obj){
                suggestions.unshift(obj);
            });
        }
        //Add top formula suggestions by closest match
        if(topFormulas.length){ 
            //Shortest formulas first
            topFormulas.sort(function(a,b) {
                return b.formula.length - a.formula.length;
            });
             $.each(topFormulas, function(index, obj){
                suggestions.unshift(obj);
            });
        }
         return suggestions.slice(0,this.resultsSizeMax);
    };
    */

    /*
    autocomplete.filter = function(suggestions, query){
        var isFormula = this.isFormula(query);
        var isINCHI = this.isINCHI(query);
        var seenInchis = [];
        suggestions = $.map(suggestions, function(value){
             //Remove duplicate inchi values
            if(seenInchis.indexOf(value.inchikey) < 0){
                seenInchis.push(value.inchikey);
            }
            else{
                return null;
            }
            //Remove long names if they aren't formula or inchi
            if(!isINCHI && !isFormula && value.name.length > 20){
                return null;
            }
            /*
            //TODO: this was commented out
            //Length shortner
            if( value.name.length > 20 || value.name.match(/[,-]/g) === null){
                // return null;
            }
            return value;
        });
        return suggestions;
    };
    */

    /**
     * Setup typeahead for autocomplete and suggested search
     * @return {[type]} [description]
     */
    /*
    autocomplete.typeahead = function() {
        var data = autoComplete;
        this.engine = new Bloodhound({
            datumTokenizer: function(data) {
                // console.log(data);
                var nameTokens = Bloodhound.tokenizers.whitespace(data.name);
                var formulaTokens = autocomplete.formulaTokenizer(data.formula);
                var synonymTokens = data.synonyms; //Already in an array
                var tagsTokens = data.tags; //Already in an array
                var inchiTokens = data.inchikey; //Just one value
                //Quickly disabled tokens
                // nameTokens = [];
                // formulaTokens = [];
                // synonymTokens = [];
                tagsTokens = []; //Producing too many results
                //Combine all of the tokens
                return nameTokens.concat(formulaTokens).concat(synonymTokens)
                    .concat(tagsTokens).concat(inchiTokens);
            },
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            local: auto_complete,
            remote: {
                url: "/suggestions?partial=%QUERY",
                wildcard: '%QUERY'
            },
            cache: true,
            identify: function(obj){
                return obj.inchikey
            },
            // sorter: this.suggestionSorter
        });
        //Seperate engine for low ranking items
        this.lowRank = new Bloodhound({
            datumTokenizer: function(data) {
                var synonymTokens = data.synonyms;
                var tagsTokens = data.tags;
                synonymTokens = [];
                tagsTokens = [];
                //Combine all of the tokens
                return synonymTokens.concat(tagsTokens);
            },
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            local: auto_complete,
            identify: function(obj){
                return obj.inchikey;
            },
        });
         this.TypeAhead = $(this.inputSelector).typeahead({
            hint: false,
            minLength: 1,
            classNames: {
                dataset: 'autocomplete-results',
                suggestion: 'suggestion',
            }
        }, {
            name: 'name',
            display: 'name',
            limit: 1000,
            // source: this.engine,
            source: function(query, sync, async) {
                autocomplete.engine.search(
                    query,
                    function(suggestions) {
                        sync(autocomplete.suggestionSorter(suggestions,
                            query.toLowerCase()));
                    },
                    function(suggestions){
                        async(autocomplete.suggestionSorter(suggestions,
                            query.toLowerCase()));
                    }
                );
            },
            templates: {
                empty: function(data){
                    return "<div><a href='#'><div class='suggestion col-xs-12'><h3>Zero results. Search for <samp class='font-red'>" + data.query + "</samp></h3></div></a> </div>";
                },
                suggestion: function(data) {
                    return autocomplete.renderHTML(data);
                },
                pending: `<div><a href='#'>
                <div class='suggestion col-xs-12'><h3 class='text-center'>
                <i class='fa fa-spinner fa-pulse'></i></h3></div></a> </div>`,
            }
        });
        //If using the keyboard following links on select
        this.TypeAhead.bind('typeahead:select', function(ev, suggestion) {
            var element = $('.autocomplete-results [data-inchi="' +
            suggestion.inchikey + '"] a');
            if(element.length){
                element[0].click();
            }
        });
    };
    */

    /**
     * Create an object to allow auto complete
     * @return Object An object containing data to determine search results
     */
    /*
    autocomplete.getData = function() {
        var object = {};
        // return object;
        return this.placeholderDatabase;
    };
    */

    /**
     * Render the HTML for one result to be added to the DOM
     * @param  {Object} result Parse the object and generate HTMl
     * @return {String} HTML string to be added to the Dom
     */
    /*
    autocomplete.renderHTML = function(result) {
        var formula = result.formula.replace(/(\d+)/g, "<sub>$1</sub>");
        var html = '<div data-inchi="' + result.inchikey + '">' +
            '<a href="/mol/' + result.inchikey + '">' +
            '<div class="col-md-2">' +
            '<img class="img-responsive" src="/static/data/svg/' +
                result.inchikey.substring(0, 2) +
                '/' + result.inchikey +
                '.svg" alt="preview">' +
            '</div> ' +
            '<div class="col-md-10">' +
            '<h3>' + result.name.substring(0, 36).toProperCase()+ '</h3>' +
            '<h4>' +  formula + '</h4>' +
        '</div>' +
        '</a>' +
        '</div> ';
         return html;
    };
    */

    return autocomplete;
}();

},{"./util":9}],3:[function(require,module,exports){
'use strict';

/**
 * @fileoverview Any event binding functions.
 * @author JoshJRogan@gmail.com (Josh Rogan)
 * @author ritwikg2004@live.com (Ritwik Gupta)
 * @author jjnaughton93@gmail.com (JJ Naughton)
 */

module.exports = function () {
    //TODO: this is ugly...
    //modernizr/browsernizr tests
    require('browsernizr/test/webgl');
    require('browsernizr/test/storage/localstorage');

    var util = require('./util'),

    //TODO: shouldn't need jquery...
    //Shouldnt even rely on DOM objects on its own! Should be passed nodes
    //$ = require('jquery'),
    //TODO: probably don't need this lib, either
    threeDMole = require('./threeDMole'),
        modernizr = require('browsernizr'),
        molecule = require('./molecule'),
        autocomplete = require('./autocomplete');

    var bindevents = {};

    /**
     * Bind the events to the proper font switching buttons for accessibility.
     */
    bindevents.bindFontSwitchers = function () {
        var increaseButtonSelector = "#increasefont";
        var decreaseButtonSelector = "#reducefont";
        var resetButtonSelector = "#defaultfont";
        $(increaseButtonSelector).on("click vclick", function (event) {
            event.preventDefault();
            util.updateFont(1);
        });
        $(decreaseButtonSelector).on("click vclick", function (event) {
            event.preventDefault();
            util.updateFont(-1);
        });
        $(resetButtonSelector).on("click vclick", function (event) {
            event.preventDefault();
            util.updateFont(0);
        });
    };

    /**
     * Reset the zoom level of the viewer
     * @param  {String} selector an html selector to bind the reset button
     */
    bindevents.moleculeReset = function (selector) {
        if ($(selector).length) {
            $(selector).on("click vclick", function (event) {
                event.preventDefault();
                threeDMole.resetView();
                util.bootstrapFeedback("Molecule viewer reset", "feedback", "fa-crosshairs");
            });
        }
    };

    /**
     * Toggle rotation of the current viewer
     * @param  {String} an html selector to bind to a toggle rotation button
     */
    bindevents.moleculeToggleRotation = function (selector) {
        if ($(selector).length) {
            $(selector).on("click vclick", function (event) {
                event.preventDefault();
                threeDMole.toggleRotation();
                var toggle = $(this).children();
                if (toggle.hasClass('fa-toggle-on')) {
                    toggle.removeClass('fa-toggle-on');
                    toggle.addClass('fa-toggle-off');
                    util.bootstrapFeedback("Rotation deactivated", "feedback", "fa-refresh");
                } else {
                    toggle.removeClass('fa-toggle-off');
                    toggle.addClass('fa-toggle-on');
                    util.bootstrapFeedback("Rotation activated", "feedback", "fa-refresh");
                }
            });
        }
    };

    /**
     *  Handle the clickng of detailed and simple layouts and update
     *  the local storate to reflect the changes.
     */
    bindevents.propertiesViewerHandler = function () {
        console.log('binding...');
        $("#simpleView").on("click vclick", function (event) {
            console.log("clicked simple");
            event.preventDefault();
            $("#molecule-details table .detailed").fadeOut('fast');
            if (modernizr.localstorage) {
                localStorage.setItem("moleculeLayout", "simple");
            }
            util.bootstrapFeedback("Switched to simple view", "feedback", "fa-desktop");
        });
        $("#detailedView").on("click vclick", function (event) {
            console.log("clicked detailed");
            event.preventDefault();
            $("#molecule-details table .detailed").removeClass('hidden');
            $("#molecule-details table .detailed").fadeIn('fast');
            if (modernizr.localstorage) {
                localStorage.setItem("moleculeLayout", "detailed");
            }
            util.bootstrapFeedback("Switched to detailed view ", "feedback", "fa-desktop");
        });
    };

    /**
     * Binds the buttons to change the style of the molecule beeweten spheres,
     * lines or crosses.
     */
    bindevents.moleculeStyleChanger = function () {
        if ($('.changeStyleSphere').length) {
            $('.changeStyleSphere').on("click vclick", function (event) {
                event.preventDefault();
                threeDMole.changeStyle("sphere");
                /*
                //TODO: this was commented out
                    if (modernizr.localstorage) {
                        localStorage.setItem("moleculeViewerlayout", "spheres");
                    }
                */
                util.bootstrapFeedback("Switched to sphere display ", "feedback", "fa-desktop");
            });
        }
        if ($('.changeStyleLine').length) {
            $('.changeStyleLine').on("click vclick", function (event) {
                event.preventDefault();
                threeDMole.changeStyle("line");
                /*
                //TODO: this was commented out
                if (modernizr.localstorage) {
                    localStorage.setItem("moleculeViewerlayout", "lines");
                }
                */
                util.bootstrapFeedback("Switched to line display ", "feedback", "fa-desktop");
            });
        }
        if ($('.changeStyleCross').length) {
            $('.changeStyleCross').on("click vclick", function (event) {
                event.preventDefault();
                threeDMole.changeStyle("cross");
                /*
                TODO: this was commented out...
                if (modernizr.localstorage) {
                    localStorage.setItem("moleculeViewerlayout", "crosses");
                }
                */
                util.bootstrapFeedback("Switched to cross display ", "feedback", "fa-desktop");
            });
        }
        if ($('.changeStyleStick').length) {
            $('.changeStyleStick').on("click vclick", function (event) {
                event.preventDefault();
                threeDMole.changeStyle("stick");
                if (modernizr.localstorage) {
                    localStorage.setItem("moleculeViewerlayout", "sticks");
                }

                util.bootstrapFeedback("Switched to stick display ", "feedback", "fa-desktop");
            });
        }
    };
    /**
     * Deactive the surface of the viewer.
     * @param  {String} an html selector to bind to a toggle surface button
     */
    bindevents.moleculeToggleSurface = function (selector) {
        if ($(selector).length) {
            $(selector).on("click vclick", function (event) {
                event.preventDefault();
                threeDMole.toggleSurface();
                $(this).addClass('disabled btn-success');
                $(this).removeClass('btn-danger');
                $(this).html('Surface Removed');
                util.bootstrapFeedback("Surface removed. Reload to add surface", "feedback", "fa-desktop");
            });
        }
    };

    /**
     * Bind an event to print on click
     * @param  {[type]} selector [description]
     * @return {[type]}          [description]
     */
    bindevents.printButton = function (selector) {
        if ($(selector).length) {
            $(selector).on("click vclick", function (event) {
                event.preventDefault();
                window.print();
                util.bootstrapFeedback("Printing molecule data", "feedback", "fa-print");
            });
        }
    };

    /**
     * Force Loading of AJAX call
     */
    bindevents.ajaxLoadButton = function () {
        $('#molecule-ajax-loader').on('click', function () {
            // TODO: this was commented out; molecules.show_results(10);
            molecule.ajaxSearch();
        });
    };

    /**
     *  When the bottom of the page hits the pagination add more with jquery
     * @return {[type]} [description]
     */
    bindevents.onScollLoadMolecules = function () {
        //TODO: was assigned var waypoints
        $('.pagination, footer').waypoint({
            handler: function handler() {
                if (molecule.requestToLoad()) {
                    molecule.ajaxSearch();
                }
                molecule.showResults(10);
            },
            offset: 'bottom-in-view'
        });
    };

    /**
     * Load more items the longer the person is on the browse page
     */
    bindevents.ajaxTimer = function () {
        //Fire a search on page load no matter what
        molecule.ajaxSearch();
        var ajaxLoader = setInterval(function () {
            //Limit the number of active requests to five and stored 10
            if (molecule.requestToLoad()) {
                if (!molecule.ajaxSearch()) {
                    clearInterval(ajaxLoader);
                }
            }
        }, 1000);
    };

    /**
     * Fire a click if a user taps a result molecule
     */
    bindevents.resultTouchHelper = function () {
        if ($('.result').length) {
            $('.result').on('tap', function () {
                console.log($(this));
            });
        }
    };

    /**
     * Activate the auto complete checker when a user
     * inputs on the selector.
     * @param {Selector} The jquery selector of the input item to watch
     * @return {[type]} [description]
     */
    bindevents.checkAutocomplete = function (inputSelector) {
        $(inputSelector).on('keyup', function () {
            var inputValue = $.trim($(this).val());
            //Run it again to make sure everything is cleared
            setTimeout(function () {
                autocomplete.findMatches(inputValue);
                //Run it again to make sure everything is cleared
                setTimeout(function () {
                    autocomplete.findMatches(inputValue);
                }, 250);
            }, 50);
        });
        //Set timer to auto check
    };

    return bindevents;
}();

},{"./autocomplete":2,"./molecule":6,"./threeDMole":8,"./util":9,"browsernizr":24,"browsernizr/test/storage/localstorage":35,"browsernizr/test/webgl":36}],4:[function(require,module,exports){
"use strict";

/*!
 * classie - class helper functions
 * from bonzo https://github.com/ded/bonzo
 * classie.has(elem, 'my-class') -> true/false
 * classie.add(elem, 'my-new-class')
 * classie.remove(elem, 'my-unwanted-class' )
 * classie.toggle(elem, 'my-class')
 */

/*jshint browser: true, strict: true, undef: true */
/*global define: false */

(function (window) {

  'use strict';

  // class helper functions from bonzo https://github.com/ded/bonzo

  function classReg(className) {
    return new RegExp("(^|\\s+)" + className + "(\\s+|$)");
  }

  // classList support for class management
  // altho to be fair, the api sucks because it won't accept multiple classes at once
  var hasClass, addClass, removeClass;

  if ('classList' in document.documentElement) {
    hasClass = function hasClass(elem, c) {
      return elem.classList.contains(c);
    };
    addClass = function addClass(elem, c) {
      elem.classList.add(c);
    };
    removeClass = function removeClass(elem, c) {
      elem.classList.remove(c);
    };
  } else {
    hasClass = function hasClass(elem, c) {
      return classReg(c).test(elem.className);
    };
    addClass = function addClass(elem, c) {
      if (!hasClass(elem, c)) {
        elem.className = elem.className + ' ' + c;
      }
    };
    removeClass = function removeClass(elem, c) {
      elem.className = elem.className.replace(classReg(c), ' ');
    };
  }

  function toggleClass(elem, c) {
    var fn = hasClass(elem, c) ? removeClass : addClass;
    fn(elem, c);
  }

  var classie = {
    // full names
    hasClass: hasClass,
    addClass: addClass,
    removeClass: removeClass,
    toggleClass: toggleClass,
    // short names
    has: hasClass,
    add: addClass,
    remove: removeClass,
    toggle: toggleClass
  };

  // transport
  if (typeof define === 'function' && define.amd) {
    // AMD
    define(classie);
  } else {
    module.exports = classie;
  }
  /* TODO: how to check for modules..?
  else {
    // browser global
    window.classie = classie;
  }
  */
})(window);

},{}],5:[function(require,module,exports){
'use strict';

//TODO: where was the original masonry file?
//TODO: how to load animeOnScroll as module?
//TODO: for now, as a jquery plugin (remove from vendors...)
//TODO: infact, images loaded, too. Check all vendors!
//TODO: There should be no /vendors....

/**
 * @fileoverview Masonary Related Functions
 * @author JoshJRogan@gmail.com (Josh Rogan)
 * @author ritwikg2004@live.com (Ritwik Gupta)
 * @author jjnaughton93@gmail.com (JJ Naughton)
 */

module.exports = function () {
    var masonary = {
        grid: null,
        defaultOptions: {
            itemSelector: '.grid-item',
            columnWidth: '.grid-sizer',
            container: '.grid'
        }
    };

    /**
     * Initialize a masonary page. All items will be the same height.
     * Therefore we don't need masonary can just use bootsrap coulmns and
     * animate on scroll.
     * @return {[type]} [description]
     */
    masonary.init = function (container, itemSelector, columnWidth) {
        // var options = this.defaultOptions;
        // options.percentPosition = true;
        // this.grid = $('.grid').masonry(options);
        // this.imagesLoadedInit();
        this.animateOnScroll();
    };

    /**
     * Use the images loaded plugin that doesn't load images until they are
     * official loaded into the browser
     */
    masonary.imagesLoadedInit = function () {
        // layout Masonry after each image loads
        this.grid.imagesLoaded().progress(function () {
            masonary.grid.masonry('layout');
        });
    };

    /**
     * Activate animation when the user scrolls to the bottom
     */
    masonary.animateOnScroll = function () {
        new AnimOnScroll(document.getElementById('grid'), {
            minDuration: 0.4,
            maxDuration: 0.7,
            viewportFactor: 0.2
        });
    };
    return masonary;
}();

},{}],6:[function(require,module,exports){
'use strict';

/**
 * @fileoverview Molecule related functions 
 * @author JoshJRogan@gmail.com (Josh Rogan)
 * @author ritwikg2004@live.com (Ritwik Gupta)
 * @author jjnaughton93@gmail.com (JJ Naughton)
 */

module.exports = function () {
    var //$ = require('jquery'),
    bindevents = require('./bindevents'),
        masonary = require('./masonary');
    var molecule = {
        debug: false,
        nextPageNum: 2, //Page number for the next query
        maxPageNum: -1, //Max number of searches to perform
        maxNumResults: -1, //Total number of results
        //Total number of results loaded to the DOM (100 from initial load)
        resultsVisible: 100,
        activeRequests: 0,
        maxActiveRequests: 5, //Threshold of active requests
        results: [], //Loaded reuslts (not displayed)
        maxLoadedResults: 5, //Threshold of number of loaded results
        query: null,
        //How much scrolling is left on the page allowed for additional loads
        scrollLimit: 5000,
        //Total number of requests made (try to limit as much as possible)
        totalRequests: 0
    };

    /**
     * Setup ajax search
     */
    molecule.initAjaxSearch = function () {
        //Get the max page number to determine the limit of searches to perform
        if (this.maxPageNum === -1) {
            this.maxPageNum = parseInt($('.meta-data').attr('data-max-pages'));
        }

        //Get the total number of results we should try to retrieve
        if (this.maxNumResults === -1) {
            this.maxNumResults = parseInt($('.meta-data').attr('data-total-results'));
        }

        //Inital button state
        $('#molecule-ajax-loader').show(300);
        $('.pagination .cogs').hide(300);
    };

    /**
     * Ajax Search Function.
     * As items are returned they are added to the results array
     * and displayed as the user scrolls down.
     * @return {Boolean}             If results are sent
     */
    molecule.ajaxSearch = function () {
        if (this.resultsVisible < this.maxNumResults) {
            var queryObject = this.getQuery();
            this.activeRequests++;
            this.totalRequests++;
            $('#molecule-ajax-loader').hide(300);
            $('.pagination .cogs').show(300);
            $.ajax({
                method: "GET",
                url: "/browse/" + this.nextPageNum + "/",
                data: queryObject
            }).done(function (response) {
                molecule.results.push(response);
                molecule.activeRequests--;
                //Should add 100 or less if last result
                molecule.resultsVisible += 100;
                //If there are not active requests show it as load more
                if (molecule.activeRequests === 0) {
                    $('#molecule-ajax-loader').show(300);
                    $('.pagination .cogs').hide(300);
                }
                molecule.showResults(1);
            }).fail(function () {
                //If the search fails for some reason
                console.log("Search Results Failed"); //Always show this
                return false;
            });
            this.nextPageNum++;
            return true;
        } else {
            //Deactive button and show message that all are loaded
            $('#molecule-ajax-loader').addClass('disabled').html('No More Results!');
            $('.pagination .cogs').hide();
            return false;
        }
    };
    /**
     * Show the results saved from ajax searches
     * @return {[type]} [description]
     */
    molecule.showResults = function (maxResults) {
        if (this.results.length > 0) {
            $.each(this.results.splice(0, maxResults), function (key, value) {
                $('#grid').append(value);
                masonary.animateOnScroll(); //Allow the new items to be animated
                //Add the event to the new items
                bindevents.resultTouchHelper();
            });
        }
    };

    /**
     * Get the current query
     * @return Object The query in an object 
     */
    molecule.getQuery = function () {
        if (this.query === null) {
            var element = $('#molecule-browser');
            this.query = {
                ajax: true,
                query: element.attr('data-query'),
                type: element.attr('data-type')
            };
        }
        return this.query;
    };

    /**
     * Determine if it is a good time to load more 
     * @return Boolean 
     */
    molecule.requestToLoad = function () {
        //User hasn't scrolled enough
        if ($('body').height() - $(window).scrollTop() > this.scrollLimit) {
            return false;
        }
        //To many simulatenous requests
        if (this.activeRequests > this.maxActiveRequests) {
            return false;
        }

        //Too many loaded results
        if (this.results.length > this.maxLoadedResults) {
            return false;
        }
        //Turn to false to disable ajax
        return true;
    };

    /**
     * Determine the type of search 
     * @return {[type]} [description]
     */
    molecule.determineSearchType = function () {};

    return molecule;
}();

},{"./bindevents":3,"./masonary":5}],7:[function(require,module,exports){
'use strict';

/**
 * @fileoverview QR code related functions
 * @author JoshJRogan@gmail.com (Josh Rogan)
 * @author ritwikg2004@live.com (Ritwik Gupta)
 * @author jjnaughton93@gmail.com (JJ Naughton)
 */

module.exports = function () {
    //let $ = require('jquery');

    var config = {
        element: null,
        defaultOptions: {
            render: 'image',
            minVersion: 1,
            maxVersion: 5,
            ecLevel: 'M',
            fill: '#000',
            mode: 2, //Show the label
            label: 'PQR',
            fontname: '"Source Sans Pro",\n            "Helvetica Neue",Helvetica, Arial,sans-serif',
            fontcolor: '#f16b1d' //Primary Orange Color
        }
    },
        qrgen = {};

    /**
     * Add a QR code to a html element with a jquery selector
     * @param {String} The selector the element to place the generated QR Code
     * @param {String} url      The end of the URL to send to
     */
    qrgen.addQRCode = function (selector, url) {
        // var baseURL = htmlutilities.getRootURL();
        if ($(selector).length) {
            config.defaultOptions.text = url;
            $(selector).qrcode(config.defaultOptions);
        } else {
            console.log("Couldn't find the selector", selector);
        }
    };
    return qrgen;
}();

},{}],8:[function(require,module,exports){
'use strict';

/**
 * @fileoverview PQR related 3Dmol manipulations
 * @author JoshJRogan@gmail.com (Josh Rogan)
 * @author ritwikg2004@live.com (Ritwik Gupta)
 * @author jjnaughton93@gmail.com (JJ Naughton)
 */

//TODO: modularize 3dmol lib at the end of its file

module.exports = function () {
    //let $ = require('jquery');
    //TODO: this should be a module..
    //let 3Dmol = require('../3Dmol/3Dmol-nojquery');
    //TODO: these should be vars..
    var threeDMole = {
        allViewers: [],
        rotationTimers: [],
        dataType: 'mol2',
        defaultStyle: 'stick',
        backgroundColor: 0xffffff,
        backgroundOpacity: 1.0,
        rotationTime: 9,
        rotationXDegree: 1, //How many degrees to move every rotationTime
        rotationYDegree: 1,
        showSurface: true
    };

    /**
     * Update viewers
     * @param  {Object} config optional config to override default settings
     */
    threeDMole.initViewers = function () {

        console.log('init firing');
        threeDMole.allViewers = $3Dmol.viewers;
        $.each(threeDMole.allViewers, function (index, viewer) {
            threeDMole.clearBackgrounds(viewer);

            if ($('#dipoleOne').length) {
                var dipoleOne = $('#dipoleOne').data()["value"];
                var dipoleTwo = $('#dipoleTwo').data()["value"];
                var dipoleThree = $('#dipoleThree').data()["value"];

                threeDMole.addArrow(viewer, dipoleOne, dipoleTwo, dipoleThree);
                console.log(dipoleOne);
                viewer.render();
            }
            // pqr.threeDMole.rotate(viewer);
        });
    };

    /**
     * Set all of the background color alpha channel to 0. Cannot be done
     * with data attributes.
     * @param  {GLviewer}
     */
    threeDMole.clearBackgrounds = function (viewer) {
        viewer.setBackgroundColor(threeDMole.backgroundColor, 0);
        viewer.resize();
        viewer.render();
    };

    /**
     * Rotate a molecule viewer
     * @param  {GLViewer}
     */
    threeDMole.rotate = function (viewer) {
        var rotationTimers = window.setInterval(function () {
            viewer.rotate(threeDMole.rotationYDegree, 'y');
            viewer.rotate(threeDMole.rotationXDegree, 'x');
            viewer.render();
        }, threeDMole.rotationTime, viewer);
        threeDMole.rotationTimers.push(rotationTimers);
    };

    /**
     * Toggle the rotation of the viewer. Only hanldes one viewer.
     * @param  {GLViewer} the viewer to toggle the rotation
     */
    threeDMole.toggleRotation = function () {
        var rotationTimer = threeDMole.rotationTimers.pop();
        if (rotationTimer !== undefined) {
            clearInterval(rotationTimer);
        } else {
            threeDMole.rotate(threeDMole.allViewers[0]);
        }
    };

    /**
     * Update the surface color to the correct value
     * @param  {GLViewer} the viewer to set the surfaceColor on
     */
    threeDMole.setSurfaceColor = function (viewer) {};

    /**
     * Toggle the surface of this viewer.
     * @param  {GLViewer}
     */
    threeDMole.toggleSurface = function (viewer) {
        viewer = typeof viewer !== 'undefined' ? viewer : threeDMole.allViewers[0];
        threeDMole.removeSurface(viewer);
    };

    /**
     * Remove all of the surfaces for this viewere
     * @param  {GLViewer}
     */
    threeDMole.removeSurface = function (viewer) {
        viewer.removeAllSurfaces();
        viewer.render();
    };

    /**
     * Reset the viewer to the default zoom level
     */
    threeDMole.resetView = function () {
        threeDMole.allViewers[0].zoomTo();
    };

    threeDMole.addArrow = function (viewer, x, y, z) {
        threeDMole.allViewers[0].addArrow({
            end: new $3Dmol.Vector3(x, y, z),
            color: "black", wireframe: false
        });
        threeDMole.allViewers[0].render();
    };

    /**
     * Change the layout style of the selected viewer
     * @param  {String} newStyle - the type of style to change this viewer to
     */
    threeDMole.changeStyle = function (newStyle) {
        //Currently only getting the first viewer that exists
        var viewer = threeDMole.allViewers[0];
        if (viewer) {
            if (newStyle === "sphere") {
                viewer.setStyle({}, {
                    sphere: {}
                });
            } else if (newStyle === "stick") {
                viewer.setStyle({}, {
                    stick: {}
                });
            } else if (newStyle === "cross") {
                viewer.setStyle({}, {
                    cross: {}
                });
            } else if (newStyle === "line") {
                viewer.setStyle({}, {
                    line: {}
                });
            } else if (newStyle === "ballstick") {
                viewer.setStyle({}, {
                    stick: { radius: 0.15 },
                    sphere: { radius: 0.40 }
                });
            }
            viewer.render();
        }
    };

    return threeDMole;
}();

},{}],9:[function(require,module,exports){
'use strict';

/**
 * @fileoverview PQR related misc JS functions
 * @author JoshJRogan@gmail.com (Josh Rogan)
 * @author ritwikg2004@live.com (Ritwik Gupta)
 * @author jjnaughton93@gmail.com (JJ Naughton)
 */

module.exports = function () {
    //TODO: boostrap plugins seem unnecessary (and depend on jquery)
    //require('bootstrap-notify');
    require('bootstrap');
    var //$ = require('jquery'), //jquery already included with 3dmol
    accessibility = require('../helpers/accessibility'),
        classie = require('./classie'),
        modernizr = require('browsernizr');
    var util = {
        elementSymbols: ['h', 'he', 'li', 'be', 'b', 'c', 'n', 'o', 'f', 'ne', 'na', 'mg', 'al', 'si', 'p', 's', 'cl', 'ar', 'k', 'ca', 'sc', 'ti', 'v', 'cr', 'mn', 'fe', 'co', 'ni', 'cu', 'zn', 'ga', 'ge', 'as', 'se', 'br', 'kr', 'rb', 'sr', 'y', 'zr', 'nb', 'mo', 'tc', 'ru', 'rh', 'pd', 'ag', 'cd', 'in', 'sn', 'sb', 'te', 'i', 'xe', 'cs', 'ba', 'la', 'ce', 'pr', 'nd', 'pm', 'sm', 'eu', 'gd', 'tb', 'dy', 'ho', 'er', 'tm', 'yb', 'lu', 'hf', 'ta', 'w', 're', 'os', 'ir', 'pt', 'au', 'hg', 'tl', 'pb', 'bi', 'po', 'at', 'rn', 'fr', 'ra', 'ac', 'th', 'pa', 'u', 'np', 'pu', 'am', 'cm', 'bk', 'cf', 'es', 'fm', 'md', 'no', 'lr', 'rf', 'db', 'sg', 'bh', 'hs', 'mt', 'ds', 'rg', 'cp', 'uut', 'uuq', 'uup', 'uuh', 'uus', 'uuo']
    };

    /**
     * Get the INCHI key. Used to generate the QR Code
     * @return {String} The INCHI key value in the properties table
     */

    util.getINCHIKey = function () {
        var key = "";
        if ($(".molecule-inchikey").length) {
            key = $(".molecule-inchikey").children().next().html();
        } else {
            return false;
        }
        return $.trim(key);
    };

    /**
     * Reterieve the QR code url. Try to get the short URL first, then
     * the long url, finally by the base INCHI key. If all fails redirect
     * to the home page.
     * @return {String} The entire URL for the QR Code
     */

    util.getQRURL = function () {
        var DOI_BASE = "http://doi.org/",
            url = null;
        if ($(".molecule-doi-short").length) {
            url = DOI_BASE + $(".molecule-doi-short").text();
        } else if ($(".molecule-doi-long").length) {
            url = DOI_BASE + $(".molecule-doi-long").text();
        } else if (this.getINCHIKey()) {
            url = util.getRootURL();
            url += "/mol/" + this.getINCHIKey();
        } else {
            return util.getRootURL(); //Default to home page
        }
        return $.trim(url);
    };

    /**
     * Attempt to restore the users last font size.
     * @return {String} Font size
     */
    util.initFontSize = function () {
        accessibility.changeFontSize(util.getCurrentFontSize());
    };

    /**
     * Increase or decrease the base font size.
     * @param {int} type either 1 = increase, 0 = default, -1 = decrease
     */
    util.updateFont = function (type) {
        var newBaseSize = null;
        if (type === -1) {
            newBaseSize = accessibility.fontSizeChanger(-1, util.getCurrentFontSize());
            util.bootstrapFeedback("Decrease Font Size to " + newBaseSize, "feedback", "fa-font");
        } else if (type === 0) {
            newBaseSize = accessibility.changeFontSize(accessibility.defaultFontSize);
            util.bootstrapFeedback("Reset Font Size to " + newBaseSize, "feedback", "fa-font");
        } else if (type === 1) {
            newBaseSize = accessibility.fontSizeChanger(1, util.getCurrentFontSize());
            util.bootstrapFeedback("Increased Font Size to " + newBaseSize, "feedback", "fa-font");
        }
        if (modernizr.localstorage) {
            localStorage.setItem("baseFontSize", newBaseSize);
        }
        //Send PQR Message
    };

    /**
     * Get the current font size
     * @return {String} The current font size
     */

    util.getCurrentFontSize = function () {
        if (modernizr.localstorage) {
            var fontSize = localStorage.getItem("baseFontSize");
            if (fontSize !== null) {
                return fontSize;
            } else {
                localStorage.setItem("baseFontSize", accessibility.defaultFontSize);
                return accessibility.defaultFontSize;
            }
        } else {
            return accessibility.defaultFontSize;
        }
    };

    /**
     * If there is no WebGL redirect the user.
     */
    util.redirectNoWebGL = function () {
        if (!modernizr.webGL) {
            var msg = "<div class='alert alert-danger' role='alert'> <strong> <a href='http://get.webgl.org/'>WebGL</a> </strong> is not supported on your device! </div";
            $("#main").prepend(msg);
            //Currently sending them to get web gl page
            window.location.replace("https://get.webgl.org/");
        }
    };

    /**
     * Updates the property viewer if there was a pervious value in localstorage
     */
    util.updatePropertiesViewer = function () {
        if (modernizr.localstorage) {
            if (localStorage.getItem("moleculeLayout") === "detailed") {
                //Probably not necessary
                $("#molecule-details table .detailed").removeClass("hidden");
            } else {
                $("#molecule-details table .detailed").addClass("hidden");
            }
        }
    };

    /**
     * Update the element name size to fit on the line
     * @param  String selector Jquery selector string
     * @param  Objet options  Contains the options for the quickfit plugin
     */
    util.initQuickFit = function (selector, options) {

        //where is this supposed to come from? Because it doesn't... vvv
        /*
        $(selector).quickfit(options);
        //Update on window resize
        $(window).resize(function() {
            $(selector).quickfit(options);
        });
        */
    };

    /**
     * Add a fille effect to the forms on focus and remove on blur
     * @return {[type]} [description]
     */
    util.formStyleHelper = function () {
        [].slice.call(document.querySelectorAll('.input-field')).forEach(function (inputEl) {
            // in case the input is already filled..
            if (inputEl.value.trim() !== '') {
                classie.add(inputEl.parentNode, 'input--filled');
            }

            // events:
            inputEl.addEventListener('focus', onInputFocus);
            inputEl.addEventListener('blur', onInputBlur);
        });

        function onInputFocus(ev) {
            classie.add(ev.target.parentNode.parentNode, 'input--filled');
        }

        function onInputBlur(ev) {
            if (ev.target.value.trim() === '') {
                classie.remove(ev.target.parentNode.parentNode, 'input--filled');
                classie.remove(ev.target.parentNode, 'input--filled');
            }
        }
    }();

    /**
     * Returns true if the string is likely an inchi key
     * @param  {[type]}  string [description]
     * @return {Boolean}        [description]
     * @source https://gist.github.com/lsauer/1312860 (slightly modified)
     */
    util.isINCHI = function (string) {
        string = $.trim(string).toLowerCase();
        return 27 === string.length && '-' === string[14] && '-' === string[25] && !!string.match(/^([0-9A-Za-z\-]+)$/);
    };

    /**
     * Returns true if the string is likely a formula
     * @param  {[type]}  string [description]
     * @return {Boolean}        [description]
     */
    util.isFormula = function (string) {
        string = $.trim(string).toLowerCase();
        var numbers = string.match(/\d+/g);
        var letters = string.match(/[a-zA-Z]+/g);
        var isFormula = true;
        //Has Numbers
        if (numbers !== null) {
            if (letters !== null) {
                $.each(letters, function (index, value) {
                    if (!util.isSymbol(value)) {
                        isFormula = false;
                        return false;
                    }
                });
            } else {
                return false;
            }
        } else {
            //No Number
            if (letters !== null) {
                $.each(letters, function (index, value) {
                    if (!util.isSymbol(value)) {
                        isFormula = false;
                        return false;
                    }
                });
                return isFormula;
            }
            return false;
        }
        return isFormula;
    };

    /**
     * [isSymbol description]
     * @param  {[type]}  symbol [description]
     * @return {Boolean}        [description]
     */
    util.isSymbol = function (symbol) {
        symbol = $.trim(symbol).toLowerCase();
        return $.inArray(symbol, this.elementSymbols) !== -1;
    };

    //TODO: fix how this is set up
    util.feedbackNum = 0; //Counter for the number of feedback items
    util.feedbackTimeout = 1500; //Time for the feedback message to stay up
    //Flag to turn on or off the feedback closer event
    util.activeFeedbackCloser = false;
    util.debug = true;

    /**
     * Get the base URL of the current page.
     * If you are on 'http://melwood.jcubedworld.com/baseball/?type=dog'
     * 'http://melwood.jcubedworld.com' will be returned.
     * The protocal and domain will be returned.
     * @return {String} The base URL of the current page including the protocal. 
     */
    util.getRootURL = function () {
        if (!location.origin) {
            location.origin = location.protocol + "//" + location.host;
        }
        return location.origin;
    };
    /**
     * When using anchors have smooth scrolling
     * 
     */
    util.smoothScrollingAnchors = function () {
        $('a[href^="#"]').on('click', function (e) {
            e.preventDefault();
            var target = this.hash;
            var $target = $(target);
            $('html, body').stop().animate({
                'scrollTop': $target.offset().top
            }, 900, 'swing', function () {
                window.location.hash = target;
            });
        });
    };

    /**
     * Display bootstrap like notificaitons for a brief amount of time
     * @param  String message The message for the bootstrap feedback
     * @param  String type The Type/Style of the message
     * @param  Selector selector JQuery selector for the html message to be added
     * @param  String icon_class A font awesome icon class
     */
    util.bootstrapFeedback = function (message, type, iconClass) {
        var html = '<i class="fa ' + iconClass + '"></i> ' + message;
        //TODO: replace bootstrap-notify
        $('.top-right').notify({
            message: {
                html: html
            },
            type: type,
            fadeOut: {
                enabled: true,
                delay: util.feedbackTimeout
            }
            /*
            var $message = $('<i class="fa ' + iconClass + '"></i> ' + message); 
            $('.top-right').append($message);
            $message.slideDown(300, function() {
                window.setTimeout(function() {
                    $message.slideUp(300, function() {
                        $message.remove();
                    });
                }, util.feedbackTimeout);
            });
             */
        }).show();
    };
    /**
     * Keep the footer at the bottom of the page regardless of the content size.
     * @param  {Selector} footer_selector  JQuery Selector for the footer
     * @param  {Selector} content_selector JQuery Selector for the main content
     */
    util.footerToBottom = function (footerSelector, contentSelector) {
        if ($(footerSelector).length && $(contentSelector).length) {
            this.updateFooterHeight(footerSelector, contentSelector);
            setInterval(function () {
                util.updateFooterHeight(footerSelector, contentSelector);
            }, 200);
        }
    };
    /**
     * Update the margin above the footer to allow more space. Helper function for 
     * footerToBottom
     * @param  {Integer} window_height  Height of the window 
     * @param  {Integer} footer_height  Height of the footer
     * @param  {Integer} content_height Height of the content
     */
    util.updateFooterHeight = function (footerSelector) {
        var windowHeight = $(window).height();
        var footerHeight = $(footerSelector).height();
        var footerTop = $(footerSelector).position().top + footerHeight;
        if (footerTop < windowHeight) {
            $(footerSelector).css('margin-top', 10 + (windowHeight - footerTop) + 'px');
        } else {
            $(footerSelector).css('margin-top', '10px');
        }
    };
    /**
     * Fire an event when content is changed
     * @param  {Function} callback [description]
     * @return {[type]}            [description]
     */
    // jQuery.fn.contentChange = function(callback){
    //     var elms = jQuery(this);
    //     elms.each(
    //       function(i){
    //         var elm = jQuery(this);
    //         elm.data("lastContents", elm.html());
    //         window.watchContentChange = window.watchContentChange ?
    //              window.watchContentChange : [];
    //         window.watchContentChange.push({"element": elm,
    //              "callback": callback});
    //       }
    //     )
    //     return elms;
    //   }
    //   setInterval(function(){
    //     if(window.watchContentChange){
    //       for( i in window.watchContentChange){
    //         if(window.watchContentChange[i].element.data("lastContents")
    //                !== window.watchContentChange[i].element.html()){
    //           window.watchContentChange[i]
    //              .callback.apply(window.watchContentChange[i].element);
    //           window.watchContentChange[i]
    //              .element.data("lastContents",
    //                  window.watchContentChange[i].element.html())
    //         };
    //       }
    //     }
    //   },500);
    util.toProperCase = function () {
        String.prototype.toProperCase = function () {
            return this.replace(/\w\S*/g, function (txt) {
                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
            });
        };
    }();

    /**
     * When a tooltip toggle is click activate the tooltip.
     */
    util.FullToolTipOptIn = function () {
        $('[data-toggle="tooltip"]').on("click", function (event) {
            event.preventDefault();
        });
        $(function () {
            //where is this supposed to come from? Because it doesn't... vvv
            $('[data-toggle="tooltip"]').tooltip(); //Opt in to tool tips
        });
    };

    return util;
}();

},{"../helpers/accessibility":1,"./classie":4,"bootstrap":11,"browsernizr":24}],10:[function(require,module,exports){
'use strict';
//TODO: For 3dmol, at least on personal copy: module-ize
//TODO: sub a PR for 3dmol repo, publish to NPM
//TODO: all lib functions should be module-system agnostic...
//So set to var and use a mod export like mithril does...
//add 'use strict' to everything
//remove vendors garbage asap
//TODO: add unit simple unit tests and hook up with gulp
//where is classie used...

/**
 * @fileoverview main entry point for pqr site.
 * @author JoshJRogan@gmail.com (Josh Rogan)
 * @author ritwikg2004@live.com (Ritwik Gupta)
 * @author jjnaughton93@gmail.com (JJ Naughton)
 */

//TODO: this is ugly...
//modernizr/browsernizr tests

require('browsernizr/test/webgl');
require('browsernizr/test/storage/localstorage');

var //$ = require('jquery'),
modernizr = require('browsernizr'),
    bindevents = require('./libs/bindevents'),
    autocomplete = require('./libs/autocomplete'),
    qrgen = require('./libs/qrgen'),
    masonary = require('./libs/masonary'),
    molecule = require('./libs/molecule'),
    util = require('./libs/util'),
    threeDMole = require('./libs/threeDMole');

/**
 * Initializes the application.
 */
function init() {
    util.FullToolTipOptIn();
    util.initFontSize();
    bindevents.bindFontSwitchers();
    //TODO: what is this:
    // htmlutilities.footerToBottom('footer', '#main');
    //TODO: lots of stuff runs on all conditions?
    if ($("#main").hasClass("page-home")) {
        console.log('has page home');
        threeDMole.initViewers();
        /*
         //is this necessary
         //TODO: is this broken on dev?
        bindevents.moleculeReset('#reset-molecule');
        bindevents.moleculeToggleRotation('#rotationSwitch');
         */
        //autocomplete.init();
        util.updatePropertiesViewer();
        //TODO: should probably pass in DOM instead of accessors...
        //at least should pass in vars instead of strings.
        util.initQuickFit("#molecule-name", { min: 12, max: 36 });
        bindevents.propertiesViewerHandler();
        bindevents.moleculeStyleChanger();
        bindevents.moleculeReset('#reset-molecule');
        bindevents.moleculeToggleRotation('#rotationSwitch');
        bindevents.moleculeToggleSurface('.surfaceSwitch');
        bindevents.printButton('#print-molecule');
    } else if ($("#main").hasClass("page-molecule")) {
        console.log('has page molecule');
        threeDMole.initViewers();
        util.updatePropertiesViewer();
        //TODO: should probably pass in DOM instead of accessors...
        //at least should pass in vars instead of strings.
        util.initQuickFit("#molecule-name", { min: 12, max: 36 });
        bindevents.propertiesViewerHandler();
        bindevents.moleculeStyleChanger();
        bindevents.moleculeReset('#reset-molecule');
        bindevents.moleculeToggleRotation('#rotationSwitch');
        bindevents.moleculeToggleSurface('.surfaceSwitch');
        bindevents.printButton('#print-molecule');
        qrgen.addQRCode("#qrcode", util.getQRURL());
        qrgen.addQRCode("#qr-print-wrapper", util.getQRURL());
    } else if ($("#main").hasClass("page-browse")) {
        console.log('has page browse');
        //autocomplete.init();
        //Only Start AJAX if there are results
        if ($('#molecule-browser').attr('data-has-results') === "true") {
            console.log('has molecule browser');
            masonary.init();
            molecule.initAjaxSearch();
            $('.molecule-results-masonary').removeClass('translucent');
            bindevents.ajaxTimer();
            bindevents.onScollLoadMolecules();
            bindevents.ajaxLoadButton();
            bindevents.resultTouchHelper();
        }
    }
}

// onready: init
$(document).ready(function () {
    console.log('ready');
    //no webgl support
    if (!modernizr.localstorage || !modernizr.webgl) {
        util.redirectNoWebGL();
    } else {
        init();
    }
});

},{"./libs/autocomplete":2,"./libs/bindevents":3,"./libs/masonary":5,"./libs/molecule":6,"./libs/qrgen":7,"./libs/threeDMole":8,"./libs/util":9,"browsernizr":24,"browsernizr/test/storage/localstorage":35,"browsernizr/test/webgl":36}],11:[function(require,module,exports){
// This file is autogenerated via the `commonjs` Grunt task. You can require() this file in a CommonJS environment.
require('../../js/transition.js')
require('../../js/alert.js')
require('../../js/button.js')
require('../../js/carousel.js')
require('../../js/collapse.js')
require('../../js/dropdown.js')
require('../../js/modal.js')
require('../../js/tooltip.js')
require('../../js/popover.js')
require('../../js/scrollspy.js')
require('../../js/tab.js')
require('../../js/affix.js')
},{"../../js/affix.js":12,"../../js/alert.js":13,"../../js/button.js":14,"../../js/carousel.js":15,"../../js/collapse.js":16,"../../js/dropdown.js":17,"../../js/modal.js":18,"../../js/popover.js":19,"../../js/scrollspy.js":20,"../../js/tab.js":21,"../../js/tooltip.js":22,"../../js/transition.js":23}],12:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: affix.js v3.3.6
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options)

    this.$target = $(this.options.target)
      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

    this.$element     = $(element)
    this.affixed      = null
    this.unpin        = null
    this.pinnedOffset = null

    this.checkPosition()
  }

  Affix.VERSION  = '3.3.6'

  Affix.RESET    = 'affix affix-top affix-bottom'

  Affix.DEFAULTS = {
    offset: 0,
    target: window
  }

  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
    var scrollTop    = this.$target.scrollTop()
    var position     = this.$element.offset()
    var targetHeight = this.$target.height()

    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false

    if (this.affixed == 'bottom') {
      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'
      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'
    }

    var initializing   = this.affixed == null
    var colliderTop    = initializing ? scrollTop : position.top
    var colliderHeight = initializing ? targetHeight : height

    if (offsetTop != null && scrollTop <= offsetTop) return 'top'
    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'

    return false
  }

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset
    this.$element.removeClass(Affix.RESET).addClass('affix')
    var scrollTop = this.$target.scrollTop()
    var position  = this.$element.offset()
    return (this.pinnedOffset = position.top - scrollTop)
  }

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1)
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var height       = this.$element.height()
    var offset       = this.options.offset
    var offsetTop    = offset.top
    var offsetBottom = offset.bottom
    var scrollHeight = Math.max($(document).height(), $(document.body).height())

    if (typeof offset != 'object')         offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)

    if (this.affixed != affix) {
      if (this.unpin != null) this.$element.css('top', '')

      var affixType = 'affix' + (affix ? '-' + affix : '')
      var e         = $.Event(affixType + '.bs.affix')

      this.$element.trigger(e)

      if (e.isDefaultPrevented()) return

      this.affixed = affix
      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

      this.$element
        .removeClass(Affix.RESET)
        .addClass(affixType)
        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')
    }

    if (affix == 'bottom') {
      this.$element.offset({
        top: scrollHeight - height - offsetBottom
      })
    }
  }


  // AFFIX PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.affix')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.affix

  $.fn.affix             = Plugin
  $.fn.affix.Constructor = Affix


  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
      var data = $spy.data()

      data.offset = data.offset || {}

      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom
      if (data.offsetTop    != null) data.offset.top    = data.offsetTop

      Plugin.call($spy, data)
    })
  })

}(jQuery);

},{}],13:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: alert.js v3.3.6
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]'
  var Alert   = function (el) {
    $(el).on('click', dismiss, this.close)
  }

  Alert.VERSION = '3.3.6'

  Alert.TRANSITION_DURATION = 150

  Alert.prototype.close = function (e) {
    var $this    = $(this)
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = $(selector)

    if (e) e.preventDefault()

    if (!$parent.length) {
      $parent = $this.closest('.alert')
    }

    $parent.trigger(e = $.Event('close.bs.alert'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger('closed.bs.alert').remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent
        .one('bsTransitionEnd', removeElement)
        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :
      removeElement()
  }


  // ALERT PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.alert')

      if (!data) $this.data('bs.alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.alert

  $.fn.alert             = Plugin
  $.fn.alert.Constructor = Alert


  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery);

},{}],14:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: button.js v3.3.6
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function (element, options) {
    this.$element  = $(element)
    this.options   = $.extend({}, Button.DEFAULTS, options)
    this.isLoading = false
  }

  Button.VERSION  = '3.3.6'

  Button.DEFAULTS = {
    loadingText: 'loading...'
  }

  Button.prototype.setState = function (state) {
    var d    = 'disabled'
    var $el  = this.$element
    var val  = $el.is('input') ? 'val' : 'html'
    var data = $el.data()

    state += 'Text'

    if (data.resetText == null) $el.data('resetText', $el[val]())

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      $el[val](data[state] == null ? this.options[state] : data[state])

      if (state == 'loadingText') {
        this.isLoading = true
        $el.addClass(d).attr(d, d)
      } else if (this.isLoading) {
        this.isLoading = false
        $el.removeClass(d).removeAttr(d)
      }
    }, this), 0)
  }

  Button.prototype.toggle = function () {
    var changed = true
    var $parent = this.$element.closest('[data-toggle="buttons"]')

    if ($parent.length) {
      var $input = this.$element.find('input')
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked')) changed = false
        $parent.find('.active').removeClass('active')
        this.$element.addClass('active')
      } else if ($input.prop('type') == 'checkbox') {
        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false
        this.$element.toggleClass('active')
      }
      $input.prop('checked', this.$element.hasClass('active'))
      if (changed) $input.trigger('change')
    } else {
      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))
      this.$element.toggleClass('active')
    }
  }


  // BUTTON PLUGIN DEFINITION
  // ========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.button')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.button', (data = new Button(this, options)))

      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  var old = $.fn.button

  $.fn.button             = Plugin
  $.fn.button.Constructor = Button


  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


  // BUTTON DATA-API
  // ===============

  $(document)
    .on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      var $btn = $(e.target)
      if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
      Plugin.call($btn, 'toggle')
      if (!($(e.target).is('input[type="radio"]') || $(e.target).is('input[type="checkbox"]'))) e.preventDefault()
    })
    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
    })

}(jQuery);

},{}],15:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: carousel.js v3.3.6
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function (element, options) {
    this.$element    = $(element)
    this.$indicators = this.$element.find('.carousel-indicators')
    this.options     = options
    this.paused      = null
    this.sliding     = null
    this.interval    = null
    this.$active     = null
    this.$items      = null

    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))

    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element
      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))
      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))
  }

  Carousel.VERSION  = '3.3.6'

  Carousel.TRANSITION_DURATION = 600

  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true,
    keyboard: true
  }

  Carousel.prototype.keydown = function (e) {
    if (/input|textarea/i.test(e.target.tagName)) return
    switch (e.which) {
      case 37: this.prev(); break
      case 39: this.next(); break
      default: return
    }

    e.preventDefault()
  }

  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false)

    this.interval && clearInterval(this.interval)

    this.options.interval
      && !this.paused
      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

    return this
  }

  Carousel.prototype.getItemIndex = function (item) {
    this.$items = item.parent().children('.item')
    return this.$items.index(item || this.$active)
  }

  Carousel.prototype.getItemForDirection = function (direction, active) {
    var activeIndex = this.getItemIndex(active)
    var willWrap = (direction == 'prev' && activeIndex === 0)
                || (direction == 'next' && activeIndex == (this.$items.length - 1))
    if (willWrap && !this.options.wrap) return active
    var delta = direction == 'prev' ? -1 : 1
    var itemIndex = (activeIndex + delta) % this.$items.length
    return this.$items.eq(itemIndex)
  }

  Carousel.prototype.to = function (pos) {
    var that        = this
    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))

    if (pos > (this.$items.length - 1) || pos < 0) return

    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, "slid"
    if (activeIndex == pos) return this.pause().cycle()

    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))
  }

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true)

    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end)
      this.cycle(true)
    }

    this.interval = clearInterval(this.interval)

    return this
  }

  Carousel.prototype.next = function () {
    if (this.sliding) return
    return this.slide('next')
  }

  Carousel.prototype.prev = function () {
    if (this.sliding) return
    return this.slide('prev')
  }

  Carousel.prototype.slide = function (type, next) {
    var $active   = this.$element.find('.item.active')
    var $next     = next || this.getItemForDirection(type, $active)
    var isCycling = this.interval
    var direction = type == 'next' ? 'left' : 'right'
    var that      = this

    if ($next.hasClass('active')) return (this.sliding = false)

    var relatedTarget = $next[0]
    var slideEvent = $.Event('slide.bs.carousel', {
      relatedTarget: relatedTarget,
      direction: direction
    })
    this.$element.trigger(slideEvent)
    if (slideEvent.isDefaultPrevented()) return

    this.sliding = true

    isCycling && this.pause()

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active')
      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])
      $nextIndicator && $nextIndicator.addClass('active')
    }

    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, "slid"
    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type)
      $next[0].offsetWidth // force reflow
      $active.addClass(direction)
      $next.addClass(direction)
      $active
        .one('bsTransitionEnd', function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () {
            that.$element.trigger(slidEvent)
          }, 0)
        })
        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)
    } else {
      $active.removeClass('active')
      $next.addClass('active')
      this.sliding = false
      this.$element.trigger(slidEvent)
    }

    isCycling && this.cycle()

    return this
  }


  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.carousel')
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
      var action  = typeof option == 'string' ? option : options.slide

      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.pause().cycle()
    })
  }

  var old = $.fn.carousel

  $.fn.carousel             = Plugin
  $.fn.carousel.Constructor = Carousel


  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }


  // CAROUSEL DATA-API
  // =================

  var clickHandler = function (e) {
    var href
    var $this   = $(this)
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7
    if (!$target.hasClass('carousel')) return
    var options = $.extend({}, $target.data(), $this.data())
    var slideIndex = $this.attr('data-slide-to')
    if (slideIndex) options.interval = false

    Plugin.call($target, options)

    if (slideIndex) {
      $target.data('bs.carousel').to(slideIndex)
    }

    e.preventDefault()
  }

  $(document)
    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)
    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this)
      Plugin.call($carousel, $carousel.data())
    })
  })

}(jQuery);

},{}],16:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: collapse.js v3.3.6
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
                           '[data-toggle="collapse"][data-target="#' + element.id + '"]')
    this.transitioning = null

    if (this.options.parent) {
      this.$parent = this.getParent()
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger)
    }

    if (this.options.toggle) this.toggle()
  }

  Collapse.VERSION  = '3.3.6'

  Collapse.TRANSITION_DURATION = 350

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var activesData
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

    if (actives && actives.length) {
      activesData = actives.data('bs.collapse')
      if (activesData && activesData.transitioning) return
    }

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    if (actives && actives.length) {
      Plugin.call(actives, 'hide')
      activesData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0)
      .attr('aria-expanded', true)

    this.$trigger
      .removeClass('collapsed')
      .attr('aria-expanded', true)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('')
      this.transitioning = 0
      this.$element
        .trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse in')
      .attr('aria-expanded', false)

    this.$trigger
      .addClass('collapsed')
      .attr('aria-expanded', false)

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .removeClass('collapsing')
        .addClass('collapse')
        .trigger('hidden.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }

  Collapse.prototype.getParent = function () {
    return $(this.options.parent)
      .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
      .each($.proxy(function (i, element) {
        var $element = $(element)
        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
      }, this))
      .end()
  }

  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in')

    $element.attr('aria-expanded', isOpen)
    $trigger
      .toggleClass('collapsed', !isOpen)
      .attr('aria-expanded', isOpen)
  }

  function getTargetFromTrigger($trigger) {
    var href
    var target = $trigger.attr('data-target')
      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

    return $(target)
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.collapse

  $.fn.collapse             = Plugin
  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this   = $(this)

    if (!$this.attr('data-target')) e.preventDefault()

    var $target = getTargetFromTrigger($this)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()

    Plugin.call($target, option)
  })

}(jQuery);

},{}],17:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: dropdown.js v3.3.6
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop'
  var toggle   = '[data-toggle="dropdown"]'
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.VERSION = '3.3.6'

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = selector && $(selector)

    return $parent && $parent.length ? $parent : $this.parent()
  }

  function clearMenus(e) {
    if (e && e.which === 3) return
    $(backdrop).remove()
    $(toggle).each(function () {
      var $this         = $(this)
      var $parent       = getParent($this)
      var relatedTarget = { relatedTarget: this }

      if (!$parent.hasClass('open')) return

      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return

      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this.attr('aria-expanded', 'false')
      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))
    })
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $(document.createElement('div'))
          .addClass('dropdown-backdrop')
          .insertAfter($(this))
          .on('click', clearMenus)
      }

      var relatedTarget = { relatedTarget: this }
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this
        .trigger('focus')
        .attr('aria-expanded', 'true')

      $parent
        .toggleClass('open')
        .trigger($.Event('shown.bs.dropdown', relatedTarget))
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive && e.which != 27 || isActive && e.which == 27) {
      if (e.which == 27) $parent.find(toggle).trigger('focus')
      return $this.trigger('click')
    }

    var desc = ' li:not(.disabled):visible a'
    var $items = $parent.find('.dropdown-menu' + desc)

    if (!$items.length) return

    var index = $items.index(e.target)

    if (e.which == 38 && index > 0)                 index--         // up
    if (e.which == 40 && index < $items.length - 1) index++         // down
    if (!~index)                                    index = 0

    $items.eq(index).trigger('focus')
  }


  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.dropdown')

      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.dropdown

  $.fn.dropdown             = Plugin
  $.fn.dropdown.Constructor = Dropdown


  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)

}(jQuery);

},{}],18:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: modal.js v3.3.6
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function (element, options) {
    this.options             = options
    this.$body               = $(document.body)
    this.$element            = $(element)
    this.$dialog             = this.$element.find('.modal-dialog')
    this.$backdrop           = null
    this.isShown             = null
    this.originalBodyPad     = null
    this.scrollbarWidth      = 0
    this.ignoreBackdropClick = false

    if (this.options.remote) {
      this.$element
        .find('.modal-content')
        .load(this.options.remote, $.proxy(function () {
          this.$element.trigger('loaded.bs.modal')
        }, this))
    }
  }

  Modal.VERSION  = '3.3.6'

  Modal.TRANSITION_DURATION = 300
  Modal.BACKDROP_TRANSITION_DURATION = 150

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  }

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget)
  }

  Modal.prototype.show = function (_relatedTarget) {
    var that = this
    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

    this.$element.trigger(e)

    if (this.isShown || e.isDefaultPrevented()) return

    this.isShown = true

    this.checkScrollbar()
    this.setScrollbar()
    this.$body.addClass('modal-open')

    this.escape()
    this.resize()

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
      })
    })

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade')

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body) // don't move modals dom position
      }

      that.$element
        .show()
        .scrollTop(0)

      that.adjustDialog()

      if (transition) {
        that.$element[0].offsetWidth // force reflow
      }

      that.$element.addClass('in')

      that.enforceFocus()

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

      transition ?
        that.$dialog // wait for modal to slide in
          .one('bsTransitionEnd', function () {
            that.$element.trigger('focus').trigger(e)
          })
          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
        that.$element.trigger('focus').trigger(e)
    })
  }

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault()

    e = $.Event('hide.bs.modal')

    this.$element.trigger(e)

    if (!this.isShown || e.isDefaultPrevented()) return

    this.isShown = false

    this.escape()
    this.resize()

    $(document).off('focusin.bs.modal')

    this.$element
      .removeClass('in')
      .off('click.dismiss.bs.modal')
      .off('mouseup.dismiss.bs.modal')

    this.$dialog.off('mousedown.dismiss.bs.modal')

    $.support.transition && this.$element.hasClass('fade') ?
      this.$element
        .one('bsTransitionEnd', $.proxy(this.hideModal, this))
        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
      this.hideModal()
  }

  Modal.prototype.enforceFocus = function () {
    $(document)
      .off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function (e) {
        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
          this.$element.trigger('focus')
        }
      }, this))
  }

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide()
      }, this))
    } else if (!this.isShown) {
      this.$element.off('keydown.dismiss.bs.modal')
    }
  }

  Modal.prototype.resize = function () {
    if (this.isShown) {
      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))
    } else {
      $(window).off('resize.bs.modal')
    }
  }

  Modal.prototype.hideModal = function () {
    var that = this
    this.$element.hide()
    this.backdrop(function () {
      that.$body.removeClass('modal-open')
      that.resetAdjustments()
      that.resetScrollbar()
      that.$element.trigger('hidden.bs.modal')
    })
  }

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove()
    this.$backdrop = null
  }

  Modal.prototype.backdrop = function (callback) {
    var that = this
    var animate = this.$element.hasClass('fade') ? 'fade' : ''

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate

      this.$backdrop = $(document.createElement('div'))
        .addClass('modal-backdrop ' + animate)
        .appendTo(this.$body)

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (this.ignoreBackdropClick) {
          this.ignoreBackdropClick = false
          return
        }
        if (e.target !== e.currentTarget) return
        this.options.backdrop == 'static'
          ? this.$element[0].focus()
          : this.hide()
      }, this))

      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

      this.$backdrop.addClass('in')

      if (!callback) return

      doAnimate ?
        this.$backdrop
          .one('bsTransitionEnd', callback)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callback()

    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in')

      var callbackRemove = function () {
        that.removeBackdrop()
        callback && callback()
      }
      $.support.transition && this.$element.hasClass('fade') ?
        this.$backdrop
          .one('bsTransitionEnd', callbackRemove)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callbackRemove()

    } else if (callback) {
      callback()
    }
  }

  // these following methods are used to handle overflowing modals

  Modal.prototype.handleUpdate = function () {
    this.adjustDialog()
  }

  Modal.prototype.adjustDialog = function () {
    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight

    this.$element.css({
      paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
    })
  }

  Modal.prototype.resetAdjustments = function () {
    this.$element.css({
      paddingLeft: '',
      paddingRight: ''
    })
  }

  Modal.prototype.checkScrollbar = function () {
    var fullWindowWidth = window.innerWidth
    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
      var documentElementRect = document.documentElement.getBoundingClientRect()
      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
    }
    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth
    this.scrollbarWidth = this.measureScrollbar()
  }

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
    this.originalBodyPad = document.body.style.paddingRight || ''
    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
  }

  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', this.originalBodyPad)
  }

  Modal.prototype.measureScrollbar = function () { // thx walsh
    var scrollDiv = document.createElement('div')
    scrollDiv.className = 'modal-scrollbar-measure'
    this.$body.append(scrollDiv)
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
    this.$body[0].removeChild(scrollDiv)
    return scrollbarWidth
  }


  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  var old = $.fn.modal

  $.fn.modal             = Plugin
  $.fn.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this   = $(this)
    var href    = $this.attr('href')
    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

    if ($this.is('a')) e.preventDefault()

    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus')
      })
    })
    Plugin.call($target, option, this)
  })

}(jQuery);

},{}],19:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: popover.js v3.3.6
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

  Popover.VERSION  = '3.3.6'

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

  Popover.prototype.constructor = Popover

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS
  }

  Popover.prototype.setContent = function () {
    var $tip    = this.tip()
    var title   = this.getTitle()
    var content = this.getContent()

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events
      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
    ](content)

    $tip.removeClass('fade top bottom left right in')

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
  }

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent()
  }

  Popover.prototype.getContent = function () {
    var $e = this.$element
    var o  = this.options

    return $e.attr('data-content')
      || (typeof o.content == 'function' ?
            o.content.call($e[0]) :
            o.content)
  }

  Popover.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
  }


  // POPOVER PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.popover')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.popover

  $.fn.popover             = Plugin
  $.fn.popover.Constructor = Popover


  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(jQuery);

},{}],20:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: scrollspy.js v3.3.6
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    this.$body          = $(document.body)
    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
    this.selector       = (this.options.target || '') + ' .nav li > a'
    this.offsets        = []
    this.targets        = []
    this.activeTarget   = null
    this.scrollHeight   = 0

    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))
    this.refresh()
    this.process()
  }

  ScrollSpy.VERSION  = '3.3.6'

  ScrollSpy.DEFAULTS = {
    offset: 10
  }

  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
  }

  ScrollSpy.prototype.refresh = function () {
    var that          = this
    var offsetMethod  = 'offset'
    var offsetBase    = 0

    this.offsets      = []
    this.targets      = []
    this.scrollHeight = this.getScrollHeight()

    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position'
      offsetBase   = this.$scrollElement.scrollTop()
    }

    this.$body
      .find(this.selector)
      .map(function () {
        var $el   = $(this)
        var href  = $el.data('target') || $el.attr('href')
        var $href = /^#./.test(href) && $(href)

        return ($href
          && $href.length
          && $href.is(':visible')
          && [[$href[offsetMethod]().top + offsetBase, href]]) || null
      })
      .sort(function (a, b) { return a[0] - b[0] })
      .each(function () {
        that.offsets.push(this[0])
        that.targets.push(this[1])
      })
  }

  ScrollSpy.prototype.process = function () {
    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
    var scrollHeight = this.getScrollHeight()
    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()
    var offsets      = this.offsets
    var targets      = this.targets
    var activeTarget = this.activeTarget
    var i

    if (this.scrollHeight != scrollHeight) {
      this.refresh()
    }

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
    }

    if (activeTarget && scrollTop < offsets[0]) {
      this.activeTarget = null
      return this.clear()
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i]
        && scrollTop >= offsets[i]
        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])
        && this.activate(targets[i])
    }
  }

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target

    this.clear()

    var selector = this.selector +
      '[data-target="' + target + '"],' +
      this.selector + '[href="' + target + '"]'

    var active = $(selector)
      .parents('li')
      .addClass('active')

    if (active.parent('.dropdown-menu').length) {
      active = active
        .closest('li.dropdown')
        .addClass('active')
    }

    active.trigger('activate.bs.scrollspy')
  }

  ScrollSpy.prototype.clear = function () {
    $(this.selector)
      .parentsUntil(this.options.target, '.active')
      .removeClass('active')
  }


  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.scrollspy')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.scrollspy

  $.fn.scrollspy             = Plugin
  $.fn.scrollspy.Constructor = ScrollSpy


  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      Plugin.call($spy, $spy.data())
    })
  })

}(jQuery);

},{}],21:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: tab.js v3.3.6
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    // jscs:disable requireDollarBeforejQueryAssignment
    this.element = $(element)
    // jscs:enable requireDollarBeforejQueryAssignment
  }

  Tab.VERSION = '3.3.6'

  Tab.TRANSITION_DURATION = 150

  Tab.prototype.show = function () {
    var $this    = this.element
    var $ul      = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var $previous = $ul.find('.active:last a')
    var hideEvent = $.Event('hide.bs.tab', {
      relatedTarget: $this[0]
    })
    var showEvent = $.Event('show.bs.tab', {
      relatedTarget: $previous[0]
    })

    $previous.trigger(hideEvent)
    $this.trigger(showEvent)

    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.closest('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      })
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active    = container.find('> .active')
    var transition = callback
      && $.support.transition
      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
          .removeClass('active')
        .end()
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', false)

      element
        .addClass('active')
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', true)

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu').length) {
        element
          .closest('li.dropdown')
            .addClass('active')
          .end()
          .find('[data-toggle="tab"]')
            .attr('aria-expanded', true)
      }

      callback && callback()
    }

    $active.length && transition ?
      $active
        .one('bsTransitionEnd', next)
        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tab

  $.fn.tab             = Plugin
  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  var clickHandler = function (e) {
    e.preventDefault()
    Plugin.call($(this), 'show')
  }

  $(document)
    .on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
    .on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)

}(jQuery);

},{}],22:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: tooltip.js v3.3.6
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type       = null
    this.options    = null
    this.enabled    = null
    this.timeout    = null
    this.hoverState = null
    this.$element   = null
    this.inState    = null

    this.init('tooltip', element, options)
  }

  Tooltip.VERSION  = '3.3.6'

  Tooltip.TRANSITION_DURATION = 150

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  }

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled   = true
    this.type      = type
    this.$element  = $(element)
    this.options   = this.getOptions(options)
    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
    this.inState   = { click: false, hover: false, focus: false }

    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
    }

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
    }

    if (self.tip().hasClass('in') || self.hoverState == 'in') {
      self.hoverState = 'in'
      return
    }

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.isInStateTrue = function () {
    for (var key in this.inState) {
      if (this.inState[key]) return true
    }

    return false
  }

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
    }

    if (self.isInStateTrue()) return

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
      if (e.isDefaultPrevented() || !inDom) return
      var that = this

      var $tip = this.tip()

      var tipId = this.getUID(this.type)

      this.setContent()
      $tip.attr('id', tipId)
      this.$element.attr('aria-describedby', tipId)

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)
        .data('bs.' + this.type, this)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
      this.$element.trigger('inserted.bs.' + this.type)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var orgPlacement = placement
        var viewportDim = this.getPosition(this.$viewport)

        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :
                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :
                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :
                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)

      var complete = function () {
        var prevHoverState = that.hoverState
        that.$element.trigger('shown.bs.' + that.type)
        that.hoverState = null

        if (prevHoverState == 'out') that.leave(that)
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
          .one('bsTransitionEnd', complete)
          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
        complete()
    }
  }

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  += marginTop
    offset.left += marginLeft

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

    if (delta.left) offset.left += delta.left
    else offset.top += delta.top

    var isVertical          = /top|bottom/.test(placement)
    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

    $tip.offset(offset)
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
  }

  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
    this.arrow()
      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
      .css(isVertical ? 'top' : 'left', '')
  }

  Tooltip.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function (callback) {
    var that = this
    var $tip = $(this.$tip)
    var e    = $.Event('hide.bs.' + this.type)

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
      that.$element
        .removeAttr('aria-describedby')
        .trigger('hidden.bs.' + that.type)
      callback && callback()
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && $tip.hasClass('fade') ?
      $tip
        .one('bsTransitionEnd', complete)
        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
      complete()

    this.hoverState = null

    return this
  }

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function ($element) {
    $element   = $element || this.$element

    var el     = $element[0]
    var isBody = el.tagName == 'BODY'

    var elRect    = el.getBoundingClientRect()
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
    }
    var elOffset  = isBody ? { top: 0, left: 0 } : $element.offset()
    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null

    return $.extend({}, elRect, scroll, outerDims, elOffset)
  }

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }

  }

  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 }
    if (!this.$viewport) return delta

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
    var viewportDimensions = this.getPosition(this.$viewport)

    if (/right|left/.test(placement)) {
      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
      if (topEdgeOffset < viewportDimensions.top) { // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
      }
    } else {
      var leftEdgeOffset  = pos.left - viewportPadding
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset
      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
      }
    }

    return delta
  }

  Tooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  Tooltip.prototype.getUID = function (prefix) {
    do prefix += ~~(Math.random() * 1000000)
    while (document.getElementById(prefix))
    return prefix
  }

  Tooltip.prototype.tip = function () {
    if (!this.$tip) {
      this.$tip = $(this.options.template)
      if (this.$tip.length != 1) {
        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
      }
    }
    return this.$tip
  }

  Tooltip.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
  }

  Tooltip.prototype.enable = function () {
    this.enabled = true
  }

  Tooltip.prototype.disable = function () {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function (e) {
    var self = this
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type)
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
        $(e.currentTarget).data('bs.' + this.type, self)
      }
    }

    if (e) {
      self.inState.click = !self.inState.click
      if (self.isInStateTrue()) self.enter(self)
      else self.leave(self)
    } else {
      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
    }
  }

  Tooltip.prototype.destroy = function () {
    var that = this
    clearTimeout(this.timeout)
    this.hide(function () {
      that.$element.off('.' + that.type).removeData('bs.' + that.type)
      if (that.$tip) {
        that.$tip.detach()
      }
      that.$tip = null
      that.$arrow = null
      that.$viewport = null
    })
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tooltip

  $.fn.tooltip             = Plugin
  $.fn.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(jQuery);

},{}],23:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: transition.js v3.3.6
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition : 'webkitTransitionEnd',
      MozTransition    : 'transitionend',
      OTransition      : 'oTransitionEnd otransitionend',
      transition       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);

},{}],24:[function(require,module,exports){
var Modernizr = require('./lib/Modernizr'),
    ModernizrProto = require('./lib/ModernizrProto'),
    classes = require('./lib/classes'),
    testRunner = require('./lib/testRunner'),
    setClasses = require('./lib/setClasses');

// Run each test
testRunner();

// Remove the "no-js" class if it exists
setClasses(classes);

delete ModernizrProto.addTest;
delete ModernizrProto.addAsyncTest;

// Run the things that are supposed to run after the tests
for (var i = 0; i < Modernizr._q.length; i++) {
  Modernizr._q[i]();
}

module.exports = Modernizr;

},{"./lib/Modernizr":25,"./lib/ModernizrProto":26,"./lib/classes":27,"./lib/setClasses":32,"./lib/testRunner":33}],25:[function(require,module,exports){
var ModernizrProto = require('./ModernizrProto.js');
  // Fake some of Object.create so we can force non test results to be non "own" properties.
  var Modernizr = function() {};
  Modernizr.prototype = ModernizrProto;

  // Leak modernizr globally when you `require` it rather than force it here.
  // Overwrite name so constructor name is nicer :D
  Modernizr = new Modernizr();

  module.exports = Modernizr;


},{"./ModernizrProto.js":26}],26:[function(require,module,exports){
var tests = require('./tests.js');
  /**
   *
   * ModernizrProto is the constructor for Modernizr
   *
   * @class
   * @access public
   */

  var ModernizrProto = {
    // The current version, dummy
    _version: '3.3.1 (browsernizr 2.1.0)',

    // Any settings that don't work as separate modules
    // can go in here as configuration.
    _config: {
      'classPrefix': '',
      'enableClasses': true,
      'enableJSClass': true,
      'usePrefixes': true
    },

    // Queue of tests
    _q: [],

    // Stub these for people who are listening
    on: function(test, cb) {
      // I don't really think people should do this, but we can
      // safe guard it a bit.
      // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.
      // This is in case people listen to synchronous tests. I would leave it out,
      // but the code to *disallow* sync tests in the real version of this
      // function is actually larger than this.
      var self = this;
      setTimeout(function() {
        cb(self[test]);
      }, 0);
    },

    addTest: function(name, fn, options) {
      tests.push({name: name, fn: fn, options: options});
    },

    addAsyncTest: function(fn) {
      tests.push({name: null, fn: fn});
    }
  };

  module.exports = ModernizrProto;


},{"./tests.js":34}],27:[function(require,module,exports){

  var classes = [];
  module.exports = classes;


},{}],28:[function(require,module,exports){
var isSVG = require('./isSVG.js');
  /**
   * createElement is a convenience wrapper around document.createElement. Since we
   * use createElement all over the place, this allows for (slightly) smaller code
   * as well as abstracting away issues with creating elements in contexts other than
   * HTML documents (e.g. SVG documents).
   *
   * @access private
   * @function createElement
   * @returns {HTMLElement|SVGElement} An HTML or SVG element
   */

  function createElement() {
    if (typeof document.createElement !== 'function') {
      // This is the case in IE7, where the type of createElement is "object".
      // For this reason, we cannot call apply() as Object is not a Function.
      return document.createElement(arguments[0]);
    } else if (isSVG) {
      return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);
    } else {
      return document.createElement.apply(document, arguments);
    }
  }

  module.exports = createElement;


},{"./isSVG.js":31}],29:[function(require,module,exports){

  /**
   * docElement is a convenience wrapper to grab the root element of the document
   *
   * @access private
   * @returns {HTMLElement|SVGElement} The root element of the document
   */

  var docElement = document.documentElement;
  module.exports = docElement;


},{}],30:[function(require,module,exports){

  /**
   * is returns a boolean if the typeof an obj is exactly type.
   *
   * @access private
   * @function is
   * @param {*} obj - A thing we want to check the type of
   * @param {string} type - A string to compare the typeof against
   * @returns {boolean}
   */

  function is(obj, type) {
    return typeof obj === type;
  }
  module.exports = is;


},{}],31:[function(require,module,exports){
var docElement = require('./docElement.js');
  /**
   * A convenience helper to check if the document we are running in is an SVG document
   *
   * @access private
   * @returns {boolean}
   */

  var isSVG = docElement.nodeName.toLowerCase() === 'svg';
  module.exports = isSVG;


},{"./docElement.js":29}],32:[function(require,module,exports){
var Modernizr = require('./Modernizr.js');
var docElement = require('./docElement.js');
var isSVG = require('./isSVG.js');
  /**
   * setClasses takes an array of class names and adds them to the root element
   *
   * @access private
   * @function setClasses
   * @param {string[]} classes - Array of class names
   */

  // Pass in an and array of class names, e.g.:
  //  ['no-webp', 'borderradius', ...]
  function setClasses(classes) {
    var className = docElement.className;
    var classPrefix = Modernizr._config.classPrefix || '';

    if (isSVG) {
      className = className.baseVal;
    }

    // Change `no-js` to `js` (independently of the `enableClasses` option)
    // Handle classPrefix on this too
    if (Modernizr._config.enableJSClass) {
      var reJS = new RegExp('(^|\\s)' + classPrefix + 'no-js(\\s|$)');
      className = className.replace(reJS, '$1' + classPrefix + 'js$2');
    }

    if (Modernizr._config.enableClasses) {
      // Add the new classes
      className += ' ' + classPrefix + classes.join(' ' + classPrefix);
      isSVG ? docElement.className.baseVal = className : docElement.className = className;
    }

  }

  module.exports = setClasses;


},{"./Modernizr.js":25,"./docElement.js":29,"./isSVG.js":31}],33:[function(require,module,exports){
var tests = require('./tests.js');
var Modernizr = require('./Modernizr.js');
var classes = require('./classes.js');
var is = require('./is.js');
  /**
   * Run through all tests and detect their support in the current UA.
   *
   * @access private
   */

  function testRunner() {
    var featureNames;
    var feature;
    var aliasIdx;
    var result;
    var nameIdx;
    var featureName;
    var featureNameSplit;

    for (var featureIdx in tests) {
      if (tests.hasOwnProperty(featureIdx)) {
        featureNames = [];
        feature = tests[featureIdx];
        // run the test, throw the return value into the Modernizr,
        // then based on that boolean, define an appropriate className
        // and push it into an array of classes we'll join later.
        //
        // If there is no name, it's an 'async' test that is run,
        // but not directly added to the object. That should
        // be done with a post-run addTest call.
        if (feature.name) {
          featureNames.push(feature.name.toLowerCase());

          if (feature.options && feature.options.aliases && feature.options.aliases.length) {
            // Add all the aliases into the names list
            for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {
              featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());
            }
          }
        }

        // Run the test, or use the raw value if it's not a function
        result = is(feature.fn, 'function') ? feature.fn() : feature.fn;


        // Set each of the names on the Modernizr object
        for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {
          featureName = featureNames[nameIdx];
          // Support dot properties as sub tests. We don't do checking to make sure
          // that the implied parent tests have been added. You must call them in
          // order (either in the test, or make the parent test a dependency).
          //
          // Cap it to TWO to make the logic simple and because who needs that kind of subtesting
          // hashtag famous last words
          featureNameSplit = featureName.split('.');

          if (featureNameSplit.length === 1) {
            Modernizr[featureNameSplit[0]] = result;
          } else {
            // cast to a Boolean, if not one already
            /* jshint -W053 */
            if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {
              Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);
            }

            Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;
          }

          classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));
        }
      }
    }
  }
  module.exports = testRunner;


},{"./Modernizr.js":25,"./classes.js":27,"./is.js":30,"./tests.js":34}],34:[function(require,module,exports){

  var tests = [];
  module.exports = tests;


},{}],35:[function(require,module,exports){
/*!
{
  "name": "Local Storage",
  "property": "localstorage",
  "caniuse": "namevalue-storage",
  "tags": ["storage"],
  "knownBugs": [],
  "notes": [],
  "warnings": [],
  "polyfills": [
    "joshuabell-polyfill",
    "cupcake",
    "storagepolyfill",
    "amplifyjs",
    "yui-cacheoffline"
  ]
}
!*/
var Modernizr = require('./../../lib/Modernizr.js');
  // In FF4, if disabled, window.localStorage should === null.

  // Normally, we could not test that directly and need to do a
  //   `('localStorage' in window) && ` test first because otherwise Firefox will
  //   throw bugzil.la/365772 if cookies are disabled

  // Also in iOS5 Private Browsing mode, attempting to use localStorage.setItem
  // will throw the exception:
  //   QUOTA_EXCEEDED_ERROR DOM Exception 22.
  // Peculiarly, getItem and removeItem calls do not throw.

  // Because we are forced to try/catch this, we'll go aggressive.

  // Just FWIW: IE8 Compat mode supports these features completely:
  //   www.quirksmode.org/dom/html5.html
  // But IE8 doesn't support either with local files

  Modernizr.addTest('localstorage', function() {
    var mod = 'modernizr';
    try {
      localStorage.setItem(mod, mod);
      localStorage.removeItem(mod);
      return true;
    } catch (e) {
      return false;
    }
  });


},{"./../../lib/Modernizr.js":25}],36:[function(require,module,exports){
/*!
{
  "name": "WebGL",
  "property": "webgl",
  "caniuse": "webgl",
  "tags": ["webgl", "graphics"],
  "polyfills": ["jebgl", "cwebgl", "iewebgl"]
}
!*/
var Modernizr = require('./../lib/Modernizr.js');
var createElement = require('./../lib/createElement.js');
  Modernizr.addTest('webgl', function() {
    var canvas = createElement('canvas');
    var supports = 'probablySupportsContext' in canvas ? 'probablySupportsContext' :  'supportsContext';
    if (supports in canvas) {
      return canvas[supports]('webgl') || canvas[supports]('experimental-webgl');
    }
    return 'WebGLRenderingContext' in window;
  });


},{"./../lib/Modernizr.js":25,"./../lib/createElement.js":28}]},{},[10]);
